/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { EventFragment, FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type { OnEvent, TypedEvent, TypedEventFilter, TypedListener } from './common';

export interface VaiControllerInterface extends utils.Interface {
  functions: {
    'INITIAL_VAI_MINT_INDEX()': FunctionFragment;
    '_become(address)': FunctionFragment;
    '_setComptroller(address)': FunctionFragment;
    '_setTreasuryData(address,address,uint256)': FunctionFragment;
    'accessControl()': FunctionFragment;
    'accrueVAIInterest()': FunctionFragment;
    'admin()': FunctionFragment;
    'baseRateMantissa()': FunctionFragment;
    'comptroller()': FunctionFragment;
    'floatRateMantissa()': FunctionFragment;
    'getBlockNumber()': FunctionFragment;
    'getBlocksPerYear()': FunctionFragment;
    'getMintableVAI(address)': FunctionFragment;
    'getVAIAddress()': FunctionFragment;
    'getVAICalculateRepayAmount(address,uint256)': FunctionFragment;
    'getVAIMinterInterestIndex(address)': FunctionFragment;
    'getVAIRepayAmount(address)': FunctionFragment;
    'getVAIRepayRate()': FunctionFragment;
    'getVAIRepayRatePerBlock()': FunctionFragment;
    'initialize()': FunctionFragment;
    'isVenusVAIInitialized()': FunctionFragment;
    'liquidateVAI(address,uint256,address)': FunctionFragment;
    'mintCap()': FunctionFragment;
    'mintVAI(uint256)': FunctionFragment;
    'pastVAIInterest(address)': FunctionFragment;
    'pendingAdmin()': FunctionFragment;
    'pendingVAIControllerImplementation()': FunctionFragment;
    'receiver()': FunctionFragment;
    'repayVAI(uint256)': FunctionFragment;
    'setAccessControl(address)': FunctionFragment;
    'setBaseRate(uint256)': FunctionFragment;
    'setFloatRate(uint256)': FunctionFragment;
    'setMintCap(uint256)': FunctionFragment;
    'setReceiver(address)': FunctionFragment;
    'treasuryAddress()': FunctionFragment;
    'treasuryGuardian()': FunctionFragment;
    'treasuryPercent()': FunctionFragment;
    'vaiControllerImplementation()': FunctionFragment;
    'vaiMintIndex()': FunctionFragment;
    'venusVAIMinterIndex(address)': FunctionFragment;
    'venusVAIState()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'INITIAL_VAI_MINT_INDEX'
      | '_become'
      | '_setComptroller'
      | '_setTreasuryData'
      | 'accessControl'
      | 'accrueVAIInterest'
      | 'admin'
      | 'baseRateMantissa'
      | 'comptroller'
      | 'floatRateMantissa'
      | 'getBlockNumber'
      | 'getBlocksPerYear'
      | 'getMintableVAI'
      | 'getVAIAddress'
      | 'getVAICalculateRepayAmount'
      | 'getVAIMinterInterestIndex'
      | 'getVAIRepayAmount'
      | 'getVAIRepayRate'
      | 'getVAIRepayRatePerBlock'
      | 'initialize'
      | 'isVenusVAIInitialized'
      | 'liquidateVAI'
      | 'mintCap'
      | 'mintVAI'
      | 'pastVAIInterest'
      | 'pendingAdmin'
      | 'pendingVAIControllerImplementation'
      | 'receiver'
      | 'repayVAI'
      | 'setAccessControl'
      | 'setBaseRate'
      | 'setFloatRate'
      | 'setMintCap'
      | 'setReceiver'
      | 'treasuryAddress'
      | 'treasuryGuardian'
      | 'treasuryPercent'
      | 'vaiControllerImplementation'
      | 'vaiMintIndex'
      | 'venusVAIMinterIndex'
      | 'venusVAIState',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'INITIAL_VAI_MINT_INDEX', values?: undefined): string;
  encodeFunctionData(functionFragment: '_become', values: [string]): string;
  encodeFunctionData(functionFragment: '_setComptroller', values: [string]): string;
  encodeFunctionData(
    functionFragment: '_setTreasuryData',
    values: [string, string, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'accessControl', values?: undefined): string;
  encodeFunctionData(functionFragment: 'accrueVAIInterest', values?: undefined): string;
  encodeFunctionData(functionFragment: 'admin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'baseRateMantissa', values?: undefined): string;
  encodeFunctionData(functionFragment: 'comptroller', values?: undefined): string;
  encodeFunctionData(functionFragment: 'floatRateMantissa', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getBlockNumber', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getBlocksPerYear', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getMintableVAI', values: [string]): string;
  encodeFunctionData(functionFragment: 'getVAIAddress', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getVAICalculateRepayAmount',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'getVAIMinterInterestIndex', values: [string]): string;
  encodeFunctionData(functionFragment: 'getVAIRepayAmount', values: [string]): string;
  encodeFunctionData(functionFragment: 'getVAIRepayRate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getVAIRepayRatePerBlock', values?: undefined): string;
  encodeFunctionData(functionFragment: 'initialize', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isVenusVAIInitialized', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'liquidateVAI',
    values: [string, BigNumberish, string],
  ): string;
  encodeFunctionData(functionFragment: 'mintCap', values?: undefined): string;
  encodeFunctionData(functionFragment: 'mintVAI', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'pastVAIInterest', values: [string]): string;
  encodeFunctionData(functionFragment: 'pendingAdmin', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'pendingVAIControllerImplementation',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'receiver', values?: undefined): string;
  encodeFunctionData(functionFragment: 'repayVAI', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setAccessControl', values: [string]): string;
  encodeFunctionData(functionFragment: 'setBaseRate', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setFloatRate', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setMintCap', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setReceiver', values: [string]): string;
  encodeFunctionData(functionFragment: 'treasuryAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'treasuryGuardian', values?: undefined): string;
  encodeFunctionData(functionFragment: 'treasuryPercent', values?: undefined): string;
  encodeFunctionData(functionFragment: 'vaiControllerImplementation', values?: undefined): string;
  encodeFunctionData(functionFragment: 'vaiMintIndex', values?: undefined): string;
  encodeFunctionData(functionFragment: 'venusVAIMinterIndex', values: [string]): string;
  encodeFunctionData(functionFragment: 'venusVAIState', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'INITIAL_VAI_MINT_INDEX', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_become', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setComptroller', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setTreasuryData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accessControl', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accrueVAIInterest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'admin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'baseRateMantissa', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'comptroller', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'floatRateMantissa', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBlockNumber', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBlocksPerYear', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMintableVAI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVAIAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVAICalculateRepayAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVAIMinterInterestIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVAIRepayAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVAIRepayRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVAIRepayRatePerBlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isVenusVAIInitialized', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidateVAI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintCap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintVAI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pastVAIInterest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingAdmin', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'pendingVAIControllerImplementation',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'receiver', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repayVAI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAccessControl', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBaseRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFloatRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMintCap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setReceiver', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'treasuryAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'treasuryGuardian', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'treasuryPercent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vaiControllerImplementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vaiMintIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'venusVAIMinterIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'venusVAIState', data: BytesLike): Result;

  events: {
    'Failure(uint256,uint256,uint256)': EventFragment;
    'LiquidateVAI(address,address,uint256,address,uint256)': EventFragment;
    'MintFee(address,uint256)': EventFragment;
    'MintVAI(address,uint256)': EventFragment;
    'NewAccessControl(address,address)': EventFragment;
    'NewComptroller(address,address)': EventFragment;
    'NewTreasuryAddress(address,address)': EventFragment;
    'NewTreasuryGuardian(address,address)': EventFragment;
    'NewTreasuryPercent(uint256,uint256)': EventFragment;
    'NewVAIBaseRate(uint256,uint256)': EventFragment;
    'NewVAIFloatRate(uint256,uint256)': EventFragment;
    'NewVAIMintCap(uint256,uint256)': EventFragment;
    'NewVAIReceiver(address,address)': EventFragment;
    'RepayVAI(address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Failure'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LiquidateVAI'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MintFee'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MintVAI'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewAccessControl'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewComptroller'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewTreasuryAddress'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewTreasuryGuardian'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewTreasuryPercent'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewVAIBaseRate'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewVAIFloatRate'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewVAIMintCap'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewVAIReceiver'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RepayVAI'): EventFragment;
}

export interface FailureEventObject {
  error: BigNumber;
  info: BigNumber;
  detail: BigNumber;
}
export type FailureEvent = TypedEvent<[BigNumber, BigNumber, BigNumber], FailureEventObject>;

export type FailureEventFilter = TypedEventFilter<FailureEvent>;

export interface LiquidateVAIEventObject {
  liquidator: string;
  borrower: string;
  repayAmount: BigNumber;
  vTokenCollateral: string;
  seizeTokens: BigNumber;
}
export type LiquidateVAIEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber],
  LiquidateVAIEventObject
>;

export type LiquidateVAIEventFilter = TypedEventFilter<LiquidateVAIEvent>;

export interface MintFeeEventObject {
  minter: string;
  feeAmount: BigNumber;
}
export type MintFeeEvent = TypedEvent<[string, BigNumber], MintFeeEventObject>;

export type MintFeeEventFilter = TypedEventFilter<MintFeeEvent>;

export interface MintVAIEventObject {
  minter: string;
  mintVAIAmount: BigNumber;
}
export type MintVAIEvent = TypedEvent<[string, BigNumber], MintVAIEventObject>;

export type MintVAIEventFilter = TypedEventFilter<MintVAIEvent>;

export interface NewAccessControlEventObject {
  oldAccessControlAddress: string;
  newAccessControlAddress: string;
}
export type NewAccessControlEvent = TypedEvent<[string, string], NewAccessControlEventObject>;

export type NewAccessControlEventFilter = TypedEventFilter<NewAccessControlEvent>;

export interface NewComptrollerEventObject {
  oldComptroller: string;
  newComptroller: string;
}
export type NewComptrollerEvent = TypedEvent<[string, string], NewComptrollerEventObject>;

export type NewComptrollerEventFilter = TypedEventFilter<NewComptrollerEvent>;

export interface NewTreasuryAddressEventObject {
  oldTreasuryAddress: string;
  newTreasuryAddress: string;
}
export type NewTreasuryAddressEvent = TypedEvent<[string, string], NewTreasuryAddressEventObject>;

export type NewTreasuryAddressEventFilter = TypedEventFilter<NewTreasuryAddressEvent>;

export interface NewTreasuryGuardianEventObject {
  oldTreasuryGuardian: string;
  newTreasuryGuardian: string;
}
export type NewTreasuryGuardianEvent = TypedEvent<[string, string], NewTreasuryGuardianEventObject>;

export type NewTreasuryGuardianEventFilter = TypedEventFilter<NewTreasuryGuardianEvent>;

export interface NewTreasuryPercentEventObject {
  oldTreasuryPercent: BigNumber;
  newTreasuryPercent: BigNumber;
}
export type NewTreasuryPercentEvent = TypedEvent<
  [BigNumber, BigNumber],
  NewTreasuryPercentEventObject
>;

export type NewTreasuryPercentEventFilter = TypedEventFilter<NewTreasuryPercentEvent>;

export interface NewVAIBaseRateEventObject {
  oldBaseRateMantissa: BigNumber;
  newBaseRateMantissa: BigNumber;
}
export type NewVAIBaseRateEvent = TypedEvent<[BigNumber, BigNumber], NewVAIBaseRateEventObject>;

export type NewVAIBaseRateEventFilter = TypedEventFilter<NewVAIBaseRateEvent>;

export interface NewVAIFloatRateEventObject {
  oldFloatRateMantissa: BigNumber;
  newFlatRateMantissa: BigNumber;
}
export type NewVAIFloatRateEvent = TypedEvent<[BigNumber, BigNumber], NewVAIFloatRateEventObject>;

export type NewVAIFloatRateEventFilter = TypedEventFilter<NewVAIFloatRateEvent>;

export interface NewVAIMintCapEventObject {
  oldMintCap: BigNumber;
  newMintCap: BigNumber;
}
export type NewVAIMintCapEvent = TypedEvent<[BigNumber, BigNumber], NewVAIMintCapEventObject>;

export type NewVAIMintCapEventFilter = TypedEventFilter<NewVAIMintCapEvent>;

export interface NewVAIReceiverEventObject {
  oldReceiver: string;
  newReceiver: string;
}
export type NewVAIReceiverEvent = TypedEvent<[string, string], NewVAIReceiverEventObject>;

export type NewVAIReceiverEventFilter = TypedEventFilter<NewVAIReceiverEvent>;

export interface RepayVAIEventObject {
  payer: string;
  borrower: string;
  repayVAIAmount: BigNumber;
}
export type RepayVAIEvent = TypedEvent<[string, string, BigNumber], RepayVAIEventObject>;

export type RepayVAIEventFilter = TypedEventFilter<RepayVAIEvent>;

export interface VaiController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VaiControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    INITIAL_VAI_MINT_INDEX(overrides?: CallOverrides): Promise<[BigNumber]>;

    _become(
      unitroller: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    _setComptroller(
      comptroller_: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    _setTreasuryData(
      newTreasuryGuardian: string,
      newTreasuryAddress: string,
      newTreasuryPercent: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    accessControl(overrides?: CallOverrides): Promise<[string]>;

    accrueVAIInterest(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    baseRateMantissa(overrides?: CallOverrides): Promise<[BigNumber]>;

    comptroller(overrides?: CallOverrides): Promise<[string]>;

    floatRateMantissa(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBlocksPerYear(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMintableVAI(minter: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    getVAIAddress(overrides?: CallOverrides): Promise<[string]>;

    getVAICalculateRepayAmount(
      borrower: string,
      repayAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getVAIMinterInterestIndex(minter: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getVAIRepayAmount(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getVAIRepayRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    getVAIRepayRatePerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    isVenusVAIInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    liquidateVAI(
      borrower: string,
      repayAmount: BigNumberish,
      vTokenCollateral: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    mintCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintVAI(
      mintVAIAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    pastVAIInterest(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    pendingAdmin(overrides?: CallOverrides): Promise<[string]>;

    pendingVAIControllerImplementation(overrides?: CallOverrides): Promise<[string]>;

    receiver(overrides?: CallOverrides): Promise<[string]>;

    repayVAI(
      repayVAIAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setAccessControl(
      newAccessControlAddress: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setBaseRate(
      newBaseRateMantissa: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setFloatRate(
      newFloatRateMantissa: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setMintCap(
      _mintCap: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setReceiver(
      newReceiver: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    treasuryAddress(overrides?: CallOverrides): Promise<[string]>;

    treasuryGuardian(overrides?: CallOverrides): Promise<[string]>;

    treasuryPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    vaiControllerImplementation(overrides?: CallOverrides): Promise<[string]>;

    vaiMintIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    venusVAIMinterIndex(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    venusVAIState(
      overrides?: CallOverrides,
    ): Promise<[BigNumber, number] & { index: BigNumber; block: number }>;
  };

  INITIAL_VAI_MINT_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

  _become(
    unitroller: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  _setComptroller(
    comptroller_: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  _setTreasuryData(
    newTreasuryGuardian: string,
    newTreasuryAddress: string,
    newTreasuryPercent: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  accessControl(overrides?: CallOverrides): Promise<string>;

  accrueVAIInterest(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  baseRateMantissa(overrides?: CallOverrides): Promise<BigNumber>;

  comptroller(overrides?: CallOverrides): Promise<string>;

  floatRateMantissa(overrides?: CallOverrides): Promise<BigNumber>;

  getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  getBlocksPerYear(overrides?: CallOverrides): Promise<BigNumber>;

  getMintableVAI(minter: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  getVAIAddress(overrides?: CallOverrides): Promise<string>;

  getVAICalculateRepayAmount(
    borrower: string,
    repayAmount: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getVAIMinterInterestIndex(minter: string, overrides?: CallOverrides): Promise<BigNumber>;

  getVAIRepayAmount(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  getVAIRepayRate(overrides?: CallOverrides): Promise<BigNumber>;

  getVAIRepayRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  isVenusVAIInitialized(overrides?: CallOverrides): Promise<boolean>;

  liquidateVAI(
    borrower: string,
    repayAmount: BigNumberish,
    vTokenCollateral: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  mintCap(overrides?: CallOverrides): Promise<BigNumber>;

  mintVAI(
    mintVAIAmount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  pastVAIInterest(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  pendingAdmin(overrides?: CallOverrides): Promise<string>;

  pendingVAIControllerImplementation(overrides?: CallOverrides): Promise<string>;

  receiver(overrides?: CallOverrides): Promise<string>;

  repayVAI(
    repayVAIAmount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setAccessControl(
    newAccessControlAddress: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setBaseRate(
    newBaseRateMantissa: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setFloatRate(
    newFloatRateMantissa: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setMintCap(
    _mintCap: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setReceiver(
    newReceiver: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  treasuryAddress(overrides?: CallOverrides): Promise<string>;

  treasuryGuardian(overrides?: CallOverrides): Promise<string>;

  treasuryPercent(overrides?: CallOverrides): Promise<BigNumber>;

  vaiControllerImplementation(overrides?: CallOverrides): Promise<string>;

  vaiMintIndex(overrides?: CallOverrides): Promise<BigNumber>;

  venusVAIMinterIndex(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  venusVAIState(
    overrides?: CallOverrides,
  ): Promise<[BigNumber, number] & { index: BigNumber; block: number }>;

  callStatic: {
    INITIAL_VAI_MINT_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    _become(unitroller: string, overrides?: CallOverrides): Promise<void>;

    _setComptroller(comptroller_: string, overrides?: CallOverrides): Promise<BigNumber>;

    _setTreasuryData(
      newTreasuryGuardian: string,
      newTreasuryAddress: string,
      newTreasuryPercent: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    accessControl(overrides?: CallOverrides): Promise<string>;

    accrueVAIInterest(overrides?: CallOverrides): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    baseRateMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    comptroller(overrides?: CallOverrides): Promise<string>;

    floatRateMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getBlocksPerYear(overrides?: CallOverrides): Promise<BigNumber>;

    getMintableVAI(minter: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    getVAIAddress(overrides?: CallOverrides): Promise<string>;

    getVAICalculateRepayAmount(
      borrower: string,
      repayAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getVAIMinterInterestIndex(minter: string, overrides?: CallOverrides): Promise<BigNumber>;

    getVAIRepayAmount(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getVAIRepayRate(overrides?: CallOverrides): Promise<BigNumber>;

    getVAIRepayRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(overrides?: CallOverrides): Promise<void>;

    isVenusVAIInitialized(overrides?: CallOverrides): Promise<boolean>;

    liquidateVAI(
      borrower: string,
      repayAmount: BigNumberish,
      vTokenCollateral: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    mintCap(overrides?: CallOverrides): Promise<BigNumber>;

    mintVAI(mintVAIAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    pastVAIInterest(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    pendingAdmin(overrides?: CallOverrides): Promise<string>;

    pendingVAIControllerImplementation(overrides?: CallOverrides): Promise<string>;

    receiver(overrides?: CallOverrides): Promise<string>;

    repayVAI(
      repayVAIAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    setAccessControl(newAccessControlAddress: string, overrides?: CallOverrides): Promise<void>;

    setBaseRate(newBaseRateMantissa: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setFloatRate(newFloatRateMantissa: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setMintCap(_mintCap: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setReceiver(newReceiver: string, overrides?: CallOverrides): Promise<void>;

    treasuryAddress(overrides?: CallOverrides): Promise<string>;

    treasuryGuardian(overrides?: CallOverrides): Promise<string>;

    treasuryPercent(overrides?: CallOverrides): Promise<BigNumber>;

    vaiControllerImplementation(overrides?: CallOverrides): Promise<string>;

    vaiMintIndex(overrides?: CallOverrides): Promise<BigNumber>;

    venusVAIMinterIndex(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    venusVAIState(
      overrides?: CallOverrides,
    ): Promise<[BigNumber, number] & { index: BigNumber; block: number }>;
  };

  filters: {
    'Failure(uint256,uint256,uint256)'(
      error?: null,
      info?: null,
      detail?: null,
    ): FailureEventFilter;
    Failure(error?: null, info?: null, detail?: null): FailureEventFilter;

    'LiquidateVAI(address,address,uint256,address,uint256)'(
      liquidator?: null,
      borrower?: null,
      repayAmount?: null,
      vTokenCollateral?: null,
      seizeTokens?: null,
    ): LiquidateVAIEventFilter;
    LiquidateVAI(
      liquidator?: null,
      borrower?: null,
      repayAmount?: null,
      vTokenCollateral?: null,
      seizeTokens?: null,
    ): LiquidateVAIEventFilter;

    'MintFee(address,uint256)'(minter?: null, feeAmount?: null): MintFeeEventFilter;
    MintFee(minter?: null, feeAmount?: null): MintFeeEventFilter;

    'MintVAI(address,uint256)'(minter?: null, mintVAIAmount?: null): MintVAIEventFilter;
    MintVAI(minter?: null, mintVAIAmount?: null): MintVAIEventFilter;

    'NewAccessControl(address,address)'(
      oldAccessControlAddress?: null,
      newAccessControlAddress?: null,
    ): NewAccessControlEventFilter;
    NewAccessControl(
      oldAccessControlAddress?: null,
      newAccessControlAddress?: null,
    ): NewAccessControlEventFilter;

    'NewComptroller(address,address)'(
      oldComptroller?: null,
      newComptroller?: null,
    ): NewComptrollerEventFilter;
    NewComptroller(oldComptroller?: null, newComptroller?: null): NewComptrollerEventFilter;

    'NewTreasuryAddress(address,address)'(
      oldTreasuryAddress?: null,
      newTreasuryAddress?: null,
    ): NewTreasuryAddressEventFilter;
    NewTreasuryAddress(
      oldTreasuryAddress?: null,
      newTreasuryAddress?: null,
    ): NewTreasuryAddressEventFilter;

    'NewTreasuryGuardian(address,address)'(
      oldTreasuryGuardian?: null,
      newTreasuryGuardian?: null,
    ): NewTreasuryGuardianEventFilter;
    NewTreasuryGuardian(
      oldTreasuryGuardian?: null,
      newTreasuryGuardian?: null,
    ): NewTreasuryGuardianEventFilter;

    'NewTreasuryPercent(uint256,uint256)'(
      oldTreasuryPercent?: null,
      newTreasuryPercent?: null,
    ): NewTreasuryPercentEventFilter;
    NewTreasuryPercent(
      oldTreasuryPercent?: null,
      newTreasuryPercent?: null,
    ): NewTreasuryPercentEventFilter;

    'NewVAIBaseRate(uint256,uint256)'(
      oldBaseRateMantissa?: null,
      newBaseRateMantissa?: null,
    ): NewVAIBaseRateEventFilter;
    NewVAIBaseRate(
      oldBaseRateMantissa?: null,
      newBaseRateMantissa?: null,
    ): NewVAIBaseRateEventFilter;

    'NewVAIFloatRate(uint256,uint256)'(
      oldFloatRateMantissa?: null,
      newFlatRateMantissa?: null,
    ): NewVAIFloatRateEventFilter;
    NewVAIFloatRate(
      oldFloatRateMantissa?: null,
      newFlatRateMantissa?: null,
    ): NewVAIFloatRateEventFilter;

    'NewVAIMintCap(uint256,uint256)'(
      oldMintCap?: null,
      newMintCap?: null,
    ): NewVAIMintCapEventFilter;
    NewVAIMintCap(oldMintCap?: null, newMintCap?: null): NewVAIMintCapEventFilter;

    'NewVAIReceiver(address,address)'(
      oldReceiver?: null,
      newReceiver?: null,
    ): NewVAIReceiverEventFilter;
    NewVAIReceiver(oldReceiver?: null, newReceiver?: null): NewVAIReceiverEventFilter;

    'RepayVAI(address,address,uint256)'(
      payer?: null,
      borrower?: null,
      repayVAIAmount?: null,
    ): RepayVAIEventFilter;
    RepayVAI(payer?: null, borrower?: null, repayVAIAmount?: null): RepayVAIEventFilter;
  };

  estimateGas: {
    INITIAL_VAI_MINT_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    _become(unitroller: string, overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    _setComptroller(
      comptroller_: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    _setTreasuryData(
      newTreasuryGuardian: string,
      newTreasuryAddress: string,
      newTreasuryPercent: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    accessControl(overrides?: CallOverrides): Promise<BigNumber>;

    accrueVAIInterest(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    baseRateMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    comptroller(overrides?: CallOverrides): Promise<BigNumber>;

    floatRateMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getBlocksPerYear(overrides?: CallOverrides): Promise<BigNumber>;

    getMintableVAI(minter: string, overrides?: CallOverrides): Promise<BigNumber>;

    getVAIAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getVAICalculateRepayAmount(
      borrower: string,
      repayAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getVAIMinterInterestIndex(minter: string, overrides?: CallOverrides): Promise<BigNumber>;

    getVAIRepayAmount(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getVAIRepayRate(overrides?: CallOverrides): Promise<BigNumber>;

    getVAIRepayRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    isVenusVAIInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    liquidateVAI(
      borrower: string,
      repayAmount: BigNumberish,
      vTokenCollateral: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    mintCap(overrides?: CallOverrides): Promise<BigNumber>;

    mintVAI(
      mintVAIAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    pastVAIInterest(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    pendingAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    pendingVAIControllerImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    receiver(overrides?: CallOverrides): Promise<BigNumber>;

    repayVAI(
      repayVAIAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setAccessControl(
      newAccessControlAddress: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setBaseRate(
      newBaseRateMantissa: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setFloatRate(
      newFloatRateMantissa: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setMintCap(
      _mintCap: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setReceiver(newReceiver: string, overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    treasuryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    treasuryGuardian(overrides?: CallOverrides): Promise<BigNumber>;

    treasuryPercent(overrides?: CallOverrides): Promise<BigNumber>;

    vaiControllerImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    vaiMintIndex(overrides?: CallOverrides): Promise<BigNumber>;

    venusVAIMinterIndex(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    venusVAIState(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    INITIAL_VAI_MINT_INDEX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _become(
      unitroller: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    _setComptroller(
      comptroller_: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    _setTreasuryData(
      newTreasuryGuardian: string,
      newTreasuryAddress: string,
      newTreasuryPercent: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    accessControl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accrueVAIInterest(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseRateMantissa(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    comptroller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    floatRateMantissa(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBlocksPerYear(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMintableVAI(minter: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVAIAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVAICalculateRepayAmount(
      borrower: string,
      repayAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getVAIMinterInterestIndex(
      minter: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getVAIRepayAmount(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVAIRepayRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVAIRepayRatePerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    isVenusVAIInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidateVAI(
      borrower: string,
      repayAmount: BigNumberish,
      vTokenCollateral: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    mintCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintVAI(
      mintVAIAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    pastVAIInterest(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingVAIControllerImplementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    repayVAI(
      repayVAIAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setAccessControl(
      newAccessControlAddress: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setBaseRate(
      newBaseRateMantissa: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setFloatRate(
      newFloatRateMantissa: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setMintCap(
      _mintCap: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setReceiver(
      newReceiver: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    treasuryAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasuryGuardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasuryPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaiControllerImplementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaiMintIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    venusVAIMinterIndex(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    venusVAIState(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
