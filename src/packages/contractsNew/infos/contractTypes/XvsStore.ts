/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { EventFragment, FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type { OnEvent, TypedEvent, TypedEventFilter, TypedListener } from './common';

export interface XvsStoreInterface extends utils.Interface {
  functions: {
    'acceptAdmin()': FunctionFragment;
    'admin()': FunctionFragment;
    'emergencyRewardWithdraw(address,uint256)': FunctionFragment;
    'owner()': FunctionFragment;
    'pendingAdmin()': FunctionFragment;
    'rewardTokens(address)': FunctionFragment;
    'safeRewardTransfer(address,address,uint256)': FunctionFragment;
    'setNewOwner(address)': FunctionFragment;
    'setPendingAdmin(address)': FunctionFragment;
    'setRewardToken(address,bool)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'acceptAdmin'
      | 'admin'
      | 'emergencyRewardWithdraw'
      | 'owner'
      | 'pendingAdmin'
      | 'rewardTokens'
      | 'safeRewardTransfer'
      | 'setNewOwner'
      | 'setPendingAdmin'
      | 'setRewardToken',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'acceptAdmin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'admin', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'emergencyRewardWithdraw',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingAdmin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardTokens', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'safeRewardTransfer',
    values: [string, string, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'setNewOwner', values: [string]): string;
  encodeFunctionData(functionFragment: 'setPendingAdmin', values: [string]): string;
  encodeFunctionData(functionFragment: 'setRewardToken', values: [string, boolean]): string;

  decodeFunctionResult(functionFragment: 'acceptAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'admin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emergencyRewardWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safeRewardTransfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setNewOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPendingAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRewardToken', data: BytesLike): Result;

  events: {
    'AdminTransferred(address,address)': EventFragment;
    'NewPendingAdmin(address,address)': EventFragment;
    'OwnerTransferred(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AdminTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewPendingAdmin'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnerTransferred'): EventFragment;
}

export interface AdminTransferredEventObject {
  oldAdmin: string;
  newAdmin: string;
}
export type AdminTransferredEvent = TypedEvent<[string, string], AdminTransferredEventObject>;

export type AdminTransferredEventFilter = TypedEventFilter<AdminTransferredEvent>;

export interface NewPendingAdminEventObject {
  oldPendingAdmin: string;
  newPendingAdmin: string;
}
export type NewPendingAdminEvent = TypedEvent<[string, string], NewPendingAdminEventObject>;

export type NewPendingAdminEventFilter = TypedEventFilter<NewPendingAdminEvent>;

export interface OwnerTransferredEventObject {
  oldOwner: string;
  newOwner: string;
}
export type OwnerTransferredEvent = TypedEvent<[string, string], OwnerTransferredEventObject>;

export type OwnerTransferredEventFilter = TypedEventFilter<OwnerTransferredEvent>;

export interface XvsStore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: XvsStoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptAdmin(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    emergencyRewardWithdraw(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingAdmin(overrides?: CallOverrides): Promise<[string]>;

    rewardTokens(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    safeRewardTransfer(
      token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setPendingAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setRewardToken(
      _tokenAddress: string,
      status: boolean,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;
  };

  acceptAdmin(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  emergencyRewardWithdraw(
    _tokenAddress: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingAdmin(overrides?: CallOverrides): Promise<string>;

  rewardTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  safeRewardTransfer(
    token: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setNewOwner(
    _owner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setPendingAdmin(
    _admin: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setRewardToken(
    _tokenAddress: string,
    status: boolean,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptAdmin(overrides?: CallOverrides): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    emergencyRewardWithdraw(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingAdmin(overrides?: CallOverrides): Promise<string>;

    rewardTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    safeRewardTransfer(
      token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setNewOwner(_owner: string, overrides?: CallOverrides): Promise<void>;

    setPendingAdmin(_admin: string, overrides?: CallOverrides): Promise<void>;

    setRewardToken(
      _tokenAddress: string,
      status: boolean,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'AdminTransferred(address,address)'(
      oldAdmin?: string | null,
      newAdmin?: string | null,
    ): AdminTransferredEventFilter;
    AdminTransferred(
      oldAdmin?: string | null,
      newAdmin?: string | null,
    ): AdminTransferredEventFilter;

    'NewPendingAdmin(address,address)'(
      oldPendingAdmin?: null,
      newPendingAdmin?: null,
    ): NewPendingAdminEventFilter;
    NewPendingAdmin(oldPendingAdmin?: null, newPendingAdmin?: null): NewPendingAdminEventFilter;

    'OwnerTransferred(address,address)'(
      oldOwner?: string | null,
      newOwner?: string | null,
    ): OwnerTransferredEventFilter;
    OwnerTransferred(
      oldOwner?: string | null,
      newOwner?: string | null,
    ): OwnerTransferredEventFilter;
  };

  estimateGas: {
    acceptAdmin(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyRewardWithdraw(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    rewardTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    safeRewardTransfer(
      token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setNewOwner(_owner: string, overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    setPendingAdmin(_admin: string, overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    setRewardToken(
      _tokenAddress: string,
      status: boolean,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptAdmin(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyRewardWithdraw(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardTokens(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    safeRewardTransfer(
      token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setPendingAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setRewardToken(
      _tokenAddress: string,
      status: boolean,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;
  };
}
