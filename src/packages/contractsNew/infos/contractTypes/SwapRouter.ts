/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { EventFragment, FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type { OnEvent, TypedEvent, TypedEventFilter, TypedListener } from './common';

export interface SwapRouterInterface extends utils.Interface {
  functions: {
    'WBNB()': FunctionFragment;
    'acceptOwnership()': FunctionFragment;
    'comptrollerAddress()': FunctionFragment;
    'factory()': FunctionFragment;
    'getAmountIn(uint256,uint256,uint256)': FunctionFragment;
    'getAmountOut(uint256,uint256,uint256)': FunctionFragment;
    'getAmountsIn(uint256,address[])': FunctionFragment;
    'getAmountsOut(uint256,address[])': FunctionFragment;
    'owner()': FunctionFragment;
    'pendingOwner()': FunctionFragment;
    'quote(uint256,uint256,uint256)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setVBNBAddress(address)': FunctionFragment;
    'swapBNBForExactTokens(uint256,address[],address,uint256)': FunctionFragment;
    'swapBNBForExactTokensAndRepay(address,uint256,address[],uint256)': FunctionFragment;
    'swapBNBForExactTokensAndSupply(address,uint256,address[],uint256)': FunctionFragment;
    'swapBNBForFullTokenDebtAndRepay(address,address[],uint256)': FunctionFragment;
    'swapExactBNBForTokens(uint256,address[],address,uint256)': FunctionFragment;
    'swapExactBNBForTokensAndRepay(address,uint256,address[],uint256)': FunctionFragment;
    'swapExactBNBForTokensAndRepayAtSupportingFee(address,uint256,address[],uint256)': FunctionFragment;
    'swapExactBNBForTokensAndSupply(address,uint256,address[],uint256)': FunctionFragment;
    'swapExactBNBForTokensAndSupplyAtSupportingFee(address,uint256,address[],uint256)': FunctionFragment;
    'swapExactBNBForTokensAtSupportingFee(uint256,address[],address,uint256)': FunctionFragment;
    'swapExactTokensForBNB(uint256,uint256,address[],address,uint256)': FunctionFragment;
    'swapExactTokensForBNBAndRepay(uint256,uint256,address[],uint256)': FunctionFragment;
    'swapExactTokensForBNBAndRepayAtSupportingFee(uint256,uint256,address[],uint256)': FunctionFragment;
    'swapExactTokensForBNBAndSupply(uint256,uint256,address[],uint256)': FunctionFragment;
    'swapExactTokensForBNBAndSupplyAtSupportingFee(uint256,uint256,address[],uint256)': FunctionFragment;
    'swapExactTokensForBNBAtSupportingFee(uint256,uint256,address[],address,uint256)': FunctionFragment;
    'swapExactTokensForTokens(uint256,uint256,address[],address,uint256)': FunctionFragment;
    'swapExactTokensForTokensAndRepay(address,uint256,uint256,address[],uint256)': FunctionFragment;
    'swapExactTokensForTokensAndRepayAtSupportingFee(address,uint256,uint256,address[],uint256)': FunctionFragment;
    'swapExactTokensForTokensAndSupply(address,uint256,uint256,address[],uint256)': FunctionFragment;
    'swapExactTokensForTokensAndSupplyAtSupportingFee(address,uint256,uint256,address[],uint256)': FunctionFragment;
    'swapExactTokensForTokensAtSupportingFee(uint256,uint256,address[],address,uint256)': FunctionFragment;
    'swapTokensForExactBNB(uint256,uint256,address[],address,uint256)': FunctionFragment;
    'swapTokensForExactBNBAndRepay(uint256,uint256,address[],uint256)': FunctionFragment;
    'swapTokensForExactBNBAndSupply(uint256,uint256,address[],uint256)': FunctionFragment;
    'swapTokensForExactTokens(uint256,uint256,address[],address,uint256)': FunctionFragment;
    'swapTokensForExactTokensAndRepay(address,uint256,uint256,address[],uint256)': FunctionFragment;
    'swapTokensForExactTokensAndSupply(address,uint256,uint256,address[],uint256)': FunctionFragment;
    'swapTokensForFullBNBDebtAndRepay(uint256,address[],uint256)': FunctionFragment;
    'swapTokensForFullTokenDebtAndRepay(address,uint256,address[],uint256)': FunctionFragment;
    'sweepToken(address,address,uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'vBNBAddress()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'WBNB'
      | 'acceptOwnership'
      | 'comptrollerAddress'
      | 'factory'
      | 'getAmountIn'
      | 'getAmountOut'
      | 'getAmountsIn'
      | 'getAmountsOut'
      | 'owner'
      | 'pendingOwner'
      | 'quote'
      | 'renounceOwnership'
      | 'setVBNBAddress'
      | 'swapBNBForExactTokens'
      | 'swapBNBForExactTokensAndRepay'
      | 'swapBNBForExactTokensAndSupply'
      | 'swapBNBForFullTokenDebtAndRepay'
      | 'swapExactBNBForTokens'
      | 'swapExactBNBForTokensAndRepay'
      | 'swapExactBNBForTokensAndRepayAtSupportingFee'
      | 'swapExactBNBForTokensAndSupply'
      | 'swapExactBNBForTokensAndSupplyAtSupportingFee'
      | 'swapExactBNBForTokensAtSupportingFee'
      | 'swapExactTokensForBNB'
      | 'swapExactTokensForBNBAndRepay'
      | 'swapExactTokensForBNBAndRepayAtSupportingFee'
      | 'swapExactTokensForBNBAndSupply'
      | 'swapExactTokensForBNBAndSupplyAtSupportingFee'
      | 'swapExactTokensForBNBAtSupportingFee'
      | 'swapExactTokensForTokens'
      | 'swapExactTokensForTokensAndRepay'
      | 'swapExactTokensForTokensAndRepayAtSupportingFee'
      | 'swapExactTokensForTokensAndSupply'
      | 'swapExactTokensForTokensAndSupplyAtSupportingFee'
      | 'swapExactTokensForTokensAtSupportingFee'
      | 'swapTokensForExactBNB'
      | 'swapTokensForExactBNBAndRepay'
      | 'swapTokensForExactBNBAndSupply'
      | 'swapTokensForExactTokens'
      | 'swapTokensForExactTokensAndRepay'
      | 'swapTokensForExactTokensAndSupply'
      | 'swapTokensForFullBNBDebtAndRepay'
      | 'swapTokensForFullTokenDebtAndRepay'
      | 'sweepToken'
      | 'transferOwnership'
      | 'vBNBAddress',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'WBNB', values?: undefined): string;
  encodeFunctionData(functionFragment: 'acceptOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'comptrollerAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'factory', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getAmountIn',
    values: [BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getAmountOut',
    values: [BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'getAmountsIn', values: [BigNumberish, string[]]): string;
  encodeFunctionData(functionFragment: 'getAmountsOut', values: [BigNumberish, string[]]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingOwner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'quote',
    values: [BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setVBNBAddress', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'swapBNBForExactTokens',
    values: [BigNumberish, string[], string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'swapBNBForExactTokensAndRepay',
    values: [string, BigNumberish, string[], BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'swapBNBForExactTokensAndSupply',
    values: [string, BigNumberish, string[], BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'swapBNBForFullTokenDebtAndRepay',
    values: [string, string[], BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'swapExactBNBForTokens',
    values: [BigNumberish, string[], string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'swapExactBNBForTokensAndRepay',
    values: [string, BigNumberish, string[], BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'swapExactBNBForTokensAndRepayAtSupportingFee',
    values: [string, BigNumberish, string[], BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'swapExactBNBForTokensAndSupply',
    values: [string, BigNumberish, string[], BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'swapExactBNBForTokensAndSupplyAtSupportingFee',
    values: [string, BigNumberish, string[], BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'swapExactBNBForTokensAtSupportingFee',
    values: [BigNumberish, string[], string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'swapExactTokensForBNB',
    values: [BigNumberish, BigNumberish, string[], string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'swapExactTokensForBNBAndRepay',
    values: [BigNumberish, BigNumberish, string[], BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'swapExactTokensForBNBAndRepayAtSupportingFee',
    values: [BigNumberish, BigNumberish, string[], BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'swapExactTokensForBNBAndSupply',
    values: [BigNumberish, BigNumberish, string[], BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'swapExactTokensForBNBAndSupplyAtSupportingFee',
    values: [BigNumberish, BigNumberish, string[], BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'swapExactTokensForBNBAtSupportingFee',
    values: [BigNumberish, BigNumberish, string[], string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'swapExactTokensForTokens',
    values: [BigNumberish, BigNumberish, string[], string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'swapExactTokensForTokensAndRepay',
    values: [string, BigNumberish, BigNumberish, string[], BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'swapExactTokensForTokensAndRepayAtSupportingFee',
    values: [string, BigNumberish, BigNumberish, string[], BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'swapExactTokensForTokensAndSupply',
    values: [string, BigNumberish, BigNumberish, string[], BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'swapExactTokensForTokensAndSupplyAtSupportingFee',
    values: [string, BigNumberish, BigNumberish, string[], BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'swapExactTokensForTokensAtSupportingFee',
    values: [BigNumberish, BigNumberish, string[], string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'swapTokensForExactBNB',
    values: [BigNumberish, BigNumberish, string[], string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'swapTokensForExactBNBAndRepay',
    values: [BigNumberish, BigNumberish, string[], BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'swapTokensForExactBNBAndSupply',
    values: [BigNumberish, BigNumberish, string[], BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'swapTokensForExactTokens',
    values: [BigNumberish, BigNumberish, string[], string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'swapTokensForExactTokensAndRepay',
    values: [string, BigNumberish, BigNumberish, string[], BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'swapTokensForExactTokensAndSupply',
    values: [string, BigNumberish, BigNumberish, string[], BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'swapTokensForFullBNBDebtAndRepay',
    values: [BigNumberish, string[], BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'swapTokensForFullTokenDebtAndRepay',
    values: [string, BigNumberish, string[], BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'sweepToken',
    values: [string, string, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
  encodeFunctionData(functionFragment: 'vBNBAddress', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'WBNB', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'acceptOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'comptrollerAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'factory', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAmountIn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAmountOut', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAmountsIn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAmountsOut', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'quote', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setVBNBAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swapBNBForExactTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swapBNBForExactTokensAndRepay', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swapBNBForExactTokensAndSupply', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'swapBNBForFullTokenDebtAndRepay',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'swapExactBNBForTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swapExactBNBForTokensAndRepay', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'swapExactBNBForTokensAndRepayAtSupportingFee',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'swapExactBNBForTokensAndSupply', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'swapExactBNBForTokensAndSupplyAtSupportingFee',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'swapExactBNBForTokensAtSupportingFee',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'swapExactTokensForBNB', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swapExactTokensForBNBAndRepay', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'swapExactTokensForBNBAndRepayAtSupportingFee',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'swapExactTokensForBNBAndSupply', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'swapExactTokensForBNBAndSupplyAtSupportingFee',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'swapExactTokensForBNBAtSupportingFee',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'swapExactTokensForTokens', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'swapExactTokensForTokensAndRepay',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'swapExactTokensForTokensAndRepayAtSupportingFee',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'swapExactTokensForTokensAndSupply',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'swapExactTokensForTokensAndSupplyAtSupportingFee',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'swapExactTokensForTokensAtSupportingFee',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'swapTokensForExactBNB', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swapTokensForExactBNBAndRepay', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swapTokensForExactBNBAndSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swapTokensForExactTokens', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'swapTokensForExactTokensAndRepay',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'swapTokensForExactTokensAndSupply',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'swapTokensForFullBNBDebtAndRepay',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'swapTokensForFullTokenDebtAndRepay',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'sweepToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vBNBAddress', data: BytesLike): Result;

  events: {
    'OwnershipTransferStarted(address,address)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'SwapBnbForTokens(address,address[],uint256[])': EventFragment;
    'SwapBnbForTokensAtSupportingFee(address,address[])': EventFragment;
    'SwapTokensForBnb(address,address[],uint256[])': EventFragment;
    'SwapTokensForBnbAtSupportingFee(address,address[])': EventFragment;
    'SwapTokensForTokens(address,address[],uint256[])': EventFragment;
    'SwapTokensForTokensAtSupportingFee(address,address[])': EventFragment;
    'SweepToken(address,address,uint256)': EventFragment;
    'VBNBAddressUpdated(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferStarted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SwapBnbForTokens'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SwapBnbForTokensAtSupportingFee'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SwapTokensForBnb'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SwapTokensForBnbAtSupportingFee'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SwapTokensForTokens'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SwapTokensForTokensAtSupportingFee'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SweepToken'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VBNBAddressUpdated'): EventFragment;
}

export interface OwnershipTransferStartedEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferStartedEvent = TypedEvent<
  [string, string],
  OwnershipTransferStartedEventObject
>;

export type OwnershipTransferStartedEventFilter = TypedEventFilter<OwnershipTransferStartedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface SwapBnbForTokensEventObject {
  swapper: string;
  path: string[];
  amounts: BigNumber[];
}
export type SwapBnbForTokensEvent = TypedEvent<
  [string, string[], BigNumber[]],
  SwapBnbForTokensEventObject
>;

export type SwapBnbForTokensEventFilter = TypedEventFilter<SwapBnbForTokensEvent>;

export interface SwapBnbForTokensAtSupportingFeeEventObject {
  swapper: string;
  path: string[];
}
export type SwapBnbForTokensAtSupportingFeeEvent = TypedEvent<
  [string, string[]],
  SwapBnbForTokensAtSupportingFeeEventObject
>;

export type SwapBnbForTokensAtSupportingFeeEventFilter =
  TypedEventFilter<SwapBnbForTokensAtSupportingFeeEvent>;

export interface SwapTokensForBnbEventObject {
  swapper: string;
  path: string[];
  amounts: BigNumber[];
}
export type SwapTokensForBnbEvent = TypedEvent<
  [string, string[], BigNumber[]],
  SwapTokensForBnbEventObject
>;

export type SwapTokensForBnbEventFilter = TypedEventFilter<SwapTokensForBnbEvent>;

export interface SwapTokensForBnbAtSupportingFeeEventObject {
  swapper: string;
  path: string[];
}
export type SwapTokensForBnbAtSupportingFeeEvent = TypedEvent<
  [string, string[]],
  SwapTokensForBnbAtSupportingFeeEventObject
>;

export type SwapTokensForBnbAtSupportingFeeEventFilter =
  TypedEventFilter<SwapTokensForBnbAtSupportingFeeEvent>;

export interface SwapTokensForTokensEventObject {
  swapper: string;
  path: string[];
  amounts: BigNumber[];
}
export type SwapTokensForTokensEvent = TypedEvent<
  [string, string[], BigNumber[]],
  SwapTokensForTokensEventObject
>;

export type SwapTokensForTokensEventFilter = TypedEventFilter<SwapTokensForTokensEvent>;

export interface SwapTokensForTokensAtSupportingFeeEventObject {
  swapper: string;
  path: string[];
}
export type SwapTokensForTokensAtSupportingFeeEvent = TypedEvent<
  [string, string[]],
  SwapTokensForTokensAtSupportingFeeEventObject
>;

export type SwapTokensForTokensAtSupportingFeeEventFilter =
  TypedEventFilter<SwapTokensForTokensAtSupportingFeeEvent>;

export interface SweepTokenEventObject {
  token: string;
  to: string;
  sweepAmount: BigNumber;
}
export type SweepTokenEvent = TypedEvent<[string, string, BigNumber], SweepTokenEventObject>;

export type SweepTokenEventFilter = TypedEventFilter<SweepTokenEvent>;

export interface VBNBAddressUpdatedEventObject {
  oldAddress: string;
  newAddress: string;
}
export type VBNBAddressUpdatedEvent = TypedEvent<[string, string], VBNBAddressUpdatedEventObject>;

export type VBNBAddressUpdatedEventFilter = TypedEventFilter<VBNBAddressUpdatedEvent>;

export interface SwapRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SwapRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    WBNB(overrides?: CallOverrides): Promise<[string]>;

    acceptOwnership(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    comptrollerAddress(overrides?: CallOverrides): Promise<[string]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { amountIn: BigNumber }>;

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { amountOut: BigNumber }>;

    getAmountsIn(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides,
    ): Promise<[BigNumber[]] & { amounts: BigNumber[] }>;

    getAmountsOut(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides,
    ): Promise<[BigNumber[]] & { amounts: BigNumber[] }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    quote(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { amountB: BigNumber }>;

    renounceOwnership(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    setVBNBAddress(
      _vBNBAddress: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    swapBNBForExactTokens(
      amountOut: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    swapBNBForExactTokensAndRepay(
      vTokenAddress: string,
      amountOut: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    swapBNBForExactTokensAndSupply(
      vTokenAddress: string,
      amountOut: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    swapBNBForFullTokenDebtAndRepay(
      vTokenAddress: string,
      path: string[],
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    swapExactBNBForTokens(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    swapExactBNBForTokensAndRepay(
      vTokenAddress: string,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    swapExactBNBForTokensAndRepayAtSupportingFee(
      vTokenAddress: string,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    swapExactBNBForTokensAndSupply(
      vTokenAddress: string,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    swapExactBNBForTokensAndSupplyAtSupportingFee(
      vTokenAddress: string,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    swapExactBNBForTokensAtSupportingFee(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    swapExactTokensForBNB(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    swapExactTokensForBNBAndRepay(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    swapExactTokensForBNBAndRepayAtSupportingFee(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    swapExactTokensForBNBAndSupply(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    swapExactTokensForBNBAndSupplyAtSupportingFee(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    swapExactTokensForBNBAtSupportingFee(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    swapExactTokensForTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    swapExactTokensForTokensAndRepay(
      vTokenAddress: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    swapExactTokensForTokensAndRepayAtSupportingFee(
      vTokenAddress: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    swapExactTokensForTokensAndSupply(
      vTokenAddress: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    swapExactTokensForTokensAndSupplyAtSupportingFee(
      vTokenAddress: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    swapExactTokensForTokensAtSupportingFee(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    swapTokensForExactBNB(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    swapTokensForExactBNBAndRepay(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    swapTokensForExactBNBAndSupply(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    swapTokensForExactTokens(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    swapTokensForExactTokensAndRepay(
      vTokenAddress: string,
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    swapTokensForExactTokensAndSupply(
      vTokenAddress: string,
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    swapTokensForFullBNBDebtAndRepay(
      amountInMax: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    swapTokensForFullTokenDebtAndRepay(
      vTokenAddress: string,
      amountInMax: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    sweepToken(
      token: string,
      to: string,
      sweepAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    vBNBAddress(overrides?: CallOverrides): Promise<[string]>;
  };

  WBNB(overrides?: CallOverrides): Promise<string>;

  acceptOwnership(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  comptrollerAddress(overrides?: CallOverrides): Promise<string>;

  factory(overrides?: CallOverrides): Promise<string>;

  getAmountIn(
    amountOut: BigNumberish,
    reserveIn: BigNumberish,
    reserveOut: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getAmountOut(
    amountIn: BigNumberish,
    reserveIn: BigNumberish,
    reserveOut: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getAmountsIn(
    amountOut: BigNumberish,
    path: string[],
    overrides?: CallOverrides,
  ): Promise<BigNumber[]>;

  getAmountsOut(
    amountIn: BigNumberish,
    path: string[],
    overrides?: CallOverrides,
  ): Promise<BigNumber[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  quote(
    amountA: BigNumberish,
    reserveA: BigNumberish,
    reserveB: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  setVBNBAddress(
    _vBNBAddress: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  swapBNBForExactTokens(
    amountOut: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  swapBNBForExactTokensAndRepay(
    vTokenAddress: string,
    amountOut: BigNumberish,
    path: string[],
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  swapBNBForExactTokensAndSupply(
    vTokenAddress: string,
    amountOut: BigNumberish,
    path: string[],
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  swapBNBForFullTokenDebtAndRepay(
    vTokenAddress: string,
    path: string[],
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  swapExactBNBForTokens(
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  swapExactBNBForTokensAndRepay(
    vTokenAddress: string,
    amountOutMin: BigNumberish,
    path: string[],
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  swapExactBNBForTokensAndRepayAtSupportingFee(
    vTokenAddress: string,
    amountOutMin: BigNumberish,
    path: string[],
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  swapExactBNBForTokensAndSupply(
    vTokenAddress: string,
    amountOutMin: BigNumberish,
    path: string[],
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  swapExactBNBForTokensAndSupplyAtSupportingFee(
    vTokenAddress: string,
    amountOutMin: BigNumberish,
    path: string[],
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  swapExactBNBForTokensAtSupportingFee(
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  swapExactTokensForBNB(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  swapExactTokensForBNBAndRepay(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  swapExactTokensForBNBAndRepayAtSupportingFee(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  swapExactTokensForBNBAndSupply(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  swapExactTokensForBNBAndSupplyAtSupportingFee(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  swapExactTokensForBNBAtSupportingFee(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  swapExactTokensForTokens(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  swapExactTokensForTokensAndRepay(
    vTokenAddress: string,
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  swapExactTokensForTokensAndRepayAtSupportingFee(
    vTokenAddress: string,
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  swapExactTokensForTokensAndSupply(
    vTokenAddress: string,
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  swapExactTokensForTokensAndSupplyAtSupportingFee(
    vTokenAddress: string,
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  swapExactTokensForTokensAtSupportingFee(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  swapTokensForExactBNB(
    amountOut: BigNumberish,
    amountInMax: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  swapTokensForExactBNBAndRepay(
    amountOut: BigNumberish,
    amountInMax: BigNumberish,
    path: string[],
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  swapTokensForExactBNBAndSupply(
    amountOut: BigNumberish,
    amountInMax: BigNumberish,
    path: string[],
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  swapTokensForExactTokens(
    amountOut: BigNumberish,
    amountInMax: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  swapTokensForExactTokensAndRepay(
    vTokenAddress: string,
    amountOut: BigNumberish,
    amountInMax: BigNumberish,
    path: string[],
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  swapTokensForExactTokensAndSupply(
    vTokenAddress: string,
    amountOut: BigNumberish,
    amountInMax: BigNumberish,
    path: string[],
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  swapTokensForFullBNBDebtAndRepay(
    amountInMax: BigNumberish,
    path: string[],
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  swapTokensForFullTokenDebtAndRepay(
    vTokenAddress: string,
    amountInMax: BigNumberish,
    path: string[],
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  sweepToken(
    token: string,
    to: string,
    sweepAmount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  vBNBAddress(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    WBNB(overrides?: CallOverrides): Promise<string>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    comptrollerAddress(overrides?: CallOverrides): Promise<string>;

    factory(overrides?: CallOverrides): Promise<string>;

    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getAmountsIn(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;

    getAmountsOut(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    quote(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setVBNBAddress(_vBNBAddress: string, overrides?: CallOverrides): Promise<void>;

    swapBNBForExactTokens(
      amountOut: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;

    swapBNBForExactTokensAndRepay(
      vTokenAddress: string,
      amountOut: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    swapBNBForExactTokensAndSupply(
      vTokenAddress: string,
      amountOut: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    swapBNBForFullTokenDebtAndRepay(
      vTokenAddress: string,
      path: string[],
      deadline: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    swapExactBNBForTokens(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;

    swapExactBNBForTokensAndRepay(
      vTokenAddress: string,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    swapExactBNBForTokensAndRepayAtSupportingFee(
      vTokenAddress: string,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    swapExactBNBForTokensAndSupply(
      vTokenAddress: string,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    swapExactBNBForTokensAndSupplyAtSupportingFee(
      vTokenAddress: string,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    swapExactBNBForTokensAtSupportingFee(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    swapExactTokensForBNB(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;

    swapExactTokensForBNBAndRepay(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    swapExactTokensForBNBAndRepayAtSupportingFee(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    swapExactTokensForBNBAndSupply(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    swapExactTokensForBNBAndSupplyAtSupportingFee(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    swapExactTokensForBNBAtSupportingFee(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    swapExactTokensForTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;

    swapExactTokensForTokensAndRepay(
      vTokenAddress: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    swapExactTokensForTokensAndRepayAtSupportingFee(
      vTokenAddress: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    swapExactTokensForTokensAndSupply(
      vTokenAddress: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    swapExactTokensForTokensAndSupplyAtSupportingFee(
      vTokenAddress: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    swapExactTokensForTokensAtSupportingFee(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    swapTokensForExactBNB(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;

    swapTokensForExactBNBAndRepay(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    swapTokensForExactBNBAndSupply(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    swapTokensForExactTokens(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;

    swapTokensForExactTokensAndRepay(
      vTokenAddress: string,
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    swapTokensForExactTokensAndSupply(
      vTokenAddress: string,
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    swapTokensForFullBNBDebtAndRepay(
      amountInMax: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    swapTokensForFullTokenDebtAndRepay(
      vTokenAddress: string,
      amountInMax: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    sweepToken(
      token: string,
      to: string,
      sweepAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    vBNBAddress(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'OwnershipTransferStarted(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferStartedEventFilter;
    OwnershipTransferStarted(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferStartedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;

    'SwapBnbForTokens(address,address[],uint256[])'(
      swapper?: string | null,
      path?: string[] | null,
      amounts?: BigNumberish[] | null,
    ): SwapBnbForTokensEventFilter;
    SwapBnbForTokens(
      swapper?: string | null,
      path?: string[] | null,
      amounts?: BigNumberish[] | null,
    ): SwapBnbForTokensEventFilter;

    'SwapBnbForTokensAtSupportingFee(address,address[])'(
      swapper?: string | null,
      path?: string[] | null,
    ): SwapBnbForTokensAtSupportingFeeEventFilter;
    SwapBnbForTokensAtSupportingFee(
      swapper?: string | null,
      path?: string[] | null,
    ): SwapBnbForTokensAtSupportingFeeEventFilter;

    'SwapTokensForBnb(address,address[],uint256[])'(
      swapper?: string | null,
      path?: string[] | null,
      amounts?: BigNumberish[] | null,
    ): SwapTokensForBnbEventFilter;
    SwapTokensForBnb(
      swapper?: string | null,
      path?: string[] | null,
      amounts?: BigNumberish[] | null,
    ): SwapTokensForBnbEventFilter;

    'SwapTokensForBnbAtSupportingFee(address,address[])'(
      swapper?: string | null,
      path?: string[] | null,
    ): SwapTokensForBnbAtSupportingFeeEventFilter;
    SwapTokensForBnbAtSupportingFee(
      swapper?: string | null,
      path?: string[] | null,
    ): SwapTokensForBnbAtSupportingFeeEventFilter;

    'SwapTokensForTokens(address,address[],uint256[])'(
      swapper?: string | null,
      path?: string[] | null,
      amounts?: BigNumberish[] | null,
    ): SwapTokensForTokensEventFilter;
    SwapTokensForTokens(
      swapper?: string | null,
      path?: string[] | null,
      amounts?: BigNumberish[] | null,
    ): SwapTokensForTokensEventFilter;

    'SwapTokensForTokensAtSupportingFee(address,address[])'(
      swapper?: string | null,
      path?: string[] | null,
    ): SwapTokensForTokensAtSupportingFeeEventFilter;
    SwapTokensForTokensAtSupportingFee(
      swapper?: string | null,
      path?: string[] | null,
    ): SwapTokensForTokensAtSupportingFeeEventFilter;

    'SweepToken(address,address,uint256)'(
      token?: string | null,
      to?: string | null,
      sweepAmount?: null,
    ): SweepTokenEventFilter;
    SweepToken(
      token?: string | null,
      to?: string | null,
      sweepAmount?: null,
    ): SweepTokenEventFilter;

    'VBNBAddressUpdated(address,address)'(
      oldAddress?: string | null,
      newAddress?: string | null,
    ): VBNBAddressUpdatedEventFilter;
    VBNBAddressUpdated(
      oldAddress?: string | null,
      newAddress?: string | null,
    ): VBNBAddressUpdatedEventFilter;
  };

  estimateGas: {
    WBNB(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    comptrollerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getAmountsIn(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getAmountsOut(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    quote(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    setVBNBAddress(
      _vBNBAddress: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    swapBNBForExactTokens(
      amountOut: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    swapBNBForExactTokensAndRepay(
      vTokenAddress: string,
      amountOut: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    swapBNBForExactTokensAndSupply(
      vTokenAddress: string,
      amountOut: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    swapBNBForFullTokenDebtAndRepay(
      vTokenAddress: string,
      path: string[],
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    swapExactBNBForTokens(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    swapExactBNBForTokensAndRepay(
      vTokenAddress: string,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    swapExactBNBForTokensAndRepayAtSupportingFee(
      vTokenAddress: string,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    swapExactBNBForTokensAndSupply(
      vTokenAddress: string,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    swapExactBNBForTokensAndSupplyAtSupportingFee(
      vTokenAddress: string,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    swapExactBNBForTokensAtSupportingFee(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    swapExactTokensForBNB(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    swapExactTokensForBNBAndRepay(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    swapExactTokensForBNBAndRepayAtSupportingFee(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    swapExactTokensForBNBAndSupply(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    swapExactTokensForBNBAndSupplyAtSupportingFee(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    swapExactTokensForBNBAtSupportingFee(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    swapExactTokensForTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    swapExactTokensForTokensAndRepay(
      vTokenAddress: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    swapExactTokensForTokensAndRepayAtSupportingFee(
      vTokenAddress: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    swapExactTokensForTokensAndSupply(
      vTokenAddress: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    swapExactTokensForTokensAndSupplyAtSupportingFee(
      vTokenAddress: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    swapExactTokensForTokensAtSupportingFee(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    swapTokensForExactBNB(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    swapTokensForExactBNBAndRepay(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    swapTokensForExactBNBAndSupply(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    swapTokensForExactTokens(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    swapTokensForExactTokensAndRepay(
      vTokenAddress: string,
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    swapTokensForExactTokensAndSupply(
      vTokenAddress: string,
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    swapTokensForFullBNBDebtAndRepay(
      amountInMax: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    swapTokensForFullTokenDebtAndRepay(
      vTokenAddress: string,
      amountInMax: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    sweepToken(
      token: string,
      to: string,
      sweepAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    vBNBAddress(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    WBNB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptOwnership(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    comptrollerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getAmountsIn(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getAmountsOut(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quote(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    setVBNBAddress(
      _vBNBAddress: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    swapBNBForExactTokens(
      amountOut: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    swapBNBForExactTokensAndRepay(
      vTokenAddress: string,
      amountOut: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    swapBNBForExactTokensAndSupply(
      vTokenAddress: string,
      amountOut: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    swapBNBForFullTokenDebtAndRepay(
      vTokenAddress: string,
      path: string[],
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    swapExactBNBForTokens(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    swapExactBNBForTokensAndRepay(
      vTokenAddress: string,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    swapExactBNBForTokensAndRepayAtSupportingFee(
      vTokenAddress: string,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    swapExactBNBForTokensAndSupply(
      vTokenAddress: string,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    swapExactBNBForTokensAndSupplyAtSupportingFee(
      vTokenAddress: string,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    swapExactBNBForTokensAtSupportingFee(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    swapExactTokensForBNB(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    swapExactTokensForBNBAndRepay(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    swapExactTokensForBNBAndRepayAtSupportingFee(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    swapExactTokensForBNBAndSupply(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    swapExactTokensForBNBAndSupplyAtSupportingFee(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    swapExactTokensForBNBAtSupportingFee(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    swapExactTokensForTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    swapExactTokensForTokensAndRepay(
      vTokenAddress: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    swapExactTokensForTokensAndRepayAtSupportingFee(
      vTokenAddress: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    swapExactTokensForTokensAndSupply(
      vTokenAddress: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    swapExactTokensForTokensAndSupplyAtSupportingFee(
      vTokenAddress: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    swapExactTokensForTokensAtSupportingFee(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    swapTokensForExactBNB(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    swapTokensForExactBNBAndRepay(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    swapTokensForExactBNBAndSupply(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    swapTokensForExactTokens(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    swapTokensForExactTokensAndRepay(
      vTokenAddress: string,
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    swapTokensForExactTokensAndSupply(
      vTokenAddress: string,
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    swapTokensForFullBNBDebtAndRepay(
      amountInMax: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    swapTokensForFullTokenDebtAndRepay(
      vTokenAddress: string,
      amountInMax: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    sweepToken(
      token: string,
      to: string,
      sweepAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    vBNBAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
