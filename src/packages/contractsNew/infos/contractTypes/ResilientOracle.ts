/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { EventFragment, FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type { OnEvent, TypedEvent, TypedEventFilter, TypedListener } from './common';

export declare namespace ResilientOracle {
  export type TokenConfigStruct = {
    asset: string;
    oracles: [string, string, string];
    enableFlagsForOracles: [boolean, boolean, boolean];
  };

  export type TokenConfigStructOutput = [
    string,
    [string, string, string],
    [boolean, boolean, boolean],
  ] & {
    asset: string;
    oracles: [string, string, string];
    enableFlagsForOracles: [boolean, boolean, boolean];
  };
}

export interface ResilientOracleInterface extends utils.Interface {
  functions: {
    'BNB_ADDR()': FunctionFragment;
    'INVALID_PRICE()': FunctionFragment;
    'acceptOwnership()': FunctionFragment;
    'accessControlManager()': FunctionFragment;
    'boundValidator()': FunctionFragment;
    'enableOracle(address,uint8,bool)': FunctionFragment;
    'getOracle(address,uint8)': FunctionFragment;
    'getPrice(address)': FunctionFragment;
    'getTokenConfig(address)': FunctionFragment;
    'getUnderlyingPrice(address)': FunctionFragment;
    'initialize(address)': FunctionFragment;
    'owner()': FunctionFragment;
    'pause()': FunctionFragment;
    'paused()': FunctionFragment;
    'pendingOwner()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setAccessControlManager(address)': FunctionFragment;
    'setOracle(address,address,uint8)': FunctionFragment;
    'setTokenConfig((address,address[3],bool[3]))': FunctionFragment;
    'setTokenConfigs((address,address[3],bool[3])[])': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'unpause()': FunctionFragment;
    'updateAssetPrice(address)': FunctionFragment;
    'updatePrice(address)': FunctionFragment;
    'vBnb()': FunctionFragment;
    'vai()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'BNB_ADDR'
      | 'INVALID_PRICE'
      | 'acceptOwnership'
      | 'accessControlManager'
      | 'boundValidator'
      | 'enableOracle'
      | 'getOracle'
      | 'getPrice'
      | 'getTokenConfig'
      | 'getUnderlyingPrice'
      | 'initialize'
      | 'owner'
      | 'pause'
      | 'paused'
      | 'pendingOwner'
      | 'renounceOwnership'
      | 'setAccessControlManager'
      | 'setOracle'
      | 'setTokenConfig'
      | 'setTokenConfigs'
      | 'transferOwnership'
      | 'unpause'
      | 'updateAssetPrice'
      | 'updatePrice'
      | 'vBnb'
      | 'vai',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'BNB_ADDR', values?: undefined): string;
  encodeFunctionData(functionFragment: 'INVALID_PRICE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'acceptOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'accessControlManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'boundValidator', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'enableOracle',
    values: [string, BigNumberish, boolean],
  ): string;
  encodeFunctionData(functionFragment: 'getOracle', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getPrice', values: [string]): string;
  encodeFunctionData(functionFragment: 'getTokenConfig', values: [string]): string;
  encodeFunctionData(functionFragment: 'getUnderlyingPrice', values: [string]): string;
  encodeFunctionData(functionFragment: 'initialize', values: [string]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingOwner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setAccessControlManager', values: [string]): string;
  encodeFunctionData(functionFragment: 'setOracle', values: [string, string, BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'setTokenConfig',
    values: [ResilientOracle.TokenConfigStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'setTokenConfigs',
    values: [ResilientOracle.TokenConfigStruct[]],
  ): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'updateAssetPrice', values: [string]): string;
  encodeFunctionData(functionFragment: 'updatePrice', values: [string]): string;
  encodeFunctionData(functionFragment: 'vBnb', values?: undefined): string;
  encodeFunctionData(functionFragment: 'vai', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'BNB_ADDR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'INVALID_PRICE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'acceptOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accessControlManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'boundValidator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enableOracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getOracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTokenConfig', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUnderlyingPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAccessControlManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setOracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTokenConfig', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTokenConfigs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateAssetPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updatePrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vBnb', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vai', data: BytesLike): Result;

  events: {
    'Initialized(uint8)': EventFragment;
    'NewAccessControlManager(address,address)': EventFragment;
    'OracleEnabled(address,uint256,bool)': EventFragment;
    'OracleSet(address,address,uint256)': EventFragment;
    'OwnershipTransferStarted(address,address)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Paused(address)': EventFragment;
    'TokenConfigAdded(address,address,address,address)': EventFragment;
    'Unpaused(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewAccessControlManager'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OracleEnabled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OracleSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferStarted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokenConfigAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface NewAccessControlManagerEventObject {
  oldAccessControlManager: string;
  newAccessControlManager: string;
}
export type NewAccessControlManagerEvent = TypedEvent<
  [string, string],
  NewAccessControlManagerEventObject
>;

export type NewAccessControlManagerEventFilter = TypedEventFilter<NewAccessControlManagerEvent>;

export interface OracleEnabledEventObject {
  asset: string;
  role: BigNumber;
  enable: boolean;
}
export type OracleEnabledEvent = TypedEvent<[string, BigNumber, boolean], OracleEnabledEventObject>;

export type OracleEnabledEventFilter = TypedEventFilter<OracleEnabledEvent>;

export interface OracleSetEventObject {
  asset: string;
  oracle: string;
  role: BigNumber;
}
export type OracleSetEvent = TypedEvent<[string, string, BigNumber], OracleSetEventObject>;

export type OracleSetEventFilter = TypedEventFilter<OracleSetEvent>;

export interface OwnershipTransferStartedEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferStartedEvent = TypedEvent<
  [string, string],
  OwnershipTransferStartedEventObject
>;

export type OwnershipTransferStartedEventFilter = TypedEventFilter<OwnershipTransferStartedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface TokenConfigAddedEventObject {
  asset: string;
  mainOracle: string;
  pivotOracle: string;
  fallbackOracle: string;
}
export type TokenConfigAddedEvent = TypedEvent<
  [string, string, string, string],
  TokenConfigAddedEventObject
>;

export type TokenConfigAddedEventFilter = TypedEventFilter<TokenConfigAddedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface ResilientOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ResilientOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BNB_ADDR(overrides?: CallOverrides): Promise<[string]>;

    INVALID_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    acceptOwnership(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    accessControlManager(overrides?: CallOverrides): Promise<[string]>;

    boundValidator(overrides?: CallOverrides): Promise<[string]>;

    enableOracle(
      asset: string,
      role: BigNumberish,
      enable: boolean,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    getOracle(
      asset: string,
      role: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string, boolean] & { oracle: string; enabled: boolean }>;

    getPrice(asset: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getTokenConfig(
      asset: string,
      overrides?: CallOverrides,
    ): Promise<[ResilientOracle.TokenConfigStructOutput]>;

    getUnderlyingPrice(vToken: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      accessControlManager_: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    setAccessControlManager(
      accessControlManager_: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setOracle(
      asset: string,
      oracle: string,
      role: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setTokenConfig(
      tokenConfig: ResilientOracle.TokenConfigStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setTokenConfigs(
      tokenConfigs_: ResilientOracle.TokenConfigStruct[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    unpause(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    updateAssetPrice(
      asset: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    updatePrice(
      vToken: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    vBnb(overrides?: CallOverrides): Promise<[string]>;

    vai(overrides?: CallOverrides): Promise<[string]>;
  };

  BNB_ADDR(overrides?: CallOverrides): Promise<string>;

  INVALID_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  acceptOwnership(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  accessControlManager(overrides?: CallOverrides): Promise<string>;

  boundValidator(overrides?: CallOverrides): Promise<string>;

  enableOracle(
    asset: string,
    role: BigNumberish,
    enable: boolean,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  getOracle(
    asset: string,
    role: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<[string, boolean] & { oracle: string; enabled: boolean }>;

  getPrice(asset: string, overrides?: CallOverrides): Promise<BigNumber>;

  getTokenConfig(
    asset: string,
    overrides?: CallOverrides,
  ): Promise<ResilientOracle.TokenConfigStructOutput>;

  getUnderlyingPrice(vToken: string, overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    accessControlManager_: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  setAccessControlManager(
    accessControlManager_: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setOracle(
    asset: string,
    oracle: string,
    role: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setTokenConfig(
    tokenConfig: ResilientOracle.TokenConfigStruct,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setTokenConfigs(
    tokenConfigs_: ResilientOracle.TokenConfigStruct[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  unpause(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  updateAssetPrice(
    asset: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  updatePrice(
    vToken: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  vBnb(overrides?: CallOverrides): Promise<string>;

  vai(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    BNB_ADDR(overrides?: CallOverrides): Promise<string>;

    INVALID_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    accessControlManager(overrides?: CallOverrides): Promise<string>;

    boundValidator(overrides?: CallOverrides): Promise<string>;

    enableOracle(
      asset: string,
      role: BigNumberish,
      enable: boolean,
      overrides?: CallOverrides,
    ): Promise<void>;

    getOracle(
      asset: string,
      role: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string, boolean] & { oracle: string; enabled: boolean }>;

    getPrice(asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    getTokenConfig(
      asset: string,
      overrides?: CallOverrides,
    ): Promise<ResilientOracle.TokenConfigStructOutput>;

    getUnderlyingPrice(vToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(accessControlManager_: string, overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAccessControlManager(
      accessControlManager_: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setOracle(
      asset: string,
      oracle: string,
      role: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setTokenConfig(
      tokenConfig: ResilientOracle.TokenConfigStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    setTokenConfigs(
      tokenConfigs_: ResilientOracle.TokenConfigStruct[],
      overrides?: CallOverrides,
    ): Promise<void>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateAssetPrice(asset: string, overrides?: CallOverrides): Promise<void>;

    updatePrice(vToken: string, overrides?: CallOverrides): Promise<void>;

    vBnb(overrides?: CallOverrides): Promise<string>;

    vai(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'Initialized(uint8)'(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    'NewAccessControlManager(address,address)'(
      oldAccessControlManager?: null,
      newAccessControlManager?: null,
    ): NewAccessControlManagerEventFilter;
    NewAccessControlManager(
      oldAccessControlManager?: null,
      newAccessControlManager?: null,
    ): NewAccessControlManagerEventFilter;

    'OracleEnabled(address,uint256,bool)'(
      asset?: string | null,
      role?: BigNumberish | null,
      enable?: boolean | null,
    ): OracleEnabledEventFilter;
    OracleEnabled(
      asset?: string | null,
      role?: BigNumberish | null,
      enable?: boolean | null,
    ): OracleEnabledEventFilter;

    'OracleSet(address,address,uint256)'(
      asset?: string | null,
      oracle?: string | null,
      role?: BigNumberish | null,
    ): OracleSetEventFilter;
    OracleSet(
      asset?: string | null,
      oracle?: string | null,
      role?: BigNumberish | null,
    ): OracleSetEventFilter;

    'OwnershipTransferStarted(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferStartedEventFilter;
    OwnershipTransferStarted(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferStartedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;

    'Paused(address)'(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    'TokenConfigAdded(address,address,address,address)'(
      asset?: string | null,
      mainOracle?: string | null,
      pivotOracle?: string | null,
      fallbackOracle?: null,
    ): TokenConfigAddedEventFilter;
    TokenConfigAdded(
      asset?: string | null,
      mainOracle?: string | null,
      pivotOracle?: string | null,
      fallbackOracle?: null,
    ): TokenConfigAddedEventFilter;

    'Unpaused(address)'(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    BNB_ADDR(overrides?: CallOverrides): Promise<BigNumber>;

    INVALID_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    accessControlManager(overrides?: CallOverrides): Promise<BigNumber>;

    boundValidator(overrides?: CallOverrides): Promise<BigNumber>;

    enableOracle(
      asset: string,
      role: BigNumberish,
      enable: boolean,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    getOracle(asset: string, role: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getPrice(asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    getTokenConfig(asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    getUnderlyingPrice(vToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      accessControlManager_: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    setAccessControlManager(
      accessControlManager_: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setOracle(
      asset: string,
      oracle: string,
      role: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setTokenConfig(
      tokenConfig: ResilientOracle.TokenConfigStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setTokenConfigs(
      tokenConfigs_: ResilientOracle.TokenConfigStruct[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    updateAssetPrice(asset: string, overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    updatePrice(vToken: string, overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    vBnb(overrides?: CallOverrides): Promise<BigNumber>;

    vai(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BNB_ADDR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    INVALID_PRICE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptOwnership(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    accessControlManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    boundValidator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enableOracle(
      asset: string,
      role: BigNumberish,
      enable: boolean,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    getOracle(
      asset: string,
      role: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getPrice(asset: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenConfig(asset: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUnderlyingPrice(vToken: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      accessControlManager_: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    setAccessControlManager(
      accessControlManager_: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setOracle(
      asset: string,
      oracle: string,
      role: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setTokenConfig(
      tokenConfig: ResilientOracle.TokenConfigStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setTokenConfigs(
      tokenConfigs_: ResilientOracle.TokenConfigStruct[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    updateAssetPrice(
      asset: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    updatePrice(
      vToken: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    vBnb(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vai(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
