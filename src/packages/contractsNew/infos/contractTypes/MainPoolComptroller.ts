/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { EventFragment, FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type { OnEvent, TypedEvent, TypedEventFilter, TypedListener } from './common';

export interface MainPoolComptrollerInterface extends utils.Interface {
  functions: {
    '_become(address)': FunctionFragment;
    '_grantXVS(address,uint256)': FunctionFragment;
    '_setAccessControl(address)': FunctionFragment;
    '_setActionsPaused(address[],uint8[],bool)': FunctionFragment;
    '_setCloseFactor(uint256)': FunctionFragment;
    '_setCollateralFactor(address,uint256)': FunctionFragment;
    '_setComptrollerLens(address)': FunctionFragment;
    '_setLiquidationIncentive(uint256)': FunctionFragment;
    '_setLiquidatorContract(address)': FunctionFragment;
    '_setMarketBorrowCaps(address[],uint256[])': FunctionFragment;
    '_setMarketSupplyCaps(address[],uint256[])': FunctionFragment;
    '_setPauseGuardian(address)': FunctionFragment;
    '_setPriceOracle(address)': FunctionFragment;
    '_setProtocolPaused(bool)': FunctionFragment;
    '_setTreasuryData(address,address,uint256)': FunctionFragment;
    '_setVAIController(address)': FunctionFragment;
    '_setVAIMintRate(uint256)': FunctionFragment;
    '_setVAIVaultInfo(address,uint256,uint256)': FunctionFragment;
    '_setVenusSpeeds(address[],uint256[],uint256[])': FunctionFragment;
    '_setVenusVAIVaultRate(uint256)': FunctionFragment;
    '_supportMarket(address)': FunctionFragment;
    'accountAssets(address,uint256)': FunctionFragment;
    'actionPaused(address,uint8)': FunctionFragment;
    'admin()': FunctionFragment;
    'allMarkets(uint256)': FunctionFragment;
    'approvedDelegates(address,address)': FunctionFragment;
    'borrowAllowed(address,address,uint256)': FunctionFragment;
    'borrowCapGuardian()': FunctionFragment;
    'borrowCaps(address)': FunctionFragment;
    'borrowVerify(address,address,uint256)': FunctionFragment;
    'checkMembership(address,address)': FunctionFragment;
    'claimVenus(address[],address[],bool,bool,bool)': FunctionFragment;
    'claimVenus(address,address[])': FunctionFragment;
    'claimVenus(address)': FunctionFragment;
    'claimVenus(address[],address[],bool,bool)': FunctionFragment;
    'claimVenusAsCollateral(address)': FunctionFragment;
    'closeFactorMantissa()': FunctionFragment;
    'comptrollerImplementation()': FunctionFragment;
    'comptrollerLens()': FunctionFragment;
    'enterMarkets(address[])': FunctionFragment;
    'exitMarket(address)': FunctionFragment;
    'getAccountLiquidity(address)': FunctionFragment;
    'getAllMarkets()': FunctionFragment;
    'getAssetsIn(address)': FunctionFragment;
    'getBlockNumber()': FunctionFragment;
    'getHypotheticalAccountLiquidity(address,address,uint256,uint256)': FunctionFragment;
    'getXVSAddress()': FunctionFragment;
    'getXVSVTokenAddress()': FunctionFragment;
    'isComptroller()': FunctionFragment;
    'liquidateBorrowAllowed(address,address,address,address,uint256)': FunctionFragment;
    'liquidateBorrowVerify(address,address,address,address,uint256,uint256)': FunctionFragment;
    'liquidateCalculateSeizeTokens(address,address,uint256)': FunctionFragment;
    'liquidateVAICalculateSeizeTokens(address,uint256)': FunctionFragment;
    'liquidationIncentiveMantissa()': FunctionFragment;
    'liquidatorContract()': FunctionFragment;
    'markets(address)': FunctionFragment;
    'maxAssets()': FunctionFragment;
    'minReleaseAmount()': FunctionFragment;
    'mintAllowed(address,address,uint256)': FunctionFragment;
    'mintVAIGuardianPaused()': FunctionFragment;
    'mintVerify(address,address,uint256,uint256)': FunctionFragment;
    'mintedVAIs(address)': FunctionFragment;
    'oracle()': FunctionFragment;
    'pauseGuardian()': FunctionFragment;
    'pendingAdmin()': FunctionFragment;
    'pendingComptrollerImplementation()': FunctionFragment;
    'protocolPaused()': FunctionFragment;
    'redeemAllowed(address,address,uint256)': FunctionFragment;
    'redeemVerify(address,address,uint256,uint256)': FunctionFragment;
    'releaseStartBlock()': FunctionFragment;
    'releaseToVault()': FunctionFragment;
    'repayBorrowAllowed(address,address,address,uint256)': FunctionFragment;
    'repayBorrowVerify(address,address,address,uint256,uint256)': FunctionFragment;
    'repayVAIGuardianPaused()': FunctionFragment;
    'seizeAllowed(address,address,address,address,uint256)': FunctionFragment;
    'seizeVerify(address,address,address,address,uint256)': FunctionFragment;
    'setMintedVAIOf(address,uint256)': FunctionFragment;
    'supplyCaps(address)': FunctionFragment;
    'transferAllowed(address,address,address,uint256)': FunctionFragment;
    'transferVerify(address,address,address,uint256)': FunctionFragment;
    'treasuryAddress()': FunctionFragment;
    'treasuryGuardian()': FunctionFragment;
    'treasuryPercent()': FunctionFragment;
    'updateDelegate(address,bool)': FunctionFragment;
    'vaiController()': FunctionFragment;
    'vaiMintRate()': FunctionFragment;
    'vaiVaultAddress()': FunctionFragment;
    'venusAccrued(address)': FunctionFragment;
    'venusBorrowSpeeds(address)': FunctionFragment;
    'venusBorrowState(address)': FunctionFragment;
    'venusBorrowerIndex(address,address)': FunctionFragment;
    'venusInitialIndex()': FunctionFragment;
    'venusRate()': FunctionFragment;
    'venusSpeeds(address)': FunctionFragment;
    'venusSupplierIndex(address,address)': FunctionFragment;
    'venusSupplySpeeds(address)': FunctionFragment;
    'venusSupplyState(address)': FunctionFragment;
    'venusVAIVaultRate()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | '_become'
      | '_grantXVS'
      | '_setAccessControl'
      | '_setActionsPaused'
      | '_setCloseFactor'
      | '_setCollateralFactor'
      | '_setComptrollerLens'
      | '_setLiquidationIncentive'
      | '_setLiquidatorContract'
      | '_setMarketBorrowCaps'
      | '_setMarketSupplyCaps'
      | '_setPauseGuardian'
      | '_setPriceOracle'
      | '_setProtocolPaused'
      | '_setTreasuryData'
      | '_setVAIController'
      | '_setVAIMintRate'
      | '_setVAIVaultInfo'
      | '_setVenusSpeeds'
      | '_setVenusVAIVaultRate'
      | '_supportMarket'
      | 'accountAssets'
      | 'actionPaused'
      | 'admin'
      | 'allMarkets'
      | 'approvedDelegates'
      | 'borrowAllowed'
      | 'borrowCapGuardian'
      | 'borrowCaps'
      | 'borrowVerify'
      | 'checkMembership'
      | 'claimVenus(address[],address[],bool,bool,bool)'
      | 'claimVenus(address,address[])'
      | 'claimVenus(address)'
      | 'claimVenus(address[],address[],bool,bool)'
      | 'claimVenusAsCollateral'
      | 'closeFactorMantissa'
      | 'comptrollerImplementation'
      | 'comptrollerLens'
      | 'enterMarkets'
      | 'exitMarket'
      | 'getAccountLiquidity'
      | 'getAllMarkets'
      | 'getAssetsIn'
      | 'getBlockNumber'
      | 'getHypotheticalAccountLiquidity'
      | 'getXVSAddress'
      | 'getXVSVTokenAddress'
      | 'isComptroller'
      | 'liquidateBorrowAllowed'
      | 'liquidateBorrowVerify'
      | 'liquidateCalculateSeizeTokens'
      | 'liquidateVAICalculateSeizeTokens'
      | 'liquidationIncentiveMantissa'
      | 'liquidatorContract'
      | 'markets'
      | 'maxAssets'
      | 'minReleaseAmount'
      | 'mintAllowed'
      | 'mintVAIGuardianPaused'
      | 'mintVerify'
      | 'mintedVAIs'
      | 'oracle'
      | 'pauseGuardian'
      | 'pendingAdmin'
      | 'pendingComptrollerImplementation'
      | 'protocolPaused'
      | 'redeemAllowed'
      | 'redeemVerify'
      | 'releaseStartBlock'
      | 'releaseToVault'
      | 'repayBorrowAllowed'
      | 'repayBorrowVerify'
      | 'repayVAIGuardianPaused'
      | 'seizeAllowed'
      | 'seizeVerify'
      | 'setMintedVAIOf'
      | 'supplyCaps'
      | 'transferAllowed'
      | 'transferVerify'
      | 'treasuryAddress'
      | 'treasuryGuardian'
      | 'treasuryPercent'
      | 'updateDelegate'
      | 'vaiController'
      | 'vaiMintRate'
      | 'vaiVaultAddress'
      | 'venusAccrued'
      | 'venusBorrowSpeeds'
      | 'venusBorrowState'
      | 'venusBorrowerIndex'
      | 'venusInitialIndex'
      | 'venusRate'
      | 'venusSpeeds'
      | 'venusSupplierIndex'
      | 'venusSupplySpeeds'
      | 'venusSupplyState'
      | 'venusVAIVaultRate',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: '_become', values: [string]): string;
  encodeFunctionData(functionFragment: '_grantXVS', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: '_setAccessControl', values: [string]): string;
  encodeFunctionData(
    functionFragment: '_setActionsPaused',
    values: [string[], BigNumberish[], boolean],
  ): string;
  encodeFunctionData(functionFragment: '_setCloseFactor', values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: '_setCollateralFactor',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: '_setComptrollerLens', values: [string]): string;
  encodeFunctionData(functionFragment: '_setLiquidationIncentive', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: '_setLiquidatorContract', values: [string]): string;
  encodeFunctionData(
    functionFragment: '_setMarketBorrowCaps',
    values: [string[], BigNumberish[]],
  ): string;
  encodeFunctionData(
    functionFragment: '_setMarketSupplyCaps',
    values: [string[], BigNumberish[]],
  ): string;
  encodeFunctionData(functionFragment: '_setPauseGuardian', values: [string]): string;
  encodeFunctionData(functionFragment: '_setPriceOracle', values: [string]): string;
  encodeFunctionData(functionFragment: '_setProtocolPaused', values: [boolean]): string;
  encodeFunctionData(
    functionFragment: '_setTreasuryData',
    values: [string, string, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: '_setVAIController', values: [string]): string;
  encodeFunctionData(functionFragment: '_setVAIMintRate', values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: '_setVAIVaultInfo',
    values: [string, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: '_setVenusSpeeds',
    values: [string[], BigNumberish[], BigNumberish[]],
  ): string;
  encodeFunctionData(functionFragment: '_setVenusVAIVaultRate', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: '_supportMarket', values: [string]): string;
  encodeFunctionData(functionFragment: 'accountAssets', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'actionPaused', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'admin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'allMarkets', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'approvedDelegates', values: [string, string]): string;
  encodeFunctionData(
    functionFragment: 'borrowAllowed',
    values: [string, string, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'borrowCapGuardian', values?: undefined): string;
  encodeFunctionData(functionFragment: 'borrowCaps', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'borrowVerify',
    values: [string, string, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'checkMembership', values: [string, string]): string;
  encodeFunctionData(
    functionFragment: 'claimVenus(address[],address[],bool,bool,bool)',
    values: [string[], string[], boolean, boolean, boolean],
  ): string;
  encodeFunctionData(
    functionFragment: 'claimVenus(address,address[])',
    values: [string, string[]],
  ): string;
  encodeFunctionData(functionFragment: 'claimVenus(address)', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'claimVenus(address[],address[],bool,bool)',
    values: [string[], string[], boolean, boolean],
  ): string;
  encodeFunctionData(functionFragment: 'claimVenusAsCollateral', values: [string]): string;
  encodeFunctionData(functionFragment: 'closeFactorMantissa', values?: undefined): string;
  encodeFunctionData(functionFragment: 'comptrollerImplementation', values?: undefined): string;
  encodeFunctionData(functionFragment: 'comptrollerLens', values?: undefined): string;
  encodeFunctionData(functionFragment: 'enterMarkets', values: [string[]]): string;
  encodeFunctionData(functionFragment: 'exitMarket', values: [string]): string;
  encodeFunctionData(functionFragment: 'getAccountLiquidity', values: [string]): string;
  encodeFunctionData(functionFragment: 'getAllMarkets', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getAssetsIn', values: [string]): string;
  encodeFunctionData(functionFragment: 'getBlockNumber', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getHypotheticalAccountLiquidity',
    values: [string, string, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'getXVSAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getXVSVTokenAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isComptroller', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'liquidateBorrowAllowed',
    values: [string, string, string, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidateBorrowVerify',
    values: [string, string, string, string, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidateCalculateSeizeTokens',
    values: [string, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidateVAICalculateSeizeTokens',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'liquidationIncentiveMantissa', values?: undefined): string;
  encodeFunctionData(functionFragment: 'liquidatorContract', values?: undefined): string;
  encodeFunctionData(functionFragment: 'markets', values: [string]): string;
  encodeFunctionData(functionFragment: 'maxAssets', values?: undefined): string;
  encodeFunctionData(functionFragment: 'minReleaseAmount', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'mintAllowed',
    values: [string, string, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'mintVAIGuardianPaused', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'mintVerify',
    values: [string, string, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'mintedVAIs', values: [string]): string;
  encodeFunctionData(functionFragment: 'oracle', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pauseGuardian', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingAdmin', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'pendingComptrollerImplementation',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'protocolPaused', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'redeemAllowed',
    values: [string, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'redeemVerify',
    values: [string, string, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'releaseStartBlock', values?: undefined): string;
  encodeFunctionData(functionFragment: 'releaseToVault', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'repayBorrowAllowed',
    values: [string, string, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'repayBorrowVerify',
    values: [string, string, string, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'repayVAIGuardianPaused', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'seizeAllowed',
    values: [string, string, string, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'seizeVerify',
    values: [string, string, string, string, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'setMintedVAIOf', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'supplyCaps', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'transferAllowed',
    values: [string, string, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferVerify',
    values: [string, string, string, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'treasuryAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'treasuryGuardian', values?: undefined): string;
  encodeFunctionData(functionFragment: 'treasuryPercent', values?: undefined): string;
  encodeFunctionData(functionFragment: 'updateDelegate', values: [string, boolean]): string;
  encodeFunctionData(functionFragment: 'vaiController', values?: undefined): string;
  encodeFunctionData(functionFragment: 'vaiMintRate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'vaiVaultAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'venusAccrued', values: [string]): string;
  encodeFunctionData(functionFragment: 'venusBorrowSpeeds', values: [string]): string;
  encodeFunctionData(functionFragment: 'venusBorrowState', values: [string]): string;
  encodeFunctionData(functionFragment: 'venusBorrowerIndex', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'venusInitialIndex', values?: undefined): string;
  encodeFunctionData(functionFragment: 'venusRate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'venusSpeeds', values: [string]): string;
  encodeFunctionData(functionFragment: 'venusSupplierIndex', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'venusSupplySpeeds', values: [string]): string;
  encodeFunctionData(functionFragment: 'venusSupplyState', values: [string]): string;
  encodeFunctionData(functionFragment: 'venusVAIVaultRate', values?: undefined): string;

  decodeFunctionResult(functionFragment: '_become', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_grantXVS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setAccessControl', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setActionsPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setCloseFactor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setCollateralFactor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setComptrollerLens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setLiquidationIncentive', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setLiquidatorContract', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setMarketBorrowCaps', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setMarketSupplyCaps', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setPauseGuardian', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setPriceOracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setProtocolPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setTreasuryData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setVAIController', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setVAIMintRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setVAIVaultInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setVenusSpeeds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setVenusVAIVaultRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_supportMarket', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accountAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'actionPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'admin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allMarkets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approvedDelegates', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowAllowed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowCapGuardian', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowCaps', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowVerify', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'checkMembership', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'claimVenus(address[],address[],bool,bool,bool)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'claimVenus(address,address[])', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimVenus(address)', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'claimVenus(address[],address[],bool,bool)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'claimVenusAsCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'closeFactorMantissa', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'comptrollerImplementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'comptrollerLens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enterMarkets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exitMarket', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAccountLiquidity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAllMarkets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAssetsIn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBlockNumber', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getHypotheticalAccountLiquidity',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'getXVSAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getXVSVTokenAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isComptroller', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidateBorrowAllowed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidateBorrowVerify', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidateCalculateSeizeTokens', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'liquidateVAICalculateSeizeTokens',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'liquidationIncentiveMantissa', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidatorContract', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'markets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minReleaseAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintAllowed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintVAIGuardianPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintVerify', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintedVAIs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'oracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pauseGuardian', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingAdmin', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'pendingComptrollerImplementation',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'protocolPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeemAllowed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeemVerify', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'releaseStartBlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'releaseToVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repayBorrowAllowed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repayBorrowVerify', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repayVAIGuardianPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'seizeAllowed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'seizeVerify', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMintedVAIOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supplyCaps', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferAllowed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferVerify', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'treasuryAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'treasuryGuardian', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'treasuryPercent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateDelegate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vaiController', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vaiMintRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vaiVaultAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'venusAccrued', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'venusBorrowSpeeds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'venusBorrowState', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'venusBorrowerIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'venusInitialIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'venusRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'venusSpeeds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'venusSupplierIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'venusSupplySpeeds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'venusSupplyState', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'venusVAIVaultRate', data: BytesLike): Result;

  events: {
    'ActionPausedMarket(address,uint8,bool)': EventFragment;
    'ActionProtocolPaused(bool)': EventFragment;
    'DelegateUpdated(address,address,bool)': EventFragment;
    'DistributedBorrowerVenus(address,address,uint256,uint256)': EventFragment;
    'DistributedSupplierVenus(address,address,uint256,uint256)': EventFragment;
    'DistributedVAIVaultVenus(uint256)': EventFragment;
    'Failure(uint256,uint256,uint256)': EventFragment;
    'MarketEntered(address,address)': EventFragment;
    'MarketExited(address,address)': EventFragment;
    'MarketListed(address)': EventFragment;
    'NewAccessControl(address,address)': EventFragment;
    'NewBorrowCap(address,uint256)': EventFragment;
    'NewCloseFactor(uint256,uint256)': EventFragment;
    'NewCollateralFactor(address,uint256,uint256)': EventFragment;
    'NewComptrollerLens(address,address)': EventFragment;
    'NewLiquidationIncentive(uint256,uint256)': EventFragment;
    'NewLiquidatorContract(address,address)': EventFragment;
    'NewPauseGuardian(address,address)': EventFragment;
    'NewPriceOracle(address,address)': EventFragment;
    'NewSupplyCap(address,uint256)': EventFragment;
    'NewTreasuryAddress(address,address)': EventFragment;
    'NewTreasuryGuardian(address,address)': EventFragment;
    'NewTreasuryPercent(uint256,uint256)': EventFragment;
    'NewVAIController(address,address)': EventFragment;
    'NewVAIMintRate(uint256,uint256)': EventFragment;
    'NewVAIVaultInfo(address,uint256,uint256)': EventFragment;
    'NewVenusVAIVaultRate(uint256,uint256)': EventFragment;
    'VenusBorrowSpeedUpdated(address,uint256)': EventFragment;
    'VenusGranted(address,uint256)': EventFragment;
    'VenusSupplySpeedUpdated(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ActionPausedMarket'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ActionProtocolPaused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DelegateUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DistributedBorrowerVenus'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DistributedSupplierVenus'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DistributedVAIVaultVenus'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Failure'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MarketEntered'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MarketExited'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MarketListed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewAccessControl'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewBorrowCap'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewCloseFactor'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewCollateralFactor'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewComptrollerLens'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewLiquidationIncentive'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewLiquidatorContract'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewPauseGuardian'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewPriceOracle'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewSupplyCap'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewTreasuryAddress'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewTreasuryGuardian'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewTreasuryPercent'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewVAIController'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewVAIMintRate'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewVAIVaultInfo'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewVenusVAIVaultRate'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VenusBorrowSpeedUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VenusGranted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VenusSupplySpeedUpdated'): EventFragment;
}

export interface ActionPausedMarketEventObject {
  vToken: string;
  action: number;
  pauseState: boolean;
}
export type ActionPausedMarketEvent = TypedEvent<
  [string, number, boolean],
  ActionPausedMarketEventObject
>;

export type ActionPausedMarketEventFilter = TypedEventFilter<ActionPausedMarketEvent>;

export interface ActionProtocolPausedEventObject {
  state: boolean;
}
export type ActionProtocolPausedEvent = TypedEvent<[boolean], ActionProtocolPausedEventObject>;

export type ActionProtocolPausedEventFilter = TypedEventFilter<ActionProtocolPausedEvent>;

export interface DelegateUpdatedEventObject {
  borrower: string;
  delegate: string;
  allowDelegatedBorrows: boolean;
}
export type DelegateUpdatedEvent = TypedEvent<
  [string, string, boolean],
  DelegateUpdatedEventObject
>;

export type DelegateUpdatedEventFilter = TypedEventFilter<DelegateUpdatedEvent>;

export interface DistributedBorrowerVenusEventObject {
  vToken: string;
  borrower: string;
  venusDelta: BigNumber;
  venusBorrowIndex: BigNumber;
}
export type DistributedBorrowerVenusEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  DistributedBorrowerVenusEventObject
>;

export type DistributedBorrowerVenusEventFilter = TypedEventFilter<DistributedBorrowerVenusEvent>;

export interface DistributedSupplierVenusEventObject {
  vToken: string;
  supplier: string;
  venusDelta: BigNumber;
  venusSupplyIndex: BigNumber;
}
export type DistributedSupplierVenusEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  DistributedSupplierVenusEventObject
>;

export type DistributedSupplierVenusEventFilter = TypedEventFilter<DistributedSupplierVenusEvent>;

export interface DistributedVAIVaultVenusEventObject {
  amount: BigNumber;
}
export type DistributedVAIVaultVenusEvent = TypedEvent<
  [BigNumber],
  DistributedVAIVaultVenusEventObject
>;

export type DistributedVAIVaultVenusEventFilter = TypedEventFilter<DistributedVAIVaultVenusEvent>;

export interface FailureEventObject {
  error: BigNumber;
  info: BigNumber;
  detail: BigNumber;
}
export type FailureEvent = TypedEvent<[BigNumber, BigNumber, BigNumber], FailureEventObject>;

export type FailureEventFilter = TypedEventFilter<FailureEvent>;

export interface MarketEnteredEventObject {
  vToken: string;
  account: string;
}
export type MarketEnteredEvent = TypedEvent<[string, string], MarketEnteredEventObject>;

export type MarketEnteredEventFilter = TypedEventFilter<MarketEnteredEvent>;

export interface MarketExitedEventObject {
  vToken: string;
  account: string;
}
export type MarketExitedEvent = TypedEvent<[string, string], MarketExitedEventObject>;

export type MarketExitedEventFilter = TypedEventFilter<MarketExitedEvent>;

export interface MarketListedEventObject {
  vToken: string;
}
export type MarketListedEvent = TypedEvent<[string], MarketListedEventObject>;

export type MarketListedEventFilter = TypedEventFilter<MarketListedEvent>;

export interface NewAccessControlEventObject {
  oldAccessControlAddress: string;
  newAccessControlAddress: string;
}
export type NewAccessControlEvent = TypedEvent<[string, string], NewAccessControlEventObject>;

export type NewAccessControlEventFilter = TypedEventFilter<NewAccessControlEvent>;

export interface NewBorrowCapEventObject {
  vToken: string;
  newBorrowCap: BigNumber;
}
export type NewBorrowCapEvent = TypedEvent<[string, BigNumber], NewBorrowCapEventObject>;

export type NewBorrowCapEventFilter = TypedEventFilter<NewBorrowCapEvent>;

export interface NewCloseFactorEventObject {
  oldCloseFactorMantissa: BigNumber;
  newCloseFactorMantissa: BigNumber;
}
export type NewCloseFactorEvent = TypedEvent<[BigNumber, BigNumber], NewCloseFactorEventObject>;

export type NewCloseFactorEventFilter = TypedEventFilter<NewCloseFactorEvent>;

export interface NewCollateralFactorEventObject {
  vToken: string;
  oldCollateralFactorMantissa: BigNumber;
  newCollateralFactorMantissa: BigNumber;
}
export type NewCollateralFactorEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  NewCollateralFactorEventObject
>;

export type NewCollateralFactorEventFilter = TypedEventFilter<NewCollateralFactorEvent>;

export interface NewComptrollerLensEventObject {
  oldComptrollerLens: string;
  newComptrollerLens: string;
}
export type NewComptrollerLensEvent = TypedEvent<[string, string], NewComptrollerLensEventObject>;

export type NewComptrollerLensEventFilter = TypedEventFilter<NewComptrollerLensEvent>;

export interface NewLiquidationIncentiveEventObject {
  oldLiquidationIncentiveMantissa: BigNumber;
  newLiquidationIncentiveMantissa: BigNumber;
}
export type NewLiquidationIncentiveEvent = TypedEvent<
  [BigNumber, BigNumber],
  NewLiquidationIncentiveEventObject
>;

export type NewLiquidationIncentiveEventFilter = TypedEventFilter<NewLiquidationIncentiveEvent>;

export interface NewLiquidatorContractEventObject {
  oldLiquidatorContract: string;
  newLiquidatorContract: string;
}
export type NewLiquidatorContractEvent = TypedEvent<
  [string, string],
  NewLiquidatorContractEventObject
>;

export type NewLiquidatorContractEventFilter = TypedEventFilter<NewLiquidatorContractEvent>;

export interface NewPauseGuardianEventObject {
  oldPauseGuardian: string;
  newPauseGuardian: string;
}
export type NewPauseGuardianEvent = TypedEvent<[string, string], NewPauseGuardianEventObject>;

export type NewPauseGuardianEventFilter = TypedEventFilter<NewPauseGuardianEvent>;

export interface NewPriceOracleEventObject {
  oldPriceOracle: string;
  newPriceOracle: string;
}
export type NewPriceOracleEvent = TypedEvent<[string, string], NewPriceOracleEventObject>;

export type NewPriceOracleEventFilter = TypedEventFilter<NewPriceOracleEvent>;

export interface NewSupplyCapEventObject {
  vToken: string;
  newSupplyCap: BigNumber;
}
export type NewSupplyCapEvent = TypedEvent<[string, BigNumber], NewSupplyCapEventObject>;

export type NewSupplyCapEventFilter = TypedEventFilter<NewSupplyCapEvent>;

export interface NewTreasuryAddressEventObject {
  oldTreasuryAddress: string;
  newTreasuryAddress: string;
}
export type NewTreasuryAddressEvent = TypedEvent<[string, string], NewTreasuryAddressEventObject>;

export type NewTreasuryAddressEventFilter = TypedEventFilter<NewTreasuryAddressEvent>;

export interface NewTreasuryGuardianEventObject {
  oldTreasuryGuardian: string;
  newTreasuryGuardian: string;
}
export type NewTreasuryGuardianEvent = TypedEvent<[string, string], NewTreasuryGuardianEventObject>;

export type NewTreasuryGuardianEventFilter = TypedEventFilter<NewTreasuryGuardianEvent>;

export interface NewTreasuryPercentEventObject {
  oldTreasuryPercent: BigNumber;
  newTreasuryPercent: BigNumber;
}
export type NewTreasuryPercentEvent = TypedEvent<
  [BigNumber, BigNumber],
  NewTreasuryPercentEventObject
>;

export type NewTreasuryPercentEventFilter = TypedEventFilter<NewTreasuryPercentEvent>;

export interface NewVAIControllerEventObject {
  oldVAIController: string;
  newVAIController: string;
}
export type NewVAIControllerEvent = TypedEvent<[string, string], NewVAIControllerEventObject>;

export type NewVAIControllerEventFilter = TypedEventFilter<NewVAIControllerEvent>;

export interface NewVAIMintRateEventObject {
  oldVAIMintRate: BigNumber;
  newVAIMintRate: BigNumber;
}
export type NewVAIMintRateEvent = TypedEvent<[BigNumber, BigNumber], NewVAIMintRateEventObject>;

export type NewVAIMintRateEventFilter = TypedEventFilter<NewVAIMintRateEvent>;

export interface NewVAIVaultInfoEventObject {
  vault_: string;
  releaseStartBlock_: BigNumber;
  releaseInterval_: BigNumber;
}
export type NewVAIVaultInfoEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  NewVAIVaultInfoEventObject
>;

export type NewVAIVaultInfoEventFilter = TypedEventFilter<NewVAIVaultInfoEvent>;

export interface NewVenusVAIVaultRateEventObject {
  oldVenusVAIVaultRate: BigNumber;
  newVenusVAIVaultRate: BigNumber;
}
export type NewVenusVAIVaultRateEvent = TypedEvent<
  [BigNumber, BigNumber],
  NewVenusVAIVaultRateEventObject
>;

export type NewVenusVAIVaultRateEventFilter = TypedEventFilter<NewVenusVAIVaultRateEvent>;

export interface VenusBorrowSpeedUpdatedEventObject {
  vToken: string;
  newSpeed: BigNumber;
}
export type VenusBorrowSpeedUpdatedEvent = TypedEvent<
  [string, BigNumber],
  VenusBorrowSpeedUpdatedEventObject
>;

export type VenusBorrowSpeedUpdatedEventFilter = TypedEventFilter<VenusBorrowSpeedUpdatedEvent>;

export interface VenusGrantedEventObject {
  recipient: string;
  amount: BigNumber;
}
export type VenusGrantedEvent = TypedEvent<[string, BigNumber], VenusGrantedEventObject>;

export type VenusGrantedEventFilter = TypedEventFilter<VenusGrantedEvent>;

export interface VenusSupplySpeedUpdatedEventObject {
  vToken: string;
  newSpeed: BigNumber;
}
export type VenusSupplySpeedUpdatedEvent = TypedEvent<
  [string, BigNumber],
  VenusSupplySpeedUpdatedEventObject
>;

export type VenusSupplySpeedUpdatedEventFilter = TypedEventFilter<VenusSupplySpeedUpdatedEvent>;

export interface MainPoolComptroller extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MainPoolComptrollerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _become(
      unitroller: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    _grantXVS(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    _setAccessControl(
      newAccessControlAddress: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    _setActionsPaused(
      markets: string[],
      actions: BigNumberish[],
      paused: boolean,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    _setCloseFactor(
      newCloseFactorMantissa: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    _setCollateralFactor(
      vToken: string,
      newCollateralFactorMantissa: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    _setComptrollerLens(
      comptrollerLens_: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    _setLiquidationIncentive(
      newLiquidationIncentiveMantissa: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    _setLiquidatorContract(
      newLiquidatorContract_: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    _setMarketBorrowCaps(
      vTokens: string[],
      newBorrowCaps: BigNumberish[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    _setMarketSupplyCaps(
      vTokens: string[],
      newSupplyCaps: BigNumberish[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    _setPauseGuardian(
      newPauseGuardian: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    _setPriceOracle(
      newOracle: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    _setProtocolPaused(
      state: boolean,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    _setTreasuryData(
      newTreasuryGuardian: string,
      newTreasuryAddress: string,
      newTreasuryPercent: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    _setVAIController(
      vaiController_: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    _setVAIMintRate(
      newVAIMintRate: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    _setVAIVaultInfo(
      vault_: string,
      releaseStartBlock_: BigNumberish,
      minReleaseAmount_: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    _setVenusSpeeds(
      vTokens: string[],
      supplySpeeds: BigNumberish[],
      borrowSpeeds: BigNumberish[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    _setVenusVAIVaultRate(
      venusVAIVaultRate_: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    _supportMarket(
      vToken: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    accountAssets(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    actionPaused(
      market: string,
      action: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    allMarkets(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    approvedDelegates(arg0: string, arg1: string, overrides?: CallOverrides): Promise<[boolean]>;

    borrowAllowed(
      vToken: string,
      borrower: string,
      borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    borrowCapGuardian(overrides?: CallOverrides): Promise<[string]>;

    borrowCaps(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    borrowVerify(
      vToken: string,
      borrower: string,
      borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    checkMembership(account: string, vToken: string, overrides?: CallOverrides): Promise<[boolean]>;

    'claimVenus(address[],address[],bool,bool,bool)'(
      holders: string[],
      vTokens: string[],
      borrowers: boolean,
      suppliers: boolean,
      collateral: boolean,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'claimVenus(address,address[])'(
      holder: string,
      vTokens: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'claimVenus(address)'(
      holder: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'claimVenus(address[],address[],bool,bool)'(
      holders: string[],
      vTokens: string[],
      borrowers: boolean,
      suppliers: boolean,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    claimVenusAsCollateral(
      holder: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    closeFactorMantissa(overrides?: CallOverrides): Promise<[BigNumber]>;

    comptrollerImplementation(overrides?: CallOverrides): Promise<[string]>;

    comptrollerLens(overrides?: CallOverrides): Promise<[string]>;

    enterMarkets(
      vTokens: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    exitMarket(
      vTokenAddress: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    getAccountLiquidity(
      account: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getAllMarkets(overrides?: CallOverrides): Promise<[string[]]>;

    getAssetsIn(account: string, overrides?: CallOverrides): Promise<[string[]]>;

    getBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    getHypotheticalAccountLiquidity(
      account: string,
      vTokenModify: string,
      redeemTokens: BigNumberish,
      borrowAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getXVSAddress(overrides?: CallOverrides): Promise<[string]>;

    getXVSVTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    isComptroller(overrides?: CallOverrides): Promise<[boolean]>;

    liquidateBorrowAllowed(
      vTokenBorrowed: string,
      vTokenCollateral: string,
      liquidator: string,
      borrower: string,
      repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    liquidateBorrowVerify(
      vTokenBorrowed: string,
      vTokenCollateral: string,
      liquidator: string,
      borrower: string,
      actualRepayAmount: BigNumberish,
      seizeTokens: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    liquidateCalculateSeizeTokens(
      vTokenBorrowed: string,
      vTokenCollateral: string,
      actualRepayAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    liquidateVAICalculateSeizeTokens(
      vTokenCollateral: string,
      actualRepayAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    liquidationIncentiveMantissa(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidatorContract(overrides?: CallOverrides): Promise<[string]>;

    markets(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [boolean, BigNumber, boolean] & {
        isListed: boolean;
        collateralFactorMantissa: BigNumber;
        isVenus: boolean;
      }
    >;

    maxAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    minReleaseAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintAllowed(
      vToken: string,
      minter: string,
      mintAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    mintVAIGuardianPaused(overrides?: CallOverrides): Promise<[boolean]>;

    mintVerify(
      vToken: string,
      minter: string,
      actualMintAmount: BigNumberish,
      mintTokens: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    mintedVAIs(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    pauseGuardian(overrides?: CallOverrides): Promise<[string]>;

    pendingAdmin(overrides?: CallOverrides): Promise<[string]>;

    pendingComptrollerImplementation(overrides?: CallOverrides): Promise<[string]>;

    protocolPaused(overrides?: CallOverrides): Promise<[boolean]>;

    redeemAllowed(
      vToken: string,
      redeemer: string,
      redeemTokens: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    redeemVerify(
      vToken: string,
      redeemer: string,
      redeemAmount: BigNumberish,
      redeemTokens: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    releaseStartBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    releaseToVault(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    repayBorrowAllowed(
      vToken: string,
      payer: string,
      borrower: string,
      repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    repayBorrowVerify(
      vToken: string,
      payer: string,
      borrower: string,
      actualRepayAmount: BigNumberish,
      borrowerIndex: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    repayVAIGuardianPaused(overrides?: CallOverrides): Promise<[boolean]>;

    seizeAllowed(
      vTokenCollateral: string,
      vTokenBorrowed: string,
      liquidator: string,
      borrower: string,
      seizeTokens: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    seizeVerify(
      vTokenCollateral: string,
      vTokenBorrowed: string,
      liquidator: string,
      borrower: string,
      seizeTokens: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setMintedVAIOf(
      owner: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    supplyCaps(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    transferAllowed(
      vToken: string,
      src: string,
      dst: string,
      transferTokens: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    transferVerify(
      vToken: string,
      src: string,
      dst: string,
      transferTokens: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    treasuryAddress(overrides?: CallOverrides): Promise<[string]>;

    treasuryGuardian(overrides?: CallOverrides): Promise<[string]>;

    treasuryPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateDelegate(
      delegate: string,
      allowBorrows: boolean,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    vaiController(overrides?: CallOverrides): Promise<[string]>;

    vaiMintRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    vaiVaultAddress(overrides?: CallOverrides): Promise<[string]>;

    venusAccrued(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    venusBorrowSpeeds(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    venusBorrowState(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, number] & { index: BigNumber; block: number }>;

    venusBorrowerIndex(arg0: string, arg1: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    venusInitialIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    venusRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    venusSpeeds(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    venusSupplierIndex(arg0: string, arg1: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    venusSupplySpeeds(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    venusSupplyState(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, number] & { index: BigNumber; block: number }>;

    venusVAIVaultRate(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  _become(
    unitroller: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  _grantXVS(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  _setAccessControl(
    newAccessControlAddress: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  _setActionsPaused(
    markets: string[],
    actions: BigNumberish[],
    paused: boolean,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  _setCloseFactor(
    newCloseFactorMantissa: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  _setCollateralFactor(
    vToken: string,
    newCollateralFactorMantissa: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  _setComptrollerLens(
    comptrollerLens_: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  _setLiquidationIncentive(
    newLiquidationIncentiveMantissa: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  _setLiquidatorContract(
    newLiquidatorContract_: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  _setMarketBorrowCaps(
    vTokens: string[],
    newBorrowCaps: BigNumberish[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  _setMarketSupplyCaps(
    vTokens: string[],
    newSupplyCaps: BigNumberish[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  _setPauseGuardian(
    newPauseGuardian: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  _setPriceOracle(
    newOracle: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  _setProtocolPaused(
    state: boolean,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  _setTreasuryData(
    newTreasuryGuardian: string,
    newTreasuryAddress: string,
    newTreasuryPercent: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  _setVAIController(
    vaiController_: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  _setVAIMintRate(
    newVAIMintRate: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  _setVAIVaultInfo(
    vault_: string,
    releaseStartBlock_: BigNumberish,
    minReleaseAmount_: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  _setVenusSpeeds(
    vTokens: string[],
    supplySpeeds: BigNumberish[],
    borrowSpeeds: BigNumberish[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  _setVenusVAIVaultRate(
    venusVAIVaultRate_: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  _supportMarket(
    vToken: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  accountAssets(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<string>;

  actionPaused(market: string, action: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  admin(overrides?: CallOverrides): Promise<string>;

  allMarkets(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  approvedDelegates(arg0: string, arg1: string, overrides?: CallOverrides): Promise<boolean>;

  borrowAllowed(
    vToken: string,
    borrower: string,
    borrowAmount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  borrowCapGuardian(overrides?: CallOverrides): Promise<string>;

  borrowCaps(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  borrowVerify(
    vToken: string,
    borrower: string,
    borrowAmount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  checkMembership(account: string, vToken: string, overrides?: CallOverrides): Promise<boolean>;

  'claimVenus(address[],address[],bool,bool,bool)'(
    holders: string[],
    vTokens: string[],
    borrowers: boolean,
    suppliers: boolean,
    collateral: boolean,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'claimVenus(address,address[])'(
    holder: string,
    vTokens: string[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'claimVenus(address)'(
    holder: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'claimVenus(address[],address[],bool,bool)'(
    holders: string[],
    vTokens: string[],
    borrowers: boolean,
    suppliers: boolean,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  claimVenusAsCollateral(
    holder: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  closeFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

  comptrollerImplementation(overrides?: CallOverrides): Promise<string>;

  comptrollerLens(overrides?: CallOverrides): Promise<string>;

  enterMarkets(
    vTokens: string[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  exitMarket(
    vTokenAddress: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  getAccountLiquidity(
    account: string,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getAllMarkets(overrides?: CallOverrides): Promise<string[]>;

  getAssetsIn(account: string, overrides?: CallOverrides): Promise<string[]>;

  getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  getHypotheticalAccountLiquidity(
    account: string,
    vTokenModify: string,
    redeemTokens: BigNumberish,
    borrowAmount: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getXVSAddress(overrides?: CallOverrides): Promise<string>;

  getXVSVTokenAddress(overrides?: CallOverrides): Promise<string>;

  isComptroller(overrides?: CallOverrides): Promise<boolean>;

  liquidateBorrowAllowed(
    vTokenBorrowed: string,
    vTokenCollateral: string,
    liquidator: string,
    borrower: string,
    repayAmount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  liquidateBorrowVerify(
    vTokenBorrowed: string,
    vTokenCollateral: string,
    liquidator: string,
    borrower: string,
    actualRepayAmount: BigNumberish,
    seizeTokens: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  liquidateCalculateSeizeTokens(
    vTokenBorrowed: string,
    vTokenCollateral: string,
    actualRepayAmount: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber]>;

  liquidateVAICalculateSeizeTokens(
    vTokenCollateral: string,
    actualRepayAmount: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber]>;

  liquidationIncentiveMantissa(overrides?: CallOverrides): Promise<BigNumber>;

  liquidatorContract(overrides?: CallOverrides): Promise<string>;

  markets(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<
    [boolean, BigNumber, boolean] & {
      isListed: boolean;
      collateralFactorMantissa: BigNumber;
      isVenus: boolean;
    }
  >;

  maxAssets(overrides?: CallOverrides): Promise<BigNumber>;

  minReleaseAmount(overrides?: CallOverrides): Promise<BigNumber>;

  mintAllowed(
    vToken: string,
    minter: string,
    mintAmount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  mintVAIGuardianPaused(overrides?: CallOverrides): Promise<boolean>;

  mintVerify(
    vToken: string,
    minter: string,
    actualMintAmount: BigNumberish,
    mintTokens: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  mintedVAIs(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  oracle(overrides?: CallOverrides): Promise<string>;

  pauseGuardian(overrides?: CallOverrides): Promise<string>;

  pendingAdmin(overrides?: CallOverrides): Promise<string>;

  pendingComptrollerImplementation(overrides?: CallOverrides): Promise<string>;

  protocolPaused(overrides?: CallOverrides): Promise<boolean>;

  redeemAllowed(
    vToken: string,
    redeemer: string,
    redeemTokens: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  redeemVerify(
    vToken: string,
    redeemer: string,
    redeemAmount: BigNumberish,
    redeemTokens: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  releaseStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

  releaseToVault(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  repayBorrowAllowed(
    vToken: string,
    payer: string,
    borrower: string,
    repayAmount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  repayBorrowVerify(
    vToken: string,
    payer: string,
    borrower: string,
    actualRepayAmount: BigNumberish,
    borrowerIndex: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  repayVAIGuardianPaused(overrides?: CallOverrides): Promise<boolean>;

  seizeAllowed(
    vTokenCollateral: string,
    vTokenBorrowed: string,
    liquidator: string,
    borrower: string,
    seizeTokens: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  seizeVerify(
    vTokenCollateral: string,
    vTokenBorrowed: string,
    liquidator: string,
    borrower: string,
    seizeTokens: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setMintedVAIOf(
    owner: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  supplyCaps(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  transferAllowed(
    vToken: string,
    src: string,
    dst: string,
    transferTokens: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  transferVerify(
    vToken: string,
    src: string,
    dst: string,
    transferTokens: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  treasuryAddress(overrides?: CallOverrides): Promise<string>;

  treasuryGuardian(overrides?: CallOverrides): Promise<string>;

  treasuryPercent(overrides?: CallOverrides): Promise<BigNumber>;

  updateDelegate(
    delegate: string,
    allowBorrows: boolean,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  vaiController(overrides?: CallOverrides): Promise<string>;

  vaiMintRate(overrides?: CallOverrides): Promise<BigNumber>;

  vaiVaultAddress(overrides?: CallOverrides): Promise<string>;

  venusAccrued(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  venusBorrowSpeeds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  venusBorrowState(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, number] & { index: BigNumber; block: number }>;

  venusBorrowerIndex(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

  venusInitialIndex(overrides?: CallOverrides): Promise<BigNumber>;

  venusRate(overrides?: CallOverrides): Promise<BigNumber>;

  venusSpeeds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  venusSupplierIndex(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

  venusSupplySpeeds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  venusSupplyState(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, number] & { index: BigNumber; block: number }>;

  venusVAIVaultRate(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    _become(unitroller: string, overrides?: CallOverrides): Promise<void>;

    _grantXVS(recipient: string, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    _setAccessControl(
      newAccessControlAddress: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    _setActionsPaused(
      markets: string[],
      actions: BigNumberish[],
      paused: boolean,
      overrides?: CallOverrides,
    ): Promise<void>;

    _setCloseFactor(
      newCloseFactorMantissa: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    _setCollateralFactor(
      vToken: string,
      newCollateralFactorMantissa: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    _setComptrollerLens(comptrollerLens_: string, overrides?: CallOverrides): Promise<BigNumber>;

    _setLiquidationIncentive(
      newLiquidationIncentiveMantissa: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    _setLiquidatorContract(
      newLiquidatorContract_: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    _setMarketBorrowCaps(
      vTokens: string[],
      newBorrowCaps: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<void>;

    _setMarketSupplyCaps(
      vTokens: string[],
      newSupplyCaps: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<void>;

    _setPauseGuardian(newPauseGuardian: string, overrides?: CallOverrides): Promise<BigNumber>;

    _setPriceOracle(newOracle: string, overrides?: CallOverrides): Promise<BigNumber>;

    _setProtocolPaused(state: boolean, overrides?: CallOverrides): Promise<boolean>;

    _setTreasuryData(
      newTreasuryGuardian: string,
      newTreasuryAddress: string,
      newTreasuryPercent: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    _setVAIController(vaiController_: string, overrides?: CallOverrides): Promise<BigNumber>;

    _setVAIMintRate(newVAIMintRate: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    _setVAIVaultInfo(
      vault_: string,
      releaseStartBlock_: BigNumberish,
      minReleaseAmount_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    _setVenusSpeeds(
      vTokens: string[],
      supplySpeeds: BigNumberish[],
      borrowSpeeds: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<void>;

    _setVenusVAIVaultRate(
      venusVAIVaultRate_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    _supportMarket(vToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    accountAssets(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<string>;

    actionPaused(market: string, action: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    admin(overrides?: CallOverrides): Promise<string>;

    allMarkets(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    approvedDelegates(arg0: string, arg1: string, overrides?: CallOverrides): Promise<boolean>;

    borrowAllowed(
      vToken: string,
      borrower: string,
      borrowAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    borrowCapGuardian(overrides?: CallOverrides): Promise<string>;

    borrowCaps(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrowVerify(
      vToken: string,
      borrower: string,
      borrowAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    checkMembership(account: string, vToken: string, overrides?: CallOverrides): Promise<boolean>;

    'claimVenus(address[],address[],bool,bool,bool)'(
      holders: string[],
      vTokens: string[],
      borrowers: boolean,
      suppliers: boolean,
      collateral: boolean,
      overrides?: CallOverrides,
    ): Promise<void>;

    'claimVenus(address,address[])'(
      holder: string,
      vTokens: string[],
      overrides?: CallOverrides,
    ): Promise<void>;

    'claimVenus(address)'(holder: string, overrides?: CallOverrides): Promise<void>;

    'claimVenus(address[],address[],bool,bool)'(
      holders: string[],
      vTokens: string[],
      borrowers: boolean,
      suppliers: boolean,
      overrides?: CallOverrides,
    ): Promise<void>;

    claimVenusAsCollateral(holder: string, overrides?: CallOverrides): Promise<void>;

    closeFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    comptrollerImplementation(overrides?: CallOverrides): Promise<string>;

    comptrollerLens(overrides?: CallOverrides): Promise<string>;

    enterMarkets(vTokens: string[], overrides?: CallOverrides): Promise<BigNumber[]>;

    exitMarket(vTokenAddress: string, overrides?: CallOverrides): Promise<BigNumber>;

    getAccountLiquidity(
      account: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getAllMarkets(overrides?: CallOverrides): Promise<string[]>;

    getAssetsIn(account: string, overrides?: CallOverrides): Promise<string[]>;

    getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getHypotheticalAccountLiquidity(
      account: string,
      vTokenModify: string,
      redeemTokens: BigNumberish,
      borrowAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getXVSAddress(overrides?: CallOverrides): Promise<string>;

    getXVSVTokenAddress(overrides?: CallOverrides): Promise<string>;

    isComptroller(overrides?: CallOverrides): Promise<boolean>;

    liquidateBorrowAllowed(
      vTokenBorrowed: string,
      vTokenCollateral: string,
      liquidator: string,
      borrower: string,
      repayAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    liquidateBorrowVerify(
      vTokenBorrowed: string,
      vTokenCollateral: string,
      liquidator: string,
      borrower: string,
      actualRepayAmount: BigNumberish,
      seizeTokens: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    liquidateCalculateSeizeTokens(
      vTokenBorrowed: string,
      vTokenCollateral: string,
      actualRepayAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    liquidateVAICalculateSeizeTokens(
      vTokenCollateral: string,
      actualRepayAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    liquidationIncentiveMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    liquidatorContract(overrides?: CallOverrides): Promise<string>;

    markets(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [boolean, BigNumber, boolean] & {
        isListed: boolean;
        collateralFactorMantissa: BigNumber;
        isVenus: boolean;
      }
    >;

    maxAssets(overrides?: CallOverrides): Promise<BigNumber>;

    minReleaseAmount(overrides?: CallOverrides): Promise<BigNumber>;

    mintAllowed(
      vToken: string,
      minter: string,
      mintAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    mintVAIGuardianPaused(overrides?: CallOverrides): Promise<boolean>;

    mintVerify(
      vToken: string,
      minter: string,
      actualMintAmount: BigNumberish,
      mintTokens: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    mintedVAIs(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<string>;

    pauseGuardian(overrides?: CallOverrides): Promise<string>;

    pendingAdmin(overrides?: CallOverrides): Promise<string>;

    pendingComptrollerImplementation(overrides?: CallOverrides): Promise<string>;

    protocolPaused(overrides?: CallOverrides): Promise<boolean>;

    redeemAllowed(
      vToken: string,
      redeemer: string,
      redeemTokens: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    redeemVerify(
      vToken: string,
      redeemer: string,
      redeemAmount: BigNumberish,
      redeemTokens: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    releaseStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

    releaseToVault(overrides?: CallOverrides): Promise<void>;

    repayBorrowAllowed(
      vToken: string,
      payer: string,
      borrower: string,
      repayAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    repayBorrowVerify(
      vToken: string,
      payer: string,
      borrower: string,
      actualRepayAmount: BigNumberish,
      borrowerIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    repayVAIGuardianPaused(overrides?: CallOverrides): Promise<boolean>;

    seizeAllowed(
      vTokenCollateral: string,
      vTokenBorrowed: string,
      liquidator: string,
      borrower: string,
      seizeTokens: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    seizeVerify(
      vTokenCollateral: string,
      vTokenBorrowed: string,
      liquidator: string,
      borrower: string,
      seizeTokens: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setMintedVAIOf(
      owner: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    supplyCaps(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferAllowed(
      vToken: string,
      src: string,
      dst: string,
      transferTokens: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    transferVerify(
      vToken: string,
      src: string,
      dst: string,
      transferTokens: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    treasuryAddress(overrides?: CallOverrides): Promise<string>;

    treasuryGuardian(overrides?: CallOverrides): Promise<string>;

    treasuryPercent(overrides?: CallOverrides): Promise<BigNumber>;

    updateDelegate(
      delegate: string,
      allowBorrows: boolean,
      overrides?: CallOverrides,
    ): Promise<void>;

    vaiController(overrides?: CallOverrides): Promise<string>;

    vaiMintRate(overrides?: CallOverrides): Promise<BigNumber>;

    vaiVaultAddress(overrides?: CallOverrides): Promise<string>;

    venusAccrued(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    venusBorrowSpeeds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    venusBorrowState(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, number] & { index: BigNumber; block: number }>;

    venusBorrowerIndex(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    venusInitialIndex(overrides?: CallOverrides): Promise<BigNumber>;

    venusRate(overrides?: CallOverrides): Promise<BigNumber>;

    venusSpeeds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    venusSupplierIndex(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    venusSupplySpeeds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    venusSupplyState(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, number] & { index: BigNumber; block: number }>;

    venusVAIVaultRate(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    'ActionPausedMarket(address,uint8,bool)'(
      vToken?: string | null,
      action?: BigNumberish | null,
      pauseState?: null,
    ): ActionPausedMarketEventFilter;
    ActionPausedMarket(
      vToken?: string | null,
      action?: BigNumberish | null,
      pauseState?: null,
    ): ActionPausedMarketEventFilter;

    'ActionProtocolPaused(bool)'(state?: null): ActionProtocolPausedEventFilter;
    ActionProtocolPaused(state?: null): ActionProtocolPausedEventFilter;

    'DelegateUpdated(address,address,bool)'(
      borrower?: null,
      delegate?: null,
      allowDelegatedBorrows?: null,
    ): DelegateUpdatedEventFilter;
    DelegateUpdated(
      borrower?: null,
      delegate?: null,
      allowDelegatedBorrows?: null,
    ): DelegateUpdatedEventFilter;

    'DistributedBorrowerVenus(address,address,uint256,uint256)'(
      vToken?: string | null,
      borrower?: string | null,
      venusDelta?: null,
      venusBorrowIndex?: null,
    ): DistributedBorrowerVenusEventFilter;
    DistributedBorrowerVenus(
      vToken?: string | null,
      borrower?: string | null,
      venusDelta?: null,
      venusBorrowIndex?: null,
    ): DistributedBorrowerVenusEventFilter;

    'DistributedSupplierVenus(address,address,uint256,uint256)'(
      vToken?: string | null,
      supplier?: string | null,
      venusDelta?: null,
      venusSupplyIndex?: null,
    ): DistributedSupplierVenusEventFilter;
    DistributedSupplierVenus(
      vToken?: string | null,
      supplier?: string | null,
      venusDelta?: null,
      venusSupplyIndex?: null,
    ): DistributedSupplierVenusEventFilter;

    'DistributedVAIVaultVenus(uint256)'(amount?: null): DistributedVAIVaultVenusEventFilter;
    DistributedVAIVaultVenus(amount?: null): DistributedVAIVaultVenusEventFilter;

    'Failure(uint256,uint256,uint256)'(
      error?: null,
      info?: null,
      detail?: null,
    ): FailureEventFilter;
    Failure(error?: null, info?: null, detail?: null): FailureEventFilter;

    'MarketEntered(address,address)'(vToken?: null, account?: null): MarketEnteredEventFilter;
    MarketEntered(vToken?: null, account?: null): MarketEnteredEventFilter;

    'MarketExited(address,address)'(vToken?: null, account?: null): MarketExitedEventFilter;
    MarketExited(vToken?: null, account?: null): MarketExitedEventFilter;

    'MarketListed(address)'(vToken?: null): MarketListedEventFilter;
    MarketListed(vToken?: null): MarketListedEventFilter;

    'NewAccessControl(address,address)'(
      oldAccessControlAddress?: null,
      newAccessControlAddress?: null,
    ): NewAccessControlEventFilter;
    NewAccessControl(
      oldAccessControlAddress?: null,
      newAccessControlAddress?: null,
    ): NewAccessControlEventFilter;

    'NewBorrowCap(address,uint256)'(
      vToken?: string | null,
      newBorrowCap?: null,
    ): NewBorrowCapEventFilter;
    NewBorrowCap(vToken?: string | null, newBorrowCap?: null): NewBorrowCapEventFilter;

    'NewCloseFactor(uint256,uint256)'(
      oldCloseFactorMantissa?: null,
      newCloseFactorMantissa?: null,
    ): NewCloseFactorEventFilter;
    NewCloseFactor(
      oldCloseFactorMantissa?: null,
      newCloseFactorMantissa?: null,
    ): NewCloseFactorEventFilter;

    'NewCollateralFactor(address,uint256,uint256)'(
      vToken?: null,
      oldCollateralFactorMantissa?: null,
      newCollateralFactorMantissa?: null,
    ): NewCollateralFactorEventFilter;
    NewCollateralFactor(
      vToken?: null,
      oldCollateralFactorMantissa?: null,
      newCollateralFactorMantissa?: null,
    ): NewCollateralFactorEventFilter;

    'NewComptrollerLens(address,address)'(
      oldComptrollerLens?: null,
      newComptrollerLens?: null,
    ): NewComptrollerLensEventFilter;
    NewComptrollerLens(
      oldComptrollerLens?: null,
      newComptrollerLens?: null,
    ): NewComptrollerLensEventFilter;

    'NewLiquidationIncentive(uint256,uint256)'(
      oldLiquidationIncentiveMantissa?: null,
      newLiquidationIncentiveMantissa?: null,
    ): NewLiquidationIncentiveEventFilter;
    NewLiquidationIncentive(
      oldLiquidationIncentiveMantissa?: null,
      newLiquidationIncentiveMantissa?: null,
    ): NewLiquidationIncentiveEventFilter;

    'NewLiquidatorContract(address,address)'(
      oldLiquidatorContract?: null,
      newLiquidatorContract?: null,
    ): NewLiquidatorContractEventFilter;
    NewLiquidatorContract(
      oldLiquidatorContract?: null,
      newLiquidatorContract?: null,
    ): NewLiquidatorContractEventFilter;

    'NewPauseGuardian(address,address)'(
      oldPauseGuardian?: null,
      newPauseGuardian?: null,
    ): NewPauseGuardianEventFilter;
    NewPauseGuardian(oldPauseGuardian?: null, newPauseGuardian?: null): NewPauseGuardianEventFilter;

    'NewPriceOracle(address,address)'(
      oldPriceOracle?: null,
      newPriceOracle?: null,
    ): NewPriceOracleEventFilter;
    NewPriceOracle(oldPriceOracle?: null, newPriceOracle?: null): NewPriceOracleEventFilter;

    'NewSupplyCap(address,uint256)'(
      vToken?: string | null,
      newSupplyCap?: null,
    ): NewSupplyCapEventFilter;
    NewSupplyCap(vToken?: string | null, newSupplyCap?: null): NewSupplyCapEventFilter;

    'NewTreasuryAddress(address,address)'(
      oldTreasuryAddress?: null,
      newTreasuryAddress?: null,
    ): NewTreasuryAddressEventFilter;
    NewTreasuryAddress(
      oldTreasuryAddress?: null,
      newTreasuryAddress?: null,
    ): NewTreasuryAddressEventFilter;

    'NewTreasuryGuardian(address,address)'(
      oldTreasuryGuardian?: null,
      newTreasuryGuardian?: null,
    ): NewTreasuryGuardianEventFilter;
    NewTreasuryGuardian(
      oldTreasuryGuardian?: null,
      newTreasuryGuardian?: null,
    ): NewTreasuryGuardianEventFilter;

    'NewTreasuryPercent(uint256,uint256)'(
      oldTreasuryPercent?: null,
      newTreasuryPercent?: null,
    ): NewTreasuryPercentEventFilter;
    NewTreasuryPercent(
      oldTreasuryPercent?: null,
      newTreasuryPercent?: null,
    ): NewTreasuryPercentEventFilter;

    'NewVAIController(address,address)'(
      oldVAIController?: null,
      newVAIController?: null,
    ): NewVAIControllerEventFilter;
    NewVAIController(oldVAIController?: null, newVAIController?: null): NewVAIControllerEventFilter;

    'NewVAIMintRate(uint256,uint256)'(
      oldVAIMintRate?: null,
      newVAIMintRate?: null,
    ): NewVAIMintRateEventFilter;
    NewVAIMintRate(oldVAIMintRate?: null, newVAIMintRate?: null): NewVAIMintRateEventFilter;

    'NewVAIVaultInfo(address,uint256,uint256)'(
      vault_?: null,
      releaseStartBlock_?: null,
      releaseInterval_?: null,
    ): NewVAIVaultInfoEventFilter;
    NewVAIVaultInfo(
      vault_?: null,
      releaseStartBlock_?: null,
      releaseInterval_?: null,
    ): NewVAIVaultInfoEventFilter;

    'NewVenusVAIVaultRate(uint256,uint256)'(
      oldVenusVAIVaultRate?: null,
      newVenusVAIVaultRate?: null,
    ): NewVenusVAIVaultRateEventFilter;
    NewVenusVAIVaultRate(
      oldVenusVAIVaultRate?: null,
      newVenusVAIVaultRate?: null,
    ): NewVenusVAIVaultRateEventFilter;

    'VenusBorrowSpeedUpdated(address,uint256)'(
      vToken?: string | null,
      newSpeed?: null,
    ): VenusBorrowSpeedUpdatedEventFilter;
    VenusBorrowSpeedUpdated(
      vToken?: string | null,
      newSpeed?: null,
    ): VenusBorrowSpeedUpdatedEventFilter;

    'VenusGranted(address,uint256)'(recipient?: null, amount?: null): VenusGrantedEventFilter;
    VenusGranted(recipient?: null, amount?: null): VenusGrantedEventFilter;

    'VenusSupplySpeedUpdated(address,uint256)'(
      vToken?: string | null,
      newSpeed?: null,
    ): VenusSupplySpeedUpdatedEventFilter;
    VenusSupplySpeedUpdated(
      vToken?: string | null,
      newSpeed?: null,
    ): VenusSupplySpeedUpdatedEventFilter;
  };

  estimateGas: {
    _become(unitroller: string, overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    _grantXVS(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    _setAccessControl(
      newAccessControlAddress: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    _setActionsPaused(
      markets: string[],
      actions: BigNumberish[],
      paused: boolean,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    _setCloseFactor(
      newCloseFactorMantissa: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    _setCollateralFactor(
      vToken: string,
      newCollateralFactorMantissa: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    _setComptrollerLens(
      comptrollerLens_: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    _setLiquidationIncentive(
      newLiquidationIncentiveMantissa: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    _setLiquidatorContract(
      newLiquidatorContract_: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    _setMarketBorrowCaps(
      vTokens: string[],
      newBorrowCaps: BigNumberish[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    _setMarketSupplyCaps(
      vTokens: string[],
      newSupplyCaps: BigNumberish[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    _setPauseGuardian(
      newPauseGuardian: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    _setPriceOracle(
      newOracle: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    _setProtocolPaused(
      state: boolean,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    _setTreasuryData(
      newTreasuryGuardian: string,
      newTreasuryAddress: string,
      newTreasuryPercent: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    _setVAIController(
      vaiController_: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    _setVAIMintRate(
      newVAIMintRate: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    _setVAIVaultInfo(
      vault_: string,
      releaseStartBlock_: BigNumberish,
      minReleaseAmount_: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    _setVenusSpeeds(
      vTokens: string[],
      supplySpeeds: BigNumberish[],
      borrowSpeeds: BigNumberish[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    _setVenusVAIVaultRate(
      venusVAIVaultRate_: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    _supportMarket(vToken: string, overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    accountAssets(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    actionPaused(
      market: string,
      action: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    allMarkets(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    approvedDelegates(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrowAllowed(
      vToken: string,
      borrower: string,
      borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    borrowCapGuardian(overrides?: CallOverrides): Promise<BigNumber>;

    borrowCaps(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrowVerify(
      vToken: string,
      borrower: string,
      borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    checkMembership(account: string, vToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    'claimVenus(address[],address[],bool,bool,bool)'(
      holders: string[],
      vTokens: string[],
      borrowers: boolean,
      suppliers: boolean,
      collateral: boolean,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'claimVenus(address,address[])'(
      holder: string,
      vTokens: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'claimVenus(address)'(
      holder: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'claimVenus(address[],address[],bool,bool)'(
      holders: string[],
      vTokens: string[],
      borrowers: boolean,
      suppliers: boolean,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    claimVenusAsCollateral(
      holder: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    closeFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    comptrollerImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    comptrollerLens(overrides?: CallOverrides): Promise<BigNumber>;

    enterMarkets(vTokens: string[], overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    exitMarket(
      vTokenAddress: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    getAccountLiquidity(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getAllMarkets(overrides?: CallOverrides): Promise<BigNumber>;

    getAssetsIn(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getHypotheticalAccountLiquidity(
      account: string,
      vTokenModify: string,
      redeemTokens: BigNumberish,
      borrowAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getXVSAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getXVSVTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    isComptroller(overrides?: CallOverrides): Promise<BigNumber>;

    liquidateBorrowAllowed(
      vTokenBorrowed: string,
      vTokenCollateral: string,
      liquidator: string,
      borrower: string,
      repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    liquidateBorrowVerify(
      vTokenBorrowed: string,
      vTokenCollateral: string,
      liquidator: string,
      borrower: string,
      actualRepayAmount: BigNumberish,
      seizeTokens: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    liquidateCalculateSeizeTokens(
      vTokenBorrowed: string,
      vTokenCollateral: string,
      actualRepayAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    liquidateVAICalculateSeizeTokens(
      vTokenCollateral: string,
      actualRepayAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    liquidationIncentiveMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    liquidatorContract(overrides?: CallOverrides): Promise<BigNumber>;

    markets(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxAssets(overrides?: CallOverrides): Promise<BigNumber>;

    minReleaseAmount(overrides?: CallOverrides): Promise<BigNumber>;

    mintAllowed(
      vToken: string,
      minter: string,
      mintAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    mintVAIGuardianPaused(overrides?: CallOverrides): Promise<BigNumber>;

    mintVerify(
      vToken: string,
      minter: string,
      actualMintAmount: BigNumberish,
      mintTokens: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    mintedVAIs(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    pauseGuardian(overrides?: CallOverrides): Promise<BigNumber>;

    pendingAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    pendingComptrollerImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    protocolPaused(overrides?: CallOverrides): Promise<BigNumber>;

    redeemAllowed(
      vToken: string,
      redeemer: string,
      redeemTokens: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    redeemVerify(
      vToken: string,
      redeemer: string,
      redeemAmount: BigNumberish,
      redeemTokens: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    releaseStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

    releaseToVault(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    repayBorrowAllowed(
      vToken: string,
      payer: string,
      borrower: string,
      repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    repayBorrowVerify(
      vToken: string,
      payer: string,
      borrower: string,
      actualRepayAmount: BigNumberish,
      borrowerIndex: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    repayVAIGuardianPaused(overrides?: CallOverrides): Promise<BigNumber>;

    seizeAllowed(
      vTokenCollateral: string,
      vTokenBorrowed: string,
      liquidator: string,
      borrower: string,
      seizeTokens: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    seizeVerify(
      vTokenCollateral: string,
      vTokenBorrowed: string,
      liquidator: string,
      borrower: string,
      seizeTokens: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setMintedVAIOf(
      owner: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    supplyCaps(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferAllowed(
      vToken: string,
      src: string,
      dst: string,
      transferTokens: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    transferVerify(
      vToken: string,
      src: string,
      dst: string,
      transferTokens: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    treasuryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    treasuryGuardian(overrides?: CallOverrides): Promise<BigNumber>;

    treasuryPercent(overrides?: CallOverrides): Promise<BigNumber>;

    updateDelegate(
      delegate: string,
      allowBorrows: boolean,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    vaiController(overrides?: CallOverrides): Promise<BigNumber>;

    vaiMintRate(overrides?: CallOverrides): Promise<BigNumber>;

    vaiVaultAddress(overrides?: CallOverrides): Promise<BigNumber>;

    venusAccrued(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    venusBorrowSpeeds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    venusBorrowState(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    venusBorrowerIndex(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    venusInitialIndex(overrides?: CallOverrides): Promise<BigNumber>;

    venusRate(overrides?: CallOverrides): Promise<BigNumber>;

    venusSpeeds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    venusSupplierIndex(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    venusSupplySpeeds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    venusSupplyState(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    venusVAIVaultRate(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _become(
      unitroller: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    _grantXVS(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    _setAccessControl(
      newAccessControlAddress: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    _setActionsPaused(
      markets: string[],
      actions: BigNumberish[],
      paused: boolean,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    _setCloseFactor(
      newCloseFactorMantissa: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    _setCollateralFactor(
      vToken: string,
      newCollateralFactorMantissa: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    _setComptrollerLens(
      comptrollerLens_: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    _setLiquidationIncentive(
      newLiquidationIncentiveMantissa: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    _setLiquidatorContract(
      newLiquidatorContract_: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    _setMarketBorrowCaps(
      vTokens: string[],
      newBorrowCaps: BigNumberish[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    _setMarketSupplyCaps(
      vTokens: string[],
      newSupplyCaps: BigNumberish[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    _setPauseGuardian(
      newPauseGuardian: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    _setPriceOracle(
      newOracle: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    _setProtocolPaused(
      state: boolean,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    _setTreasuryData(
      newTreasuryGuardian: string,
      newTreasuryAddress: string,
      newTreasuryPercent: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    _setVAIController(
      vaiController_: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    _setVAIMintRate(
      newVAIMintRate: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    _setVAIVaultInfo(
      vault_: string,
      releaseStartBlock_: BigNumberish,
      minReleaseAmount_: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    _setVenusSpeeds(
      vTokens: string[],
      supplySpeeds: BigNumberish[],
      borrowSpeeds: BigNumberish[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    _setVenusVAIVaultRate(
      venusVAIVaultRate_: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    _supportMarket(
      vToken: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    accountAssets(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    actionPaused(
      market: string,
      action: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allMarkets(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approvedDelegates(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    borrowAllowed(
      vToken: string,
      borrower: string,
      borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    borrowCapGuardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowCaps(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowVerify(
      vToken: string,
      borrower: string,
      borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    checkMembership(
      account: string,
      vToken: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'claimVenus(address[],address[],bool,bool,bool)'(
      holders: string[],
      vTokens: string[],
      borrowers: boolean,
      suppliers: boolean,
      collateral: boolean,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'claimVenus(address,address[])'(
      holder: string,
      vTokens: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'claimVenus(address)'(
      holder: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'claimVenus(address[],address[],bool,bool)'(
      holders: string[],
      vTokens: string[],
      borrowers: boolean,
      suppliers: boolean,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    claimVenusAsCollateral(
      holder: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    closeFactorMantissa(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    comptrollerImplementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    comptrollerLens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enterMarkets(
      vTokens: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    exitMarket(
      vTokenAddress: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    getAccountLiquidity(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllMarkets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAssetsIn(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getHypotheticalAccountLiquidity(
      account: string,
      vTokenModify: string,
      redeemTokens: BigNumberish,
      borrowAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getXVSAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getXVSVTokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isComptroller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidateBorrowAllowed(
      vTokenBorrowed: string,
      vTokenCollateral: string,
      liquidator: string,
      borrower: string,
      repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    liquidateBorrowVerify(
      vTokenBorrowed: string,
      vTokenCollateral: string,
      liquidator: string,
      borrower: string,
      actualRepayAmount: BigNumberish,
      seizeTokens: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    liquidateCalculateSeizeTokens(
      vTokenBorrowed: string,
      vTokenCollateral: string,
      actualRepayAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    liquidateVAICalculateSeizeTokens(
      vTokenCollateral: string,
      actualRepayAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    liquidationIncentiveMantissa(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidatorContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    markets(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minReleaseAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintAllowed(
      vToken: string,
      minter: string,
      mintAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    mintVAIGuardianPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintVerify(
      vToken: string,
      minter: string,
      actualMintAmount: BigNumberish,
      mintTokens: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    mintedVAIs(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseGuardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingComptrollerImplementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemAllowed(
      vToken: string,
      redeemer: string,
      redeemTokens: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    redeemVerify(
      vToken: string,
      redeemer: string,
      redeemAmount: BigNumberish,
      redeemTokens: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    releaseStartBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    releaseToVault(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    repayBorrowAllowed(
      vToken: string,
      payer: string,
      borrower: string,
      repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    repayBorrowVerify(
      vToken: string,
      payer: string,
      borrower: string,
      actualRepayAmount: BigNumberish,
      borrowerIndex: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    repayVAIGuardianPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seizeAllowed(
      vTokenCollateral: string,
      vTokenBorrowed: string,
      liquidator: string,
      borrower: string,
      seizeTokens: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    seizeVerify(
      vTokenCollateral: string,
      vTokenBorrowed: string,
      liquidator: string,
      borrower: string,
      seizeTokens: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setMintedVAIOf(
      owner: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    supplyCaps(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferAllowed(
      vToken: string,
      src: string,
      dst: string,
      transferTokens: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    transferVerify(
      vToken: string,
      src: string,
      dst: string,
      transferTokens: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    treasuryAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasuryGuardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasuryPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateDelegate(
      delegate: string,
      allowBorrows: boolean,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    vaiController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaiMintRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaiVaultAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    venusAccrued(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    venusBorrowSpeeds(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    venusBorrowState(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    venusBorrowerIndex(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    venusInitialIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    venusRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    venusSpeeds(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    venusSupplierIndex(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    venusSupplySpeeds(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    venusSupplyState(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    venusVAIVaultRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
