/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { EventFragment, FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type { OnEvent, TypedEvent, TypedEventFilter, TypedListener } from './common';

export declare namespace XVSVaultStorageV1 {
  export type WithdrawalRequestStruct = {
    amount: BigNumberish;
    lockedUntil: BigNumberish;
    afterUpgrade: BigNumberish;
  };

  export type WithdrawalRequestStructOutput = [BigNumber, BigNumber, BigNumber] & {
    amount: BigNumber;
    lockedUntil: BigNumber;
    afterUpgrade: BigNumber;
  };
}

export interface XvsVaultInterface extends utils.Interface {
  functions: {
    'DELEGATION_TYPEHASH()': FunctionFragment;
    'DOMAIN_TYPEHASH()': FunctionFragment;
    'MAX_LOCK_PERIOD()': FunctionFragment;
    '_become(address)': FunctionFragment;
    'accessControlManager()': FunctionFragment;
    'add(address,uint256,address,uint256,uint256)': FunctionFragment;
    'admin()': FunctionFragment;
    'checkpoints(address,uint32)': FunctionFragment;
    'claim(address,address,uint256)': FunctionFragment;
    'delegate(address)': FunctionFragment;
    'delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment;
    'delegates(address)': FunctionFragment;
    'deposit(address,uint256,uint256)': FunctionFragment;
    'executeWithdrawal(address,uint256)': FunctionFragment;
    'getCurrentVotes(address)': FunctionFragment;
    'getEligibleWithdrawalAmount(address,uint256,address)': FunctionFragment;
    'getPriorVotes(address,uint256)': FunctionFragment;
    'getRequestedAmount(address,uint256,address)': FunctionFragment;
    'getUserInfo(address,uint256,address)': FunctionFragment;
    'getWithdrawalRequests(address,uint256,address)': FunctionFragment;
    'implementation()': FunctionFragment;
    'isStakedToken(address)': FunctionFragment;
    'nonces(address)': FunctionFragment;
    'numCheckpoints(address)': FunctionFragment;
    'pause()': FunctionFragment;
    'pendingAdmin()': FunctionFragment;
    'pendingReward(address,uint256,address)': FunctionFragment;
    'pendingRewardTransfers(address,address)': FunctionFragment;
    'pendingWithdrawalsBeforeUpgrade(address,uint256,address)': FunctionFragment;
    'pendingXVSVaultImplementation()': FunctionFragment;
    'poolInfos(address,uint256)': FunctionFragment;
    'poolLength(address)': FunctionFragment;
    'requestWithdrawal(address,uint256,uint256)': FunctionFragment;
    'resume()': FunctionFragment;
    'rewardTokenAmountsPerBlock(address)': FunctionFragment;
    'set(address,uint256,uint256)': FunctionFragment;
    'setAccessControl(address)': FunctionFragment;
    'setRewardAmountPerBlock(address,uint256)': FunctionFragment;
    'setWithdrawalLockingPeriod(address,uint256,uint256)': FunctionFragment;
    'setXvsStore(address,address)': FunctionFragment;
    'totalAllocPoints(address)': FunctionFragment;
    'updatePool(address,uint256)': FunctionFragment;
    'vaultPaused()': FunctionFragment;
    'xvsAddress()': FunctionFragment;
    'xvsStore()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'DELEGATION_TYPEHASH'
      | 'DOMAIN_TYPEHASH'
      | 'MAX_LOCK_PERIOD'
      | '_become'
      | 'accessControlManager'
      | 'add'
      | 'admin'
      | 'checkpoints'
      | 'claim'
      | 'delegate'
      | 'delegateBySig'
      | 'delegates'
      | 'deposit'
      | 'executeWithdrawal'
      | 'getCurrentVotes'
      | 'getEligibleWithdrawalAmount'
      | 'getPriorVotes'
      | 'getRequestedAmount'
      | 'getUserInfo'
      | 'getWithdrawalRequests'
      | 'implementation'
      | 'isStakedToken'
      | 'nonces'
      | 'numCheckpoints'
      | 'pause'
      | 'pendingAdmin'
      | 'pendingReward'
      | 'pendingRewardTransfers'
      | 'pendingWithdrawalsBeforeUpgrade'
      | 'pendingXVSVaultImplementation'
      | 'poolInfos'
      | 'poolLength'
      | 'requestWithdrawal'
      | 'resume'
      | 'rewardTokenAmountsPerBlock'
      | 'set'
      | 'setAccessControl'
      | 'setRewardAmountPerBlock'
      | 'setWithdrawalLockingPeriod'
      | 'setXvsStore'
      | 'totalAllocPoints'
      | 'updatePool'
      | 'vaultPaused'
      | 'xvsAddress'
      | 'xvsStore',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'DELEGATION_TYPEHASH', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DOMAIN_TYPEHASH', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_LOCK_PERIOD', values?: undefined): string;
  encodeFunctionData(functionFragment: '_become', values: [string]): string;
  encodeFunctionData(functionFragment: 'accessControlManager', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'add',
    values: [string, BigNumberish, string, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'admin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'checkpoints', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'claim', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'delegate', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'delegateBySig',
    values: [string, BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'delegates', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [string, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'executeWithdrawal', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getCurrentVotes', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'getEligibleWithdrawalAmount',
    values: [string, BigNumberish, string],
  ): string;
  encodeFunctionData(functionFragment: 'getPriorVotes', values: [string, BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'getRequestedAmount',
    values: [string, BigNumberish, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getUserInfo',
    values: [string, BigNumberish, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getWithdrawalRequests',
    values: [string, BigNumberish, string],
  ): string;
  encodeFunctionData(functionFragment: 'implementation', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isStakedToken', values: [string]): string;
  encodeFunctionData(functionFragment: 'nonces', values: [string]): string;
  encodeFunctionData(functionFragment: 'numCheckpoints', values: [string]): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingAdmin', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'pendingReward',
    values: [string, BigNumberish, string],
  ): string;
  encodeFunctionData(functionFragment: 'pendingRewardTransfers', values: [string, string]): string;
  encodeFunctionData(
    functionFragment: 'pendingWithdrawalsBeforeUpgrade',
    values: [string, BigNumberish, string],
  ): string;
  encodeFunctionData(functionFragment: 'pendingXVSVaultImplementation', values?: undefined): string;
  encodeFunctionData(functionFragment: 'poolInfos', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'poolLength', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'requestWithdrawal',
    values: [string, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'resume', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardTokenAmountsPerBlock', values: [string]): string;
  encodeFunctionData(functionFragment: 'set', values: [string, BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setAccessControl', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'setRewardAmountPerBlock',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setWithdrawalLockingPeriod',
    values: [string, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'setXvsStore', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'totalAllocPoints', values: [string]): string;
  encodeFunctionData(functionFragment: 'updatePool', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'vaultPaused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'xvsAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'xvsStore', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'DELEGATION_TYPEHASH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DOMAIN_TYPEHASH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_LOCK_PERIOD', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_become', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accessControlManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'add', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'admin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'checkpoints', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claim', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'delegate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'delegateBySig', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'delegates', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'executeWithdrawal', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCurrentVotes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getEligibleWithdrawalAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPriorVotes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRequestedAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getWithdrawalRequests', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'implementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isStakedToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nonces', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'numCheckpoints', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingRewardTransfers', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'pendingWithdrawalsBeforeUpgrade',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'pendingXVSVaultImplementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolInfos', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'requestWithdrawal', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'resume', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardTokenAmountsPerBlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'set', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAccessControl', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRewardAmountPerBlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setWithdrawalLockingPeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setXvsStore', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalAllocPoints', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updatePool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vaultPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'xvsAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'xvsStore', data: BytesLike): Result;

  events: {
    'Claim(address,address,uint256,uint256)': EventFragment;
    'DelegateChangedV2(address,address,address)': EventFragment;
    'DelegateVotesChangedV2(address,uint256,uint256)': EventFragment;
    'Deposit(address,address,uint256,uint256)': EventFragment;
    'ExecutedWithdrawal(address,address,uint256,uint256)': EventFragment;
    'NewAccessControlManager(address,address)': EventFragment;
    'PoolAdded(address,uint256,address,uint256,uint256,uint256)': EventFragment;
    'PoolUpdated(address,uint256,uint256,uint256)': EventFragment;
    'RequestedWithdrawal(address,address,uint256,uint256)': EventFragment;
    'RewardAmountUpdated(address,uint256,uint256)': EventFragment;
    'StoreUpdated(address,address,address,address)': EventFragment;
    'VaultDebtUpdated(address,address,uint256,uint256)': EventFragment;
    'VaultPaused(address)': EventFragment;
    'VaultResumed(address)': EventFragment;
    'WithdrawalLockingPeriodUpdated(address,uint256,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Claim'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DelegateChangedV2'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DelegateVotesChangedV2'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ExecutedWithdrawal'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewAccessControlManager'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RequestedWithdrawal'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardAmountUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StoreUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VaultDebtUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VaultPaused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VaultResumed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WithdrawalLockingPeriodUpdated'): EventFragment;
}

export interface ClaimEventObject {
  user: string;
  rewardToken: string;
  pid: BigNumber;
  amount: BigNumber;
}
export type ClaimEvent = TypedEvent<[string, string, BigNumber, BigNumber], ClaimEventObject>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export interface DelegateChangedV2EventObject {
  delegator: string;
  fromDelegate: string;
  toDelegate: string;
}
export type DelegateChangedV2Event = TypedEvent<
  [string, string, string],
  DelegateChangedV2EventObject
>;

export type DelegateChangedV2EventFilter = TypedEventFilter<DelegateChangedV2Event>;

export interface DelegateVotesChangedV2EventObject {
  delegate: string;
  previousBalance: BigNumber;
  newBalance: BigNumber;
}
export type DelegateVotesChangedV2Event = TypedEvent<
  [string, BigNumber, BigNumber],
  DelegateVotesChangedV2EventObject
>;

export type DelegateVotesChangedV2EventFilter = TypedEventFilter<DelegateVotesChangedV2Event>;

export interface DepositEventObject {
  user: string;
  rewardToken: string;
  pid: BigNumber;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<[string, string, BigNumber, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface ExecutedWithdrawalEventObject {
  user: string;
  rewardToken: string;
  pid: BigNumber;
  amount: BigNumber;
}
export type ExecutedWithdrawalEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  ExecutedWithdrawalEventObject
>;

export type ExecutedWithdrawalEventFilter = TypedEventFilter<ExecutedWithdrawalEvent>;

export interface NewAccessControlManagerEventObject {
  oldAccessControlManager: string;
  newAccessControlManager: string;
}
export type NewAccessControlManagerEvent = TypedEvent<
  [string, string],
  NewAccessControlManagerEventObject
>;

export type NewAccessControlManagerEventFilter = TypedEventFilter<NewAccessControlManagerEvent>;

export interface PoolAddedEventObject {
  rewardToken: string;
  pid: BigNumber;
  token: string;
  allocPoints: BigNumber;
  rewardPerBlock: BigNumber;
  lockPeriod: BigNumber;
}
export type PoolAddedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, BigNumber, BigNumber],
  PoolAddedEventObject
>;

export type PoolAddedEventFilter = TypedEventFilter<PoolAddedEvent>;

export interface PoolUpdatedEventObject {
  rewardToken: string;
  pid: BigNumber;
  oldAllocPoints: BigNumber;
  newAllocPoints: BigNumber;
}
export type PoolUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  PoolUpdatedEventObject
>;

export type PoolUpdatedEventFilter = TypedEventFilter<PoolUpdatedEvent>;

export interface RequestedWithdrawalEventObject {
  user: string;
  rewardToken: string;
  pid: BigNumber;
  amount: BigNumber;
}
export type RequestedWithdrawalEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  RequestedWithdrawalEventObject
>;

export type RequestedWithdrawalEventFilter = TypedEventFilter<RequestedWithdrawalEvent>;

export interface RewardAmountUpdatedEventObject {
  rewardToken: string;
  oldReward: BigNumber;
  newReward: BigNumber;
}
export type RewardAmountUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  RewardAmountUpdatedEventObject
>;

export type RewardAmountUpdatedEventFilter = TypedEventFilter<RewardAmountUpdatedEvent>;

export interface StoreUpdatedEventObject {
  oldXvs: string;
  oldStore: string;
  newXvs: string;
  newStore: string;
}
export type StoreUpdatedEvent = TypedEvent<
  [string, string, string, string],
  StoreUpdatedEventObject
>;

export type StoreUpdatedEventFilter = TypedEventFilter<StoreUpdatedEvent>;

export interface VaultDebtUpdatedEventObject {
  rewardToken: string;
  userAddress: string;
  oldOwedAmount: BigNumber;
  newOwedAmount: BigNumber;
}
export type VaultDebtUpdatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  VaultDebtUpdatedEventObject
>;

export type VaultDebtUpdatedEventFilter = TypedEventFilter<VaultDebtUpdatedEvent>;

export interface VaultPausedEventObject {
  admin: string;
}
export type VaultPausedEvent = TypedEvent<[string], VaultPausedEventObject>;

export type VaultPausedEventFilter = TypedEventFilter<VaultPausedEvent>;

export interface VaultResumedEventObject {
  admin: string;
}
export type VaultResumedEvent = TypedEvent<[string], VaultResumedEventObject>;

export type VaultResumedEventFilter = TypedEventFilter<VaultResumedEvent>;

export interface WithdrawalLockingPeriodUpdatedEventObject {
  rewardToken: string;
  pid: BigNumber;
  oldPeriod: BigNumber;
  newPeriod: BigNumber;
}
export type WithdrawalLockingPeriodUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  WithdrawalLockingPeriodUpdatedEventObject
>;

export type WithdrawalLockingPeriodUpdatedEventFilter =
  TypedEventFilter<WithdrawalLockingPeriodUpdatedEvent>;

export interface XvsVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: XvsVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    MAX_LOCK_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    _become(
      xvsVaultProxy: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    accessControlManager(overrides?: CallOverrides): Promise<[string]>;

    add(
      _rewardToken: string,
      _allocPoint: BigNumberish,
      _token: string,
      _rewardPerBlock: BigNumberish,
      _lockPeriod: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    checkpoints(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[number, BigNumber] & { fromBlock: number; votes: BigNumber }>;

    claim(
      _account: string,
      _rewardToken: string,
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    delegate(
      delegatee: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    delegates(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    deposit(
      _rewardToken: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    executeWithdrawal(
      _rewardToken: string,
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    getCurrentVotes(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getEligibleWithdrawalAmount(
      _rewardToken: string,
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { withdrawalAmount: BigNumber }>;

    getPriorVotes(
      account: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getRequestedAmount(
      _rewardToken: string,
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getUserInfo(
      _rewardToken: string,
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        pendingWithdrawals: BigNumber;
      }
    >;

    getWithdrawalRequests(
      _rewardToken: string,
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides,
    ): Promise<[XVSVaultStorageV1.WithdrawalRequestStructOutput[]]>;

    implementation(overrides?: CallOverrides): Promise<[string]>;

    isStakedToken(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    numCheckpoints(arg0: string, overrides?: CallOverrides): Promise<[number]>;

    pause(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    pendingAdmin(overrides?: CallOverrides): Promise<[string]>;

    pendingReward(
      _rewardToken: string,
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    pendingRewardTransfers(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    pendingWithdrawalsBeforeUpgrade(
      _rewardToken: string,
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { beforeUpgradeWithdrawalAmount: BigNumber }>;

    pendingXVSVaultImplementation(overrides?: CallOverrides): Promise<[string]>;

    poolInfos(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        token: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accRewardPerShare: BigNumber;
        lockPeriod: BigNumber;
      }
    >;

    poolLength(rewardToken: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    requestWithdrawal(
      _rewardToken: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    resume(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    rewardTokenAmountsPerBlock(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    set(
      _rewardToken: string,
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setAccessControl(
      newAccessControlAddress: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setRewardAmountPerBlock(
      _rewardToken: string,
      _rewardAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setWithdrawalLockingPeriod(
      _rewardToken: string,
      _pid: BigNumberish,
      _newPeriod: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setXvsStore(
      _xvs: string,
      _xvsStore: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    totalAllocPoints(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    updatePool(
      _rewardToken: string,
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    vaultPaused(overrides?: CallOverrides): Promise<[boolean]>;

    xvsAddress(overrides?: CallOverrides): Promise<[string]>;

    xvsStore(overrides?: CallOverrides): Promise<[string]>;
  };

  DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  MAX_LOCK_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  _become(
    xvsVaultProxy: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  accessControlManager(overrides?: CallOverrides): Promise<string>;

  add(
    _rewardToken: string,
    _allocPoint: BigNumberish,
    _token: string,
    _rewardPerBlock: BigNumberish,
    _lockPeriod: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  checkpoints(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<[number, BigNumber] & { fromBlock: number; votes: BigNumber }>;

  claim(
    _account: string,
    _rewardToken: string,
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  delegate(
    delegatee: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  delegateBySig(
    delegatee: string,
    nonce: BigNumberish,
    expiry: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  delegates(arg0: string, overrides?: CallOverrides): Promise<string>;

  deposit(
    _rewardToken: string,
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  executeWithdrawal(
    _rewardToken: string,
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  getCurrentVotes(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  getEligibleWithdrawalAmount(
    _rewardToken: string,
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getPriorVotes(
    account: string,
    blockNumber: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getRequestedAmount(
    _rewardToken: string,
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getUserInfo(
    _rewardToken: string,
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      rewardDebt: BigNumber;
      pendingWithdrawals: BigNumber;
    }
  >;

  getWithdrawalRequests(
    _rewardToken: string,
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides,
  ): Promise<XVSVaultStorageV1.WithdrawalRequestStructOutput[]>;

  implementation(overrides?: CallOverrides): Promise<string>;

  isStakedToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  numCheckpoints(arg0: string, overrides?: CallOverrides): Promise<number>;

  pause(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  pendingAdmin(overrides?: CallOverrides): Promise<string>;

  pendingReward(
    _rewardToken: string,
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  pendingRewardTransfers(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

  pendingWithdrawalsBeforeUpgrade(
    _rewardToken: string,
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  pendingXVSVaultImplementation(overrides?: CallOverrides): Promise<string>;

  poolInfos(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      token: string;
      allocPoint: BigNumber;
      lastRewardBlock: BigNumber;
      accRewardPerShare: BigNumber;
      lockPeriod: BigNumber;
    }
  >;

  poolLength(rewardToken: string, overrides?: CallOverrides): Promise<BigNumber>;

  requestWithdrawal(
    _rewardToken: string,
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  resume(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  rewardTokenAmountsPerBlock(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  set(
    _rewardToken: string,
    _pid: BigNumberish,
    _allocPoint: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setAccessControl(
    newAccessControlAddress: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setRewardAmountPerBlock(
    _rewardToken: string,
    _rewardAmount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setWithdrawalLockingPeriod(
    _rewardToken: string,
    _pid: BigNumberish,
    _newPeriod: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setXvsStore(
    _xvs: string,
    _xvsStore: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  totalAllocPoints(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  updatePool(
    _rewardToken: string,
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  vaultPaused(overrides?: CallOverrides): Promise<boolean>;

  xvsAddress(overrides?: CallOverrides): Promise<string>;

  xvsStore(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    MAX_LOCK_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    _become(xvsVaultProxy: string, overrides?: CallOverrides): Promise<void>;

    accessControlManager(overrides?: CallOverrides): Promise<string>;

    add(
      _rewardToken: string,
      _allocPoint: BigNumberish,
      _token: string,
      _rewardPerBlock: BigNumberish,
      _lockPeriod: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    checkpoints(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[number, BigNumber] & { fromBlock: number; votes: BigNumber }>;

    claim(
      _account: string,
      _rewardToken: string,
      _pid: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    delegate(delegatee: string, overrides?: CallOverrides): Promise<void>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    delegates(arg0: string, overrides?: CallOverrides): Promise<string>;

    deposit(
      _rewardToken: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    executeWithdrawal(
      _rewardToken: string,
      _pid: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    getCurrentVotes(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getEligibleWithdrawalAmount(
      _rewardToken: string,
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPriorVotes(
      account: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRequestedAmount(
      _rewardToken: string,
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getUserInfo(
      _rewardToken: string,
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        pendingWithdrawals: BigNumber;
      }
    >;

    getWithdrawalRequests(
      _rewardToken: string,
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides,
    ): Promise<XVSVaultStorageV1.WithdrawalRequestStructOutput[]>;

    implementation(overrides?: CallOverrides): Promise<string>;

    isStakedToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    numCheckpoints(arg0: string, overrides?: CallOverrides): Promise<number>;

    pause(overrides?: CallOverrides): Promise<void>;

    pendingAdmin(overrides?: CallOverrides): Promise<string>;

    pendingReward(
      _rewardToken: string,
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    pendingRewardTransfers(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    pendingWithdrawalsBeforeUpgrade(
      _rewardToken: string,
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    pendingXVSVaultImplementation(overrides?: CallOverrides): Promise<string>;

    poolInfos(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        token: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accRewardPerShare: BigNumber;
        lockPeriod: BigNumber;
      }
    >;

    poolLength(rewardToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    requestWithdrawal(
      _rewardToken: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    resume(overrides?: CallOverrides): Promise<void>;

    rewardTokenAmountsPerBlock(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    set(
      _rewardToken: string,
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setAccessControl(newAccessControlAddress: string, overrides?: CallOverrides): Promise<void>;

    setRewardAmountPerBlock(
      _rewardToken: string,
      _rewardAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setWithdrawalLockingPeriod(
      _rewardToken: string,
      _pid: BigNumberish,
      _newPeriod: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setXvsStore(_xvs: string, _xvsStore: string, overrides?: CallOverrides): Promise<void>;

    totalAllocPoints(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    updatePool(_rewardToken: string, _pid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    vaultPaused(overrides?: CallOverrides): Promise<boolean>;

    xvsAddress(overrides?: CallOverrides): Promise<string>;

    xvsStore(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'Claim(address,address,uint256,uint256)'(
      user?: string | null,
      rewardToken?: string | null,
      pid?: BigNumberish | null,
      amount?: null,
    ): ClaimEventFilter;
    Claim(
      user?: string | null,
      rewardToken?: string | null,
      pid?: BigNumberish | null,
      amount?: null,
    ): ClaimEventFilter;

    'DelegateChangedV2(address,address,address)'(
      delegator?: string | null,
      fromDelegate?: string | null,
      toDelegate?: string | null,
    ): DelegateChangedV2EventFilter;
    DelegateChangedV2(
      delegator?: string | null,
      fromDelegate?: string | null,
      toDelegate?: string | null,
    ): DelegateChangedV2EventFilter;

    'DelegateVotesChangedV2(address,uint256,uint256)'(
      delegate?: string | null,
      previousBalance?: null,
      newBalance?: null,
    ): DelegateVotesChangedV2EventFilter;
    DelegateVotesChangedV2(
      delegate?: string | null,
      previousBalance?: null,
      newBalance?: null,
    ): DelegateVotesChangedV2EventFilter;

    'Deposit(address,address,uint256,uint256)'(
      user?: string | null,
      rewardToken?: string | null,
      pid?: BigNumberish | null,
      amount?: null,
    ): DepositEventFilter;
    Deposit(
      user?: string | null,
      rewardToken?: string | null,
      pid?: BigNumberish | null,
      amount?: null,
    ): DepositEventFilter;

    'ExecutedWithdrawal(address,address,uint256,uint256)'(
      user?: string | null,
      rewardToken?: string | null,
      pid?: BigNumberish | null,
      amount?: null,
    ): ExecutedWithdrawalEventFilter;
    ExecutedWithdrawal(
      user?: string | null,
      rewardToken?: string | null,
      pid?: BigNumberish | null,
      amount?: null,
    ): ExecutedWithdrawalEventFilter;

    'NewAccessControlManager(address,address)'(
      oldAccessControlManager?: null,
      newAccessControlManager?: null,
    ): NewAccessControlManagerEventFilter;
    NewAccessControlManager(
      oldAccessControlManager?: null,
      newAccessControlManager?: null,
    ): NewAccessControlManagerEventFilter;

    'PoolAdded(address,uint256,address,uint256,uint256,uint256)'(
      rewardToken?: string | null,
      pid?: BigNumberish | null,
      token?: string | null,
      allocPoints?: null,
      rewardPerBlock?: null,
      lockPeriod?: null,
    ): PoolAddedEventFilter;
    PoolAdded(
      rewardToken?: string | null,
      pid?: BigNumberish | null,
      token?: string | null,
      allocPoints?: null,
      rewardPerBlock?: null,
      lockPeriod?: null,
    ): PoolAddedEventFilter;

    'PoolUpdated(address,uint256,uint256,uint256)'(
      rewardToken?: string | null,
      pid?: BigNumberish | null,
      oldAllocPoints?: null,
      newAllocPoints?: null,
    ): PoolUpdatedEventFilter;
    PoolUpdated(
      rewardToken?: string | null,
      pid?: BigNumberish | null,
      oldAllocPoints?: null,
      newAllocPoints?: null,
    ): PoolUpdatedEventFilter;

    'RequestedWithdrawal(address,address,uint256,uint256)'(
      user?: string | null,
      rewardToken?: string | null,
      pid?: BigNumberish | null,
      amount?: null,
    ): RequestedWithdrawalEventFilter;
    RequestedWithdrawal(
      user?: string | null,
      rewardToken?: string | null,
      pid?: BigNumberish | null,
      amount?: null,
    ): RequestedWithdrawalEventFilter;

    'RewardAmountUpdated(address,uint256,uint256)'(
      rewardToken?: string | null,
      oldReward?: null,
      newReward?: null,
    ): RewardAmountUpdatedEventFilter;
    RewardAmountUpdated(
      rewardToken?: string | null,
      oldReward?: null,
      newReward?: null,
    ): RewardAmountUpdatedEventFilter;

    'StoreUpdated(address,address,address,address)'(
      oldXvs?: null,
      oldStore?: null,
      newXvs?: null,
      newStore?: null,
    ): StoreUpdatedEventFilter;
    StoreUpdated(
      oldXvs?: null,
      oldStore?: null,
      newXvs?: null,
      newStore?: null,
    ): StoreUpdatedEventFilter;

    'VaultDebtUpdated(address,address,uint256,uint256)'(
      rewardToken?: string | null,
      userAddress?: string | null,
      oldOwedAmount?: null,
      newOwedAmount?: null,
    ): VaultDebtUpdatedEventFilter;
    VaultDebtUpdated(
      rewardToken?: string | null,
      userAddress?: string | null,
      oldOwedAmount?: null,
      newOwedAmount?: null,
    ): VaultDebtUpdatedEventFilter;

    'VaultPaused(address)'(admin?: string | null): VaultPausedEventFilter;
    VaultPaused(admin?: string | null): VaultPausedEventFilter;

    'VaultResumed(address)'(admin?: string | null): VaultResumedEventFilter;
    VaultResumed(admin?: string | null): VaultResumedEventFilter;

    'WithdrawalLockingPeriodUpdated(address,uint256,uint256,uint256)'(
      rewardToken?: string | null,
      pid?: BigNumberish | null,
      oldPeriod?: null,
      newPeriod?: null,
    ): WithdrawalLockingPeriodUpdatedEventFilter;
    WithdrawalLockingPeriodUpdated(
      rewardToken?: string | null,
      pid?: BigNumberish | null,
      oldPeriod?: null,
      newPeriod?: null,
    ): WithdrawalLockingPeriodUpdatedEventFilter;
  };

  estimateGas: {
    DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_LOCK_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    _become(xvsVaultProxy: string, overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    accessControlManager(overrides?: CallOverrides): Promise<BigNumber>;

    add(
      _rewardToken: string,
      _allocPoint: BigNumberish,
      _token: string,
      _rewardPerBlock: BigNumberish,
      _lockPeriod: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    checkpoints(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      _account: string,
      _rewardToken: string,
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    delegate(delegatee: string, overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    delegates(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _rewardToken: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    executeWithdrawal(
      _rewardToken: string,
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    getCurrentVotes(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getEligibleWithdrawalAmount(
      _rewardToken: string,
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPriorVotes(
      account: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRequestedAmount(
      _rewardToken: string,
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getUserInfo(
      _rewardToken: string,
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getWithdrawalRequests(
      _rewardToken: string,
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    implementation(overrides?: CallOverrides): Promise<BigNumber>;

    isStakedToken(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    numCheckpoints(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    pendingAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    pendingReward(
      _rewardToken: string,
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    pendingRewardTransfers(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    pendingWithdrawalsBeforeUpgrade(
      _rewardToken: string,
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    pendingXVSVaultImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    poolInfos(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    poolLength(rewardToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    requestWithdrawal(
      _rewardToken: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    resume(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    rewardTokenAmountsPerBlock(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    set(
      _rewardToken: string,
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setAccessControl(
      newAccessControlAddress: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setRewardAmountPerBlock(
      _rewardToken: string,
      _rewardAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setWithdrawalLockingPeriod(
      _rewardToken: string,
      _pid: BigNumberish,
      _newPeriod: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setXvsStore(
      _xvs: string,
      _xvsStore: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    totalAllocPoints(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    updatePool(
      _rewardToken: string,
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    vaultPaused(overrides?: CallOverrides): Promise<BigNumber>;

    xvsAddress(overrides?: CallOverrides): Promise<BigNumber>;

    xvsStore(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_LOCK_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _become(
      xvsVaultProxy: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    accessControlManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    add(
      _rewardToken: string,
      _allocPoint: BigNumberish,
      _token: string,
      _rewardPerBlock: BigNumberish,
      _lockPeriod: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkpoints(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    claim(
      _account: string,
      _rewardToken: string,
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    delegate(
      delegatee: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    delegates(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _rewardToken: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    executeWithdrawal(
      _rewardToken: string,
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    getCurrentVotes(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEligibleWithdrawalAmount(
      _rewardToken: string,
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getPriorVotes(
      account: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRequestedAmount(
      _rewardToken: string,
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getUserInfo(
      _rewardToken: string,
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getWithdrawalRequests(
      _rewardToken: string,
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isStakedToken(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numCheckpoints(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    pendingAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingReward(
      _rewardToken: string,
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    pendingRewardTransfers(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    pendingWithdrawalsBeforeUpgrade(
      _rewardToken: string,
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    pendingXVSVaultImplementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolInfos(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    poolLength(rewardToken: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requestWithdrawal(
      _rewardToken: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    resume(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    rewardTokenAmountsPerBlock(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    set(
      _rewardToken: string,
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setAccessControl(
      newAccessControlAddress: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setRewardAmountPerBlock(
      _rewardToken: string,
      _rewardAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setWithdrawalLockingPeriod(
      _rewardToken: string,
      _pid: BigNumberish,
      _newPeriod: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setXvsStore(
      _xvs: string,
      _xvsStore: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    totalAllocPoints(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updatePool(
      _rewardToken: string,
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    vaultPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    xvsAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    xvsStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
