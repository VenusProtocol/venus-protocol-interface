/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { EventFragment, FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type { OnEvent, TypedEvent, TypedEventFilter, TypedListener } from './common';

export declare namespace ExponentialNoError {
  export type ExpStruct = { mantissa: BigNumberish };

  export type ExpStructOutput = [BigNumber] & { mantissa: BigNumber };
}

export interface RewardsDistributorInterface extends utils.Interface {
  functions: {
    'INITIAL_INDEX()': FunctionFragment;
    'acceptOwnership()': FunctionFragment;
    'accessControlManager()': FunctionFragment;
    'claimRewardToken(address,address[])': FunctionFragment;
    'claimRewardToken(address)': FunctionFragment;
    'distributeBorrowerRewardToken(address,address,(uint256))': FunctionFragment;
    'distributeSupplierRewardToken(address,address)': FunctionFragment;
    'getBlockNumber()': FunctionFragment;
    'grantRewardToken(address,uint256)': FunctionFragment;
    'initialize(address,address,uint256,address)': FunctionFragment;
    'initializeMarket(address)': FunctionFragment;
    'lastContributorBlock(address)': FunctionFragment;
    'maxLoopsLimit()': FunctionFragment;
    'owner()': FunctionFragment;
    'pendingOwner()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'rewardToken()': FunctionFragment;
    'rewardTokenAccrued(address)': FunctionFragment;
    'rewardTokenBorrowSpeeds(address)': FunctionFragment;
    'rewardTokenBorrowState(address)': FunctionFragment;
    'rewardTokenBorrowerIndex(address,address)': FunctionFragment;
    'rewardTokenContributorSpeeds(address)': FunctionFragment;
    'rewardTokenSupplierIndex(address,address)': FunctionFragment;
    'rewardTokenSupplySpeeds(address)': FunctionFragment;
    'rewardTokenSupplyState(address)': FunctionFragment;
    'setAccessControlManager(address)': FunctionFragment;
    'setContributorRewardTokenSpeed(address,uint256)': FunctionFragment;
    'setLastRewardingBlocks(address[],uint32[],uint32[])': FunctionFragment;
    'setMaxLoopsLimit(uint256)': FunctionFragment;
    'setRewardTokenSpeeds(address[],uint256[],uint256[])': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'updateContributorRewards(address)': FunctionFragment;
    'updateRewardTokenBorrowIndex(address,(uint256))': FunctionFragment;
    'updateRewardTokenSupplyIndex(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'INITIAL_INDEX'
      | 'acceptOwnership'
      | 'accessControlManager'
      | 'claimRewardToken(address,address[])'
      | 'claimRewardToken(address)'
      | 'distributeBorrowerRewardToken'
      | 'distributeSupplierRewardToken'
      | 'getBlockNumber'
      | 'grantRewardToken'
      | 'initialize'
      | 'initializeMarket'
      | 'lastContributorBlock'
      | 'maxLoopsLimit'
      | 'owner'
      | 'pendingOwner'
      | 'renounceOwnership'
      | 'rewardToken'
      | 'rewardTokenAccrued'
      | 'rewardTokenBorrowSpeeds'
      | 'rewardTokenBorrowState'
      | 'rewardTokenBorrowerIndex'
      | 'rewardTokenContributorSpeeds'
      | 'rewardTokenSupplierIndex'
      | 'rewardTokenSupplySpeeds'
      | 'rewardTokenSupplyState'
      | 'setAccessControlManager'
      | 'setContributorRewardTokenSpeed'
      | 'setLastRewardingBlocks'
      | 'setMaxLoopsLimit'
      | 'setRewardTokenSpeeds'
      | 'transferOwnership'
      | 'updateContributorRewards'
      | 'updateRewardTokenBorrowIndex'
      | 'updateRewardTokenSupplyIndex',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'INITIAL_INDEX', values?: undefined): string;
  encodeFunctionData(functionFragment: 'acceptOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'accessControlManager', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'claimRewardToken(address,address[])',
    values: [string, string[]],
  ): string;
  encodeFunctionData(functionFragment: 'claimRewardToken(address)', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'distributeBorrowerRewardToken',
    values: [string, string, ExponentialNoError.ExpStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'distributeSupplierRewardToken',
    values: [string, string],
  ): string;
  encodeFunctionData(functionFragment: 'getBlockNumber', values?: undefined): string;
  encodeFunctionData(functionFragment: 'grantRewardToken', values: [string, BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [string, string, BigNumberish, string],
  ): string;
  encodeFunctionData(functionFragment: 'initializeMarket', values: [string]): string;
  encodeFunctionData(functionFragment: 'lastContributorBlock', values: [string]): string;
  encodeFunctionData(functionFragment: 'maxLoopsLimit', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingOwner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardTokenAccrued', values: [string]): string;
  encodeFunctionData(functionFragment: 'rewardTokenBorrowSpeeds', values: [string]): string;
  encodeFunctionData(functionFragment: 'rewardTokenBorrowState', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'rewardTokenBorrowerIndex',
    values: [string, string],
  ): string;
  encodeFunctionData(functionFragment: 'rewardTokenContributorSpeeds', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'rewardTokenSupplierIndex',
    values: [string, string],
  ): string;
  encodeFunctionData(functionFragment: 'rewardTokenSupplySpeeds', values: [string]): string;
  encodeFunctionData(functionFragment: 'rewardTokenSupplyState', values: [string]): string;
  encodeFunctionData(functionFragment: 'setAccessControlManager', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'setContributorRewardTokenSpeed',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setLastRewardingBlocks',
    values: [string[], BigNumberish[], BigNumberish[]],
  ): string;
  encodeFunctionData(functionFragment: 'setMaxLoopsLimit', values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'setRewardTokenSpeeds',
    values: [string[], BigNumberish[], BigNumberish[]],
  ): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
  encodeFunctionData(functionFragment: 'updateContributorRewards', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'updateRewardTokenBorrowIndex',
    values: [string, ExponentialNoError.ExpStruct],
  ): string;
  encodeFunctionData(functionFragment: 'updateRewardTokenSupplyIndex', values: [string]): string;

  decodeFunctionResult(functionFragment: 'INITIAL_INDEX', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'acceptOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accessControlManager', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'claimRewardToken(address,address[])',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'claimRewardToken(address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'distributeBorrowerRewardToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'distributeSupplierRewardToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBlockNumber', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grantRewardToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initializeMarket', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastContributorBlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxLoopsLimit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardTokenAccrued', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardTokenBorrowSpeeds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardTokenBorrowState', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardTokenBorrowerIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardTokenContributorSpeeds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardTokenSupplierIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardTokenSupplySpeeds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardTokenSupplyState', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAccessControlManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setContributorRewardTokenSpeed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLastRewardingBlocks', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaxLoopsLimit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRewardTokenSpeeds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateContributorRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateRewardTokenBorrowIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateRewardTokenSupplyIndex', data: BytesLike): Result;

  events: {
    'BorrowLastRewardingBlockUpdated(address,uint32)': EventFragment;
    'ContributorRewardTokenSpeedUpdated(address,uint256)': EventFragment;
    'ContributorRewardsUpdated(address,uint256)': EventFragment;
    'DistributedBorrowerRewardToken(address,address,uint256,uint256,uint256)': EventFragment;
    'DistributedSupplierRewardToken(address,address,uint256,uint256,uint256)': EventFragment;
    'Initialized(uint8)': EventFragment;
    'MarketInitialized(address)': EventFragment;
    'MaxLoopsLimitUpdated(uint256,uint256)': EventFragment;
    'NewAccessControlManager(address,address)': EventFragment;
    'OwnershipTransferStarted(address,address)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'RewardTokenBorrowIndexUpdated(address,(uint256))': EventFragment;
    'RewardTokenBorrowSpeedUpdated(address,uint256)': EventFragment;
    'RewardTokenGranted(address,uint256)': EventFragment;
    'RewardTokenSupplyIndexUpdated(address)': EventFragment;
    'RewardTokenSupplySpeedUpdated(address,uint256)': EventFragment;
    'SupplyLastRewardingBlockUpdated(address,uint32)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'BorrowLastRewardingBlockUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ContributorRewardTokenSpeedUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ContributorRewardsUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DistributedBorrowerRewardToken'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DistributedSupplierRewardToken'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MarketInitialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MaxLoopsLimitUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewAccessControlManager'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferStarted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardTokenBorrowIndexUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardTokenBorrowSpeedUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardTokenGranted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardTokenSupplyIndexUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardTokenSupplySpeedUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SupplyLastRewardingBlockUpdated'): EventFragment;
}

export interface BorrowLastRewardingBlockUpdatedEventObject {
  vToken: string;
  newBlock: number;
}
export type BorrowLastRewardingBlockUpdatedEvent = TypedEvent<
  [string, number],
  BorrowLastRewardingBlockUpdatedEventObject
>;

export type BorrowLastRewardingBlockUpdatedEventFilter =
  TypedEventFilter<BorrowLastRewardingBlockUpdatedEvent>;

export interface ContributorRewardTokenSpeedUpdatedEventObject {
  contributor: string;
  newSpeed: BigNumber;
}
export type ContributorRewardTokenSpeedUpdatedEvent = TypedEvent<
  [string, BigNumber],
  ContributorRewardTokenSpeedUpdatedEventObject
>;

export type ContributorRewardTokenSpeedUpdatedEventFilter =
  TypedEventFilter<ContributorRewardTokenSpeedUpdatedEvent>;

export interface ContributorRewardsUpdatedEventObject {
  contributor: string;
  rewardAccrued: BigNumber;
}
export type ContributorRewardsUpdatedEvent = TypedEvent<
  [string, BigNumber],
  ContributorRewardsUpdatedEventObject
>;

export type ContributorRewardsUpdatedEventFilter = TypedEventFilter<ContributorRewardsUpdatedEvent>;

export interface DistributedBorrowerRewardTokenEventObject {
  vToken: string;
  borrower: string;
  rewardTokenDelta: BigNumber;
  rewardTokenTotal: BigNumber;
  rewardTokenBorrowIndex: BigNumber;
}
export type DistributedBorrowerRewardTokenEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  DistributedBorrowerRewardTokenEventObject
>;

export type DistributedBorrowerRewardTokenEventFilter =
  TypedEventFilter<DistributedBorrowerRewardTokenEvent>;

export interface DistributedSupplierRewardTokenEventObject {
  vToken: string;
  supplier: string;
  rewardTokenDelta: BigNumber;
  rewardTokenTotal: BigNumber;
  rewardTokenSupplyIndex: BigNumber;
}
export type DistributedSupplierRewardTokenEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  DistributedSupplierRewardTokenEventObject
>;

export type DistributedSupplierRewardTokenEventFilter =
  TypedEventFilter<DistributedSupplierRewardTokenEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MarketInitializedEventObject {
  vToken: string;
}
export type MarketInitializedEvent = TypedEvent<[string], MarketInitializedEventObject>;

export type MarketInitializedEventFilter = TypedEventFilter<MarketInitializedEvent>;

export interface MaxLoopsLimitUpdatedEventObject {
  oldMaxLoopsLimit: BigNumber;
  newmaxLoopsLimit: BigNumber;
}
export type MaxLoopsLimitUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  MaxLoopsLimitUpdatedEventObject
>;

export type MaxLoopsLimitUpdatedEventFilter = TypedEventFilter<MaxLoopsLimitUpdatedEvent>;

export interface NewAccessControlManagerEventObject {
  oldAccessControlManager: string;
  newAccessControlManager: string;
}
export type NewAccessControlManagerEvent = TypedEvent<
  [string, string],
  NewAccessControlManagerEventObject
>;

export type NewAccessControlManagerEventFilter = TypedEventFilter<NewAccessControlManagerEvent>;

export interface OwnershipTransferStartedEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferStartedEvent = TypedEvent<
  [string, string],
  OwnershipTransferStartedEventObject
>;

export type OwnershipTransferStartedEventFilter = TypedEventFilter<OwnershipTransferStartedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface RewardTokenBorrowIndexUpdatedEventObject {
  vToken: string;
  marketBorrowIndex: ExponentialNoError.ExpStructOutput;
}
export type RewardTokenBorrowIndexUpdatedEvent = TypedEvent<
  [string, ExponentialNoError.ExpStructOutput],
  RewardTokenBorrowIndexUpdatedEventObject
>;

export type RewardTokenBorrowIndexUpdatedEventFilter =
  TypedEventFilter<RewardTokenBorrowIndexUpdatedEvent>;

export interface RewardTokenBorrowSpeedUpdatedEventObject {
  vToken: string;
  newSpeed: BigNumber;
}
export type RewardTokenBorrowSpeedUpdatedEvent = TypedEvent<
  [string, BigNumber],
  RewardTokenBorrowSpeedUpdatedEventObject
>;

export type RewardTokenBorrowSpeedUpdatedEventFilter =
  TypedEventFilter<RewardTokenBorrowSpeedUpdatedEvent>;

export interface RewardTokenGrantedEventObject {
  recipient: string;
  amount: BigNumber;
}
export type RewardTokenGrantedEvent = TypedEvent<
  [string, BigNumber],
  RewardTokenGrantedEventObject
>;

export type RewardTokenGrantedEventFilter = TypedEventFilter<RewardTokenGrantedEvent>;

export interface RewardTokenSupplyIndexUpdatedEventObject {
  vToken: string;
}
export type RewardTokenSupplyIndexUpdatedEvent = TypedEvent<
  [string],
  RewardTokenSupplyIndexUpdatedEventObject
>;

export type RewardTokenSupplyIndexUpdatedEventFilter =
  TypedEventFilter<RewardTokenSupplyIndexUpdatedEvent>;

export interface RewardTokenSupplySpeedUpdatedEventObject {
  vToken: string;
  newSpeed: BigNumber;
}
export type RewardTokenSupplySpeedUpdatedEvent = TypedEvent<
  [string, BigNumber],
  RewardTokenSupplySpeedUpdatedEventObject
>;

export type RewardTokenSupplySpeedUpdatedEventFilter =
  TypedEventFilter<RewardTokenSupplySpeedUpdatedEvent>;

export interface SupplyLastRewardingBlockUpdatedEventObject {
  vToken: string;
  newBlock: number;
}
export type SupplyLastRewardingBlockUpdatedEvent = TypedEvent<
  [string, number],
  SupplyLastRewardingBlockUpdatedEventObject
>;

export type SupplyLastRewardingBlockUpdatedEventFilter =
  TypedEventFilter<SupplyLastRewardingBlockUpdatedEvent>;

export interface RewardsDistributor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RewardsDistributorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    INITIAL_INDEX(overrides?: CallOverrides): Promise<[BigNumber]>;

    acceptOwnership(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    accessControlManager(overrides?: CallOverrides): Promise<[string]>;

    'claimRewardToken(address,address[])'(
      holder: string,
      vTokens: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'claimRewardToken(address)'(
      holder: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    distributeBorrowerRewardToken(
      vToken: string,
      borrower: string,
      marketBorrowIndex: ExponentialNoError.ExpStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    distributeSupplierRewardToken(
      vToken: string,
      supplier: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    getBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    grantRewardToken(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    initialize(
      comptroller_: string,
      rewardToken_: string,
      loopsLimit_: BigNumberish,
      accessControlManager_: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    initializeMarket(
      vToken: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    lastContributorBlock(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    maxLoopsLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    rewardTokenAccrued(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardTokenBorrowSpeeds(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardTokenBorrowState(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, number, number] & {
        index: BigNumber;
        block: number;
        lastRewardingBlock: number;
      }
    >;

    rewardTokenBorrowerIndex(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    rewardTokenContributorSpeeds(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardTokenSupplierIndex(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    rewardTokenSupplySpeeds(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardTokenSupplyState(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, number, number] & {
        index: BigNumber;
        block: number;
        lastRewardingBlock: number;
      }
    >;

    setAccessControlManager(
      accessControlManager_: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setContributorRewardTokenSpeed(
      contributor: string,
      rewardTokenSpeed: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setLastRewardingBlocks(
      vTokens: string[],
      supplyLastRewardingBlocks: BigNumberish[],
      borrowLastRewardingBlocks: BigNumberish[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setMaxLoopsLimit(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setRewardTokenSpeeds(
      vTokens: string[],
      supplySpeeds: BigNumberish[],
      borrowSpeeds: BigNumberish[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    updateContributorRewards(
      contributor: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    updateRewardTokenBorrowIndex(
      vToken: string,
      marketBorrowIndex: ExponentialNoError.ExpStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    updateRewardTokenSupplyIndex(
      vToken: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;
  };

  INITIAL_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

  acceptOwnership(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  accessControlManager(overrides?: CallOverrides): Promise<string>;

  'claimRewardToken(address,address[])'(
    holder: string,
    vTokens: string[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'claimRewardToken(address)'(
    holder: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  distributeBorrowerRewardToken(
    vToken: string,
    borrower: string,
    marketBorrowIndex: ExponentialNoError.ExpStruct,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  distributeSupplierRewardToken(
    vToken: string,
    supplier: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  grantRewardToken(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  initialize(
    comptroller_: string,
    rewardToken_: string,
    loopsLimit_: BigNumberish,
    accessControlManager_: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  initializeMarket(
    vToken: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  lastContributorBlock(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  maxLoopsLimit(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  rewardTokenAccrued(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  rewardTokenBorrowSpeeds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  rewardTokenBorrowState(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, number, number] & {
      index: BigNumber;
      block: number;
      lastRewardingBlock: number;
    }
  >;

  rewardTokenBorrowerIndex(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  rewardTokenContributorSpeeds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  rewardTokenSupplierIndex(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  rewardTokenSupplySpeeds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  rewardTokenSupplyState(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, number, number] & {
      index: BigNumber;
      block: number;
      lastRewardingBlock: number;
    }
  >;

  setAccessControlManager(
    accessControlManager_: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setContributorRewardTokenSpeed(
    contributor: string,
    rewardTokenSpeed: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setLastRewardingBlocks(
    vTokens: string[],
    supplyLastRewardingBlocks: BigNumberish[],
    borrowLastRewardingBlocks: BigNumberish[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setMaxLoopsLimit(
    limit: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setRewardTokenSpeeds(
    vTokens: string[],
    supplySpeeds: BigNumberish[],
    borrowSpeeds: BigNumberish[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  updateContributorRewards(
    contributor: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  updateRewardTokenBorrowIndex(
    vToken: string,
    marketBorrowIndex: ExponentialNoError.ExpStruct,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  updateRewardTokenSupplyIndex(
    vToken: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  callStatic: {
    INITIAL_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    accessControlManager(overrides?: CallOverrides): Promise<string>;

    'claimRewardToken(address,address[])'(
      holder: string,
      vTokens: string[],
      overrides?: CallOverrides,
    ): Promise<void>;

    'claimRewardToken(address)'(holder: string, overrides?: CallOverrides): Promise<void>;

    distributeBorrowerRewardToken(
      vToken: string,
      borrower: string,
      marketBorrowIndex: ExponentialNoError.ExpStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    distributeSupplierRewardToken(
      vToken: string,
      supplier: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    grantRewardToken(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    initialize(
      comptroller_: string,
      rewardToken_: string,
      loopsLimit_: BigNumberish,
      accessControlManager_: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    initializeMarket(vToken: string, overrides?: CallOverrides): Promise<void>;

    lastContributorBlock(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxLoopsLimit(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    rewardTokenAccrued(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewardTokenBorrowSpeeds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewardTokenBorrowState(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, number, number] & {
        index: BigNumber;
        block: number;
        lastRewardingBlock: number;
      }
    >;

    rewardTokenBorrowerIndex(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    rewardTokenContributorSpeeds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewardTokenSupplierIndex(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    rewardTokenSupplySpeeds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewardTokenSupplyState(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, number, number] & {
        index: BigNumber;
        block: number;
        lastRewardingBlock: number;
      }
    >;

    setAccessControlManager(
      accessControlManager_: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setContributorRewardTokenSpeed(
      contributor: string,
      rewardTokenSpeed: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setLastRewardingBlocks(
      vTokens: string[],
      supplyLastRewardingBlocks: BigNumberish[],
      borrowLastRewardingBlocks: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<void>;

    setMaxLoopsLimit(limit: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setRewardTokenSpeeds(
      vTokens: string[],
      supplySpeeds: BigNumberish[],
      borrowSpeeds: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<void>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    updateContributorRewards(contributor: string, overrides?: CallOverrides): Promise<void>;

    updateRewardTokenBorrowIndex(
      vToken: string,
      marketBorrowIndex: ExponentialNoError.ExpStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateRewardTokenSupplyIndex(vToken: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'BorrowLastRewardingBlockUpdated(address,uint32)'(
      vToken?: string | null,
      newBlock?: null,
    ): BorrowLastRewardingBlockUpdatedEventFilter;
    BorrowLastRewardingBlockUpdated(
      vToken?: string | null,
      newBlock?: null,
    ): BorrowLastRewardingBlockUpdatedEventFilter;

    'ContributorRewardTokenSpeedUpdated(address,uint256)'(
      contributor?: string | null,
      newSpeed?: null,
    ): ContributorRewardTokenSpeedUpdatedEventFilter;
    ContributorRewardTokenSpeedUpdated(
      contributor?: string | null,
      newSpeed?: null,
    ): ContributorRewardTokenSpeedUpdatedEventFilter;

    'ContributorRewardsUpdated(address,uint256)'(
      contributor?: string | null,
      rewardAccrued?: null,
    ): ContributorRewardsUpdatedEventFilter;
    ContributorRewardsUpdated(
      contributor?: string | null,
      rewardAccrued?: null,
    ): ContributorRewardsUpdatedEventFilter;

    'DistributedBorrowerRewardToken(address,address,uint256,uint256,uint256)'(
      vToken?: string | null,
      borrower?: string | null,
      rewardTokenDelta?: null,
      rewardTokenTotal?: null,
      rewardTokenBorrowIndex?: null,
    ): DistributedBorrowerRewardTokenEventFilter;
    DistributedBorrowerRewardToken(
      vToken?: string | null,
      borrower?: string | null,
      rewardTokenDelta?: null,
      rewardTokenTotal?: null,
      rewardTokenBorrowIndex?: null,
    ): DistributedBorrowerRewardTokenEventFilter;

    'DistributedSupplierRewardToken(address,address,uint256,uint256,uint256)'(
      vToken?: string | null,
      supplier?: string | null,
      rewardTokenDelta?: null,
      rewardTokenTotal?: null,
      rewardTokenSupplyIndex?: null,
    ): DistributedSupplierRewardTokenEventFilter;
    DistributedSupplierRewardToken(
      vToken?: string | null,
      supplier?: string | null,
      rewardTokenDelta?: null,
      rewardTokenTotal?: null,
      rewardTokenSupplyIndex?: null,
    ): DistributedSupplierRewardTokenEventFilter;

    'Initialized(uint8)'(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    'MarketInitialized(address)'(vToken?: string | null): MarketInitializedEventFilter;
    MarketInitialized(vToken?: string | null): MarketInitializedEventFilter;

    'MaxLoopsLimitUpdated(uint256,uint256)'(
      oldMaxLoopsLimit?: null,
      newmaxLoopsLimit?: null,
    ): MaxLoopsLimitUpdatedEventFilter;
    MaxLoopsLimitUpdated(
      oldMaxLoopsLimit?: null,
      newmaxLoopsLimit?: null,
    ): MaxLoopsLimitUpdatedEventFilter;

    'NewAccessControlManager(address,address)'(
      oldAccessControlManager?: null,
      newAccessControlManager?: null,
    ): NewAccessControlManagerEventFilter;
    NewAccessControlManager(
      oldAccessControlManager?: null,
      newAccessControlManager?: null,
    ): NewAccessControlManagerEventFilter;

    'OwnershipTransferStarted(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferStartedEventFilter;
    OwnershipTransferStarted(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferStartedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;

    'RewardTokenBorrowIndexUpdated(address,(uint256))'(
      vToken?: string | null,
      marketBorrowIndex?: null,
    ): RewardTokenBorrowIndexUpdatedEventFilter;
    RewardTokenBorrowIndexUpdated(
      vToken?: string | null,
      marketBorrowIndex?: null,
    ): RewardTokenBorrowIndexUpdatedEventFilter;

    'RewardTokenBorrowSpeedUpdated(address,uint256)'(
      vToken?: string | null,
      newSpeed?: null,
    ): RewardTokenBorrowSpeedUpdatedEventFilter;
    RewardTokenBorrowSpeedUpdated(
      vToken?: string | null,
      newSpeed?: null,
    ): RewardTokenBorrowSpeedUpdatedEventFilter;

    'RewardTokenGranted(address,uint256)'(
      recipient?: string | null,
      amount?: null,
    ): RewardTokenGrantedEventFilter;
    RewardTokenGranted(recipient?: string | null, amount?: null): RewardTokenGrantedEventFilter;

    'RewardTokenSupplyIndexUpdated(address)'(
      vToken?: string | null,
    ): RewardTokenSupplyIndexUpdatedEventFilter;
    RewardTokenSupplyIndexUpdated(vToken?: string | null): RewardTokenSupplyIndexUpdatedEventFilter;

    'RewardTokenSupplySpeedUpdated(address,uint256)'(
      vToken?: string | null,
      newSpeed?: null,
    ): RewardTokenSupplySpeedUpdatedEventFilter;
    RewardTokenSupplySpeedUpdated(
      vToken?: string | null,
      newSpeed?: null,
    ): RewardTokenSupplySpeedUpdatedEventFilter;

    'SupplyLastRewardingBlockUpdated(address,uint32)'(
      vToken?: string | null,
      newBlock?: null,
    ): SupplyLastRewardingBlockUpdatedEventFilter;
    SupplyLastRewardingBlockUpdated(
      vToken?: string | null,
      newBlock?: null,
    ): SupplyLastRewardingBlockUpdatedEventFilter;
  };

  estimateGas: {
    INITIAL_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    accessControlManager(overrides?: CallOverrides): Promise<BigNumber>;

    'claimRewardToken(address,address[])'(
      holder: string,
      vTokens: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'claimRewardToken(address)'(
      holder: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    distributeBorrowerRewardToken(
      vToken: string,
      borrower: string,
      marketBorrowIndex: ExponentialNoError.ExpStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    distributeSupplierRewardToken(
      vToken: string,
      supplier: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    grantRewardToken(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    initialize(
      comptroller_: string,
      rewardToken_: string,
      loopsLimit_: BigNumberish,
      accessControlManager_: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    initializeMarket(vToken: string, overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    lastContributorBlock(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxLoopsLimit(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    rewardTokenAccrued(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewardTokenBorrowSpeeds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewardTokenBorrowState(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewardTokenBorrowerIndex(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    rewardTokenContributorSpeeds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewardTokenSupplierIndex(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    rewardTokenSupplySpeeds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewardTokenSupplyState(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setAccessControlManager(
      accessControlManager_: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setContributorRewardTokenSpeed(
      contributor: string,
      rewardTokenSpeed: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setLastRewardingBlocks(
      vTokens: string[],
      supplyLastRewardingBlocks: BigNumberish[],
      borrowLastRewardingBlocks: BigNumberish[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setMaxLoopsLimit(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setRewardTokenSpeeds(
      vTokens: string[],
      supplySpeeds: BigNumberish[],
      borrowSpeeds: BigNumberish[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    updateContributorRewards(
      contributor: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    updateRewardTokenBorrowIndex(
      vToken: string,
      marketBorrowIndex: ExponentialNoError.ExpStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    updateRewardTokenSupplyIndex(
      vToken: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    INITIAL_INDEX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptOwnership(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    accessControlManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'claimRewardToken(address,address[])'(
      holder: string,
      vTokens: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'claimRewardToken(address)'(
      holder: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    distributeBorrowerRewardToken(
      vToken: string,
      borrower: string,
      marketBorrowIndex: ExponentialNoError.ExpStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    distributeSupplierRewardToken(
      vToken: string,
      supplier: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    getBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRewardToken(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    initialize(
      comptroller_: string,
      rewardToken_: string,
      loopsLimit_: BigNumberish,
      accessControlManager_: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    initializeMarket(
      vToken: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    lastContributorBlock(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxLoopsLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardTokenAccrued(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardTokenBorrowSpeeds(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardTokenBorrowState(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardTokenBorrowerIndex(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    rewardTokenContributorSpeeds(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    rewardTokenSupplierIndex(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    rewardTokenSupplySpeeds(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardTokenSupplyState(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAccessControlManager(
      accessControlManager_: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setContributorRewardTokenSpeed(
      contributor: string,
      rewardTokenSpeed: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setLastRewardingBlocks(
      vTokens: string[],
      supplyLastRewardingBlocks: BigNumberish[],
      borrowLastRewardingBlocks: BigNumberish[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setMaxLoopsLimit(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setRewardTokenSpeeds(
      vTokens: string[],
      supplySpeeds: BigNumberish[],
      borrowSpeeds: BigNumberish[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    updateContributorRewards(
      contributor: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    updateRewardTokenBorrowIndex(
      vToken: string,
      marketBorrowIndex: ExponentialNoError.ExpStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    updateRewardTokenSupplyIndex(
      vToken: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;
  };
}
