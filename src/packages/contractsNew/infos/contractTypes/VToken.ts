/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { EventFragment, FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type { OnEvent, TypedEvent, TypedEventFilter, TypedListener } from './common';

export declare namespace VTokenInterface {
  export type RiskManagementInitStruct = {
    shortfall: string;
    protocolShareReserve: string;
  };

  export type RiskManagementInitStructOutput = [string, string] & {
    shortfall: string;
    protocolShareReserve: string;
  };
}

export interface VTokenInterface extends utils.Interface {
  functions: {
    'NO_ERROR()': FunctionFragment;
    'acceptOwnership()': FunctionFragment;
    'accessControlManager()': FunctionFragment;
    'accrualBlockNumber()': FunctionFragment;
    'accrueInterest()': FunctionFragment;
    'addReserves(uint256)': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'badDebt()': FunctionFragment;
    'badDebtRecovered(uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'balanceOfUnderlying(address)': FunctionFragment;
    'borrow(uint256)': FunctionFragment;
    'borrowBalanceCurrent(address)': FunctionFragment;
    'borrowBalanceStored(address)': FunctionFragment;
    'borrowIndex()': FunctionFragment;
    'borrowRatePerBlock()': FunctionFragment;
    'comptroller()': FunctionFragment;
    'decimals()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'exchangeRateCurrent()': FunctionFragment;
    'exchangeRateStored()': FunctionFragment;
    'forceLiquidateBorrow(address,address,uint256,address,bool)': FunctionFragment;
    'getAccountSnapshot(address)': FunctionFragment;
    'getCash()': FunctionFragment;
    'healBorrow(address,address,uint256)': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'initialize(address,address,address,uint256,string,string,uint8,address,address,(address,address),uint256)': FunctionFragment;
    'interestRateModel()': FunctionFragment;
    'isVToken()': FunctionFragment;
    'liquidateBorrow(address,uint256,address)': FunctionFragment;
    'mint(uint256)': FunctionFragment;
    'mintBehalf(address,uint256)': FunctionFragment;
    'name()': FunctionFragment;
    'owner()': FunctionFragment;
    'pendingOwner()': FunctionFragment;
    'protocolSeizeShareMantissa()': FunctionFragment;
    'protocolShareReserve()': FunctionFragment;
    'redeem(uint256)': FunctionFragment;
    'redeemUnderlying(uint256)': FunctionFragment;
    'reduceReserves(uint256)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'repayBorrow(uint256)': FunctionFragment;
    'repayBorrowBehalf(address,uint256)': FunctionFragment;
    'reserveFactorMantissa()': FunctionFragment;
    'seize(address,address,uint256)': FunctionFragment;
    'setAccessControlManager(address)': FunctionFragment;
    'setInterestRateModel(address)': FunctionFragment;
    'setProtocolSeizeShare(uint256)': FunctionFragment;
    'setProtocolShareReserve(address)': FunctionFragment;
    'setReserveFactor(uint256)': FunctionFragment;
    'setShortfallContract(address)': FunctionFragment;
    'shortfall()': FunctionFragment;
    'supplyRatePerBlock()': FunctionFragment;
    'sweepToken(address)': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalBorrows()': FunctionFragment;
    'totalBorrowsCurrent()': FunctionFragment;
    'totalReserves()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'underlying()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'NO_ERROR'
      | 'acceptOwnership'
      | 'accessControlManager'
      | 'accrualBlockNumber'
      | 'accrueInterest'
      | 'addReserves'
      | 'allowance'
      | 'approve'
      | 'badDebt'
      | 'badDebtRecovered'
      | 'balanceOf'
      | 'balanceOfUnderlying'
      | 'borrow'
      | 'borrowBalanceCurrent'
      | 'borrowBalanceStored'
      | 'borrowIndex'
      | 'borrowRatePerBlock'
      | 'comptroller'
      | 'decimals'
      | 'decreaseAllowance'
      | 'exchangeRateCurrent'
      | 'exchangeRateStored'
      | 'forceLiquidateBorrow'
      | 'getAccountSnapshot'
      | 'getCash'
      | 'healBorrow'
      | 'increaseAllowance'
      | 'initialize'
      | 'interestRateModel'
      | 'isVToken'
      | 'liquidateBorrow'
      | 'mint'
      | 'mintBehalf'
      | 'name'
      | 'owner'
      | 'pendingOwner'
      | 'protocolSeizeShareMantissa'
      | 'protocolShareReserve'
      | 'redeem'
      | 'redeemUnderlying'
      | 'reduceReserves'
      | 'renounceOwnership'
      | 'repayBorrow'
      | 'repayBorrowBehalf'
      | 'reserveFactorMantissa'
      | 'seize'
      | 'setAccessControlManager'
      | 'setInterestRateModel'
      | 'setProtocolSeizeShare'
      | 'setProtocolShareReserve'
      | 'setReserveFactor'
      | 'setShortfallContract'
      | 'shortfall'
      | 'supplyRatePerBlock'
      | 'sweepToken'
      | 'symbol'
      | 'totalBorrows'
      | 'totalBorrowsCurrent'
      | 'totalReserves'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'transferOwnership'
      | 'underlying',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'NO_ERROR', values?: undefined): string;
  encodeFunctionData(functionFragment: 'acceptOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'accessControlManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'accrualBlockNumber', values?: undefined): string;
  encodeFunctionData(functionFragment: 'accrueInterest', values?: undefined): string;
  encodeFunctionData(functionFragment: 'addReserves', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'allowance', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'badDebt', values?: undefined): string;
  encodeFunctionData(functionFragment: 'badDebtRecovered', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'balanceOfUnderlying', values: [string]): string;
  encodeFunctionData(functionFragment: 'borrow', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'borrowBalanceCurrent', values: [string]): string;
  encodeFunctionData(functionFragment: 'borrowBalanceStored', values: [string]): string;
  encodeFunctionData(functionFragment: 'borrowIndex', values?: undefined): string;
  encodeFunctionData(functionFragment: 'borrowRatePerBlock', values?: undefined): string;
  encodeFunctionData(functionFragment: 'comptroller', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decreaseAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'exchangeRateCurrent', values?: undefined): string;
  encodeFunctionData(functionFragment: 'exchangeRateStored', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'forceLiquidateBorrow',
    values: [string, string, BigNumberish, string, boolean],
  ): string;
  encodeFunctionData(functionFragment: 'getAccountSnapshot', values: [string]): string;
  encodeFunctionData(functionFragment: 'getCash', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'healBorrow',
    values: [string, string, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'increaseAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      string,
      string,
      string,
      BigNumberish,
      string,
      string,
      BigNumberish,
      string,
      string,
      VTokenInterface.RiskManagementInitStruct,
      BigNumberish,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'interestRateModel', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isVToken', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'liquidateBorrow',
    values: [string, BigNumberish, string],
  ): string;
  encodeFunctionData(functionFragment: 'mint', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'mintBehalf', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingOwner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'protocolSeizeShareMantissa', values?: undefined): string;
  encodeFunctionData(functionFragment: 'protocolShareReserve', values?: undefined): string;
  encodeFunctionData(functionFragment: 'redeem', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'redeemUnderlying', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'reduceReserves', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'repayBorrow', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'repayBorrowBehalf', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'reserveFactorMantissa', values?: undefined): string;
  encodeFunctionData(functionFragment: 'seize', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setAccessControlManager', values: [string]): string;
  encodeFunctionData(functionFragment: 'setInterestRateModel', values: [string]): string;
  encodeFunctionData(functionFragment: 'setProtocolSeizeShare', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setProtocolShareReserve', values: [string]): string;
  encodeFunctionData(functionFragment: 'setReserveFactor', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setShortfallContract', values: [string]): string;
  encodeFunctionData(functionFragment: 'shortfall', values?: undefined): string;
  encodeFunctionData(functionFragment: 'supplyRatePerBlock', values?: undefined): string;
  encodeFunctionData(functionFragment: 'sweepToken', values: [string]): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalBorrows', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalBorrowsCurrent', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalReserves', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transfer', values: [string, BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [string, string, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
  encodeFunctionData(functionFragment: 'underlying', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'NO_ERROR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'acceptOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accessControlManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accrualBlockNumber', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accrueInterest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addReserves', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'badDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'badDebtRecovered', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOfUnderlying', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowBalanceCurrent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowBalanceStored', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowRatePerBlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'comptroller', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exchangeRateCurrent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exchangeRateStored', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'forceLiquidateBorrow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAccountSnapshot', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCash', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'healBorrow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'interestRateModel', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isVToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidateBorrow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintBehalf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'protocolSeizeShareMantissa', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'protocolShareReserve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeemUnderlying', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reduceReserves', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repayBorrow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repayBorrowBehalf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reserveFactorMantissa', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'seize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAccessControlManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setInterestRateModel', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setProtocolSeizeShare', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setProtocolShareReserve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setReserveFactor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setShortfallContract', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'shortfall', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supplyRatePerBlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sweepToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalBorrows', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalBorrowsCurrent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalReserves', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'underlying', data: BytesLike): Result;

  events: {
    'AccrueInterest(uint256,uint256,uint256,uint256)': EventFragment;
    'Approval(address,address,uint256)': EventFragment;
    'BadDebtIncreased(address,uint256,uint256,uint256)': EventFragment;
    'BadDebtRecovered(uint256,uint256)': EventFragment;
    'Borrow(address,uint256,uint256,uint256)': EventFragment;
    'HealBorrow(address,address,uint256)': EventFragment;
    'Initialized(uint8)': EventFragment;
    'LiquidateBorrow(address,address,uint256,address,uint256)': EventFragment;
    'Mint(address,uint256,uint256,uint256)': EventFragment;
    'NewAccessControlManager(address,address)': EventFragment;
    'NewComptroller(address,address)': EventFragment;
    'NewMarketInterestRateModel(address,address)': EventFragment;
    'NewProtocolSeizeShare(uint256,uint256)': EventFragment;
    'NewProtocolShareReserve(address,address)': EventFragment;
    'NewReserveFactor(uint256,uint256)': EventFragment;
    'NewShortfallContract(address,address)': EventFragment;
    'OwnershipTransferStarted(address,address)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Redeem(address,uint256,uint256,uint256)': EventFragment;
    'RepayBorrow(address,address,uint256,uint256,uint256)': EventFragment;
    'ReservesAdded(address,uint256,uint256)': EventFragment;
    'ReservesReduced(address,uint256,uint256)': EventFragment;
    'SweepToken(address)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AccrueInterest'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BadDebtIncreased'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BadDebtRecovered'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Borrow'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'HealBorrow'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LiquidateBorrow'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Mint'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewAccessControlManager'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewComptroller'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewMarketInterestRateModel'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewProtocolSeizeShare'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewProtocolShareReserve'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewReserveFactor'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewShortfallContract'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferStarted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Redeem'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RepayBorrow'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ReservesAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ReservesReduced'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SweepToken'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
}

export interface AccrueInterestEventObject {
  cashPrior: BigNumber;
  interestAccumulated: BigNumber;
  borrowIndex: BigNumber;
  totalBorrows: BigNumber;
}
export type AccrueInterestEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  AccrueInterestEventObject
>;

export type AccrueInterestEventFilter = TypedEventFilter<AccrueInterestEvent>;

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  amount: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface BadDebtIncreasedEventObject {
  borrower: string;
  badDebtDelta: BigNumber;
  badDebtOld: BigNumber;
  badDebtNew: BigNumber;
}
export type BadDebtIncreasedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  BadDebtIncreasedEventObject
>;

export type BadDebtIncreasedEventFilter = TypedEventFilter<BadDebtIncreasedEvent>;

export interface BadDebtRecoveredEventObject {
  badDebtOld: BigNumber;
  badDebtNew: BigNumber;
}
export type BadDebtRecoveredEvent = TypedEvent<[BigNumber, BigNumber], BadDebtRecoveredEventObject>;

export type BadDebtRecoveredEventFilter = TypedEventFilter<BadDebtRecoveredEvent>;

export interface BorrowEventObject {
  borrower: string;
  borrowAmount: BigNumber;
  accountBorrows: BigNumber;
  totalBorrows: BigNumber;
}
export type BorrowEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber], BorrowEventObject>;

export type BorrowEventFilter = TypedEventFilter<BorrowEvent>;

export interface HealBorrowEventObject {
  payer: string;
  borrower: string;
  repayAmount: BigNumber;
}
export type HealBorrowEvent = TypedEvent<[string, string, BigNumber], HealBorrowEventObject>;

export type HealBorrowEventFilter = TypedEventFilter<HealBorrowEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LiquidateBorrowEventObject {
  liquidator: string;
  borrower: string;
  repayAmount: BigNumber;
  vTokenCollateral: string;
  seizeTokens: BigNumber;
}
export type LiquidateBorrowEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber],
  LiquidateBorrowEventObject
>;

export type LiquidateBorrowEventFilter = TypedEventFilter<LiquidateBorrowEvent>;

export interface MintEventObject {
  minter: string;
  mintAmount: BigNumber;
  mintTokens: BigNumber;
  accountBalance: BigNumber;
}
export type MintEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber], MintEventObject>;

export type MintEventFilter = TypedEventFilter<MintEvent>;

export interface NewAccessControlManagerEventObject {
  oldAccessControlManager: string;
  newAccessControlManager: string;
}
export type NewAccessControlManagerEvent = TypedEvent<
  [string, string],
  NewAccessControlManagerEventObject
>;

export type NewAccessControlManagerEventFilter = TypedEventFilter<NewAccessControlManagerEvent>;

export interface NewComptrollerEventObject {
  oldComptroller: string;
  newComptroller: string;
}
export type NewComptrollerEvent = TypedEvent<[string, string], NewComptrollerEventObject>;

export type NewComptrollerEventFilter = TypedEventFilter<NewComptrollerEvent>;

export interface NewMarketInterestRateModelEventObject {
  oldInterestRateModel: string;
  newInterestRateModel: string;
}
export type NewMarketInterestRateModelEvent = TypedEvent<
  [string, string],
  NewMarketInterestRateModelEventObject
>;

export type NewMarketInterestRateModelEventFilter =
  TypedEventFilter<NewMarketInterestRateModelEvent>;

export interface NewProtocolSeizeShareEventObject {
  oldProtocolSeizeShareMantissa: BigNumber;
  newProtocolSeizeShareMantissa: BigNumber;
}
export type NewProtocolSeizeShareEvent = TypedEvent<
  [BigNumber, BigNumber],
  NewProtocolSeizeShareEventObject
>;

export type NewProtocolSeizeShareEventFilter = TypedEventFilter<NewProtocolSeizeShareEvent>;

export interface NewProtocolShareReserveEventObject {
  oldProtocolShareReserve: string;
  newProtocolShareReserve: string;
}
export type NewProtocolShareReserveEvent = TypedEvent<
  [string, string],
  NewProtocolShareReserveEventObject
>;

export type NewProtocolShareReserveEventFilter = TypedEventFilter<NewProtocolShareReserveEvent>;

export interface NewReserveFactorEventObject {
  oldReserveFactorMantissa: BigNumber;
  newReserveFactorMantissa: BigNumber;
}
export type NewReserveFactorEvent = TypedEvent<[BigNumber, BigNumber], NewReserveFactorEventObject>;

export type NewReserveFactorEventFilter = TypedEventFilter<NewReserveFactorEvent>;

export interface NewShortfallContractEventObject {
  oldShortfall: string;
  newShortfall: string;
}
export type NewShortfallContractEvent = TypedEvent<
  [string, string],
  NewShortfallContractEventObject
>;

export type NewShortfallContractEventFilter = TypedEventFilter<NewShortfallContractEvent>;

export interface OwnershipTransferStartedEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferStartedEvent = TypedEvent<
  [string, string],
  OwnershipTransferStartedEventObject
>;

export type OwnershipTransferStartedEventFilter = TypedEventFilter<OwnershipTransferStartedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface RedeemEventObject {
  redeemer: string;
  redeemAmount: BigNumber;
  redeemTokens: BigNumber;
  accountBalance: BigNumber;
}
export type RedeemEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber], RedeemEventObject>;

export type RedeemEventFilter = TypedEventFilter<RedeemEvent>;

export interface RepayBorrowEventObject {
  payer: string;
  borrower: string;
  repayAmount: BigNumber;
  accountBorrows: BigNumber;
  totalBorrows: BigNumber;
}
export type RepayBorrowEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  RepayBorrowEventObject
>;

export type RepayBorrowEventFilter = TypedEventFilter<RepayBorrowEvent>;

export interface ReservesAddedEventObject {
  benefactor: string;
  addAmount: BigNumber;
  newTotalReserves: BigNumber;
}
export type ReservesAddedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ReservesAddedEventObject
>;

export type ReservesAddedEventFilter = TypedEventFilter<ReservesAddedEvent>;

export interface ReservesReducedEventObject {
  admin: string;
  reduceAmount: BigNumber;
  newTotalReserves: BigNumber;
}
export type ReservesReducedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ReservesReducedEventObject
>;

export type ReservesReducedEventFilter = TypedEventFilter<ReservesReducedEvent>;

export interface SweepTokenEventObject {
  token: string;
}
export type SweepTokenEvent = TypedEvent<[string], SweepTokenEventObject>;

export type SweepTokenEventFilter = TypedEventFilter<SweepTokenEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  amount: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface VToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    NO_ERROR(overrides?: CallOverrides): Promise<[BigNumber]>;

    acceptOwnership(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    accessControlManager(overrides?: CallOverrides): Promise<[string]>;

    accrualBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    accrueInterest(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    addReserves(
      addAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    badDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    badDebtRecovered(
      recoveredAmount_: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOfUnderlying(
      owner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    borrow(
      borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    borrowBalanceCurrent(
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    borrowBalanceStored(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    borrowIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    borrowRatePerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    comptroller(overrides?: CallOverrides): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    exchangeRateCurrent(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    exchangeRateStored(overrides?: CallOverrides): Promise<[BigNumber]>;

    forceLiquidateBorrow(
      liquidator: string,
      borrower: string,
      repayAmount: BigNumberish,
      vTokenCollateral: string,
      skipLiquidityCheck: boolean,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    getAccountSnapshot(
      account: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        error: BigNumber;
        vTokenBalance: BigNumber;
        borrowBalance: BigNumber;
        exchangeRate: BigNumber;
      }
    >;

    getCash(overrides?: CallOverrides): Promise<[BigNumber]>;

    healBorrow(
      payer: string,
      borrower: string,
      repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    initialize(
      underlying_: string,
      comptroller_: string,
      interestRateModel_: string,
      initialExchangeRateMantissa_: BigNumberish,
      name_: string,
      symbol_: string,
      decimals_: BigNumberish,
      admin_: string,
      accessControlManager_: string,
      riskManagement: VTokenInterface.RiskManagementInitStruct,
      reserveFactorMantissa_: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    interestRateModel(overrides?: CallOverrides): Promise<[string]>;

    isVToken(overrides?: CallOverrides): Promise<[boolean]>;

    liquidateBorrow(
      borrower: string,
      repayAmount: BigNumberish,
      vTokenCollateral: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    mint(
      mintAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    mintBehalf(
      minter: string,
      mintAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    protocolSeizeShareMantissa(overrides?: CallOverrides): Promise<[BigNumber]>;

    protocolShareReserve(overrides?: CallOverrides): Promise<[string]>;

    redeem(
      redeemTokens: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    redeemUnderlying(
      redeemAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    reduceReserves(
      reduceAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    repayBorrow(
      repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    repayBorrowBehalf(
      borrower: string,
      repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    reserveFactorMantissa(overrides?: CallOverrides): Promise<[BigNumber]>;

    seize(
      liquidator: string,
      borrower: string,
      seizeTokens: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setAccessControlManager(
      accessControlManager_: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setInterestRateModel(
      newInterestRateModel: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setProtocolSeizeShare(
      newProtocolSeizeShareMantissa_: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setProtocolShareReserve(
      protocolShareReserve_: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setReserveFactor(
      newReserveFactorMantissa: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setShortfallContract(
      shortfall_: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    shortfall(overrides?: CallOverrides): Promise<[string]>;

    supplyRatePerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    sweepToken(
      token: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalBorrows(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalBorrowsCurrent(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    totalReserves(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      dst: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    transferFrom(
      src: string,
      dst: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    underlying(overrides?: CallOverrides): Promise<[string]>;
  };

  NO_ERROR(overrides?: CallOverrides): Promise<BigNumber>;

  acceptOwnership(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  accessControlManager(overrides?: CallOverrides): Promise<string>;

  accrualBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  accrueInterest(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  addReserves(
    addAmount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  badDebt(overrides?: CallOverrides): Promise<BigNumber>;

  badDebtRecovered(
    recoveredAmount_: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfUnderlying(
    owner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  borrow(
    borrowAmount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  borrowBalanceCurrent(
    account: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  borrowBalanceStored(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  borrowIndex(overrides?: CallOverrides): Promise<BigNumber>;

  borrowRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  comptroller(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  exchangeRateCurrent(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  exchangeRateStored(overrides?: CallOverrides): Promise<BigNumber>;

  forceLiquidateBorrow(
    liquidator: string,
    borrower: string,
    repayAmount: BigNumberish,
    vTokenCollateral: string,
    skipLiquidityCheck: boolean,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  getAccountSnapshot(
    account: string,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      error: BigNumber;
      vTokenBalance: BigNumber;
      borrowBalance: BigNumber;
      exchangeRate: BigNumber;
    }
  >;

  getCash(overrides?: CallOverrides): Promise<BigNumber>;

  healBorrow(
    payer: string,
    borrower: string,
    repayAmount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  initialize(
    underlying_: string,
    comptroller_: string,
    interestRateModel_: string,
    initialExchangeRateMantissa_: BigNumberish,
    name_: string,
    symbol_: string,
    decimals_: BigNumberish,
    admin_: string,
    accessControlManager_: string,
    riskManagement: VTokenInterface.RiskManagementInitStruct,
    reserveFactorMantissa_: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  interestRateModel(overrides?: CallOverrides): Promise<string>;

  isVToken(overrides?: CallOverrides): Promise<boolean>;

  liquidateBorrow(
    borrower: string,
    repayAmount: BigNumberish,
    vTokenCollateral: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  mint(
    mintAmount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  mintBehalf(
    minter: string,
    mintAmount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  protocolSeizeShareMantissa(overrides?: CallOverrides): Promise<BigNumber>;

  protocolShareReserve(overrides?: CallOverrides): Promise<string>;

  redeem(
    redeemTokens: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  redeemUnderlying(
    redeemAmount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  reduceReserves(
    reduceAmount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  repayBorrow(
    repayAmount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  repayBorrowBehalf(
    borrower: string,
    repayAmount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  reserveFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

  seize(
    liquidator: string,
    borrower: string,
    seizeTokens: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setAccessControlManager(
    accessControlManager_: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setInterestRateModel(
    newInterestRateModel: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setProtocolSeizeShare(
    newProtocolSeizeShareMantissa_: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setProtocolShareReserve(
    protocolShareReserve_: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setReserveFactor(
    newReserveFactorMantissa: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setShortfallContract(
    shortfall_: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  shortfall(overrides?: CallOverrides): Promise<string>;

  supplyRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  sweepToken(
    token: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalBorrows(overrides?: CallOverrides): Promise<BigNumber>;

  totalBorrowsCurrent(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  totalReserves(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    dst: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  transferFrom(
    src: string,
    dst: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  underlying(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    NO_ERROR(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    accessControlManager(overrides?: CallOverrides): Promise<string>;

    accrualBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    accrueInterest(overrides?: CallOverrides): Promise<BigNumber>;

    addReserves(addAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(spender: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    badDebt(overrides?: CallOverrides): Promise<BigNumber>;

    badDebtRecovered(recoveredAmount_: BigNumberish, overrides?: CallOverrides): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfUnderlying(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrow(borrowAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    borrowBalanceCurrent(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrowBalanceStored(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrowIndex(overrides?: CallOverrides): Promise<BigNumber>;

    borrowRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    comptroller(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    exchangeRateCurrent(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeRateStored(overrides?: CallOverrides): Promise<BigNumber>;

    forceLiquidateBorrow(
      liquidator: string,
      borrower: string,
      repayAmount: BigNumberish,
      vTokenCollateral: string,
      skipLiquidityCheck: boolean,
      overrides?: CallOverrides,
    ): Promise<void>;

    getAccountSnapshot(
      account: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        error: BigNumber;
        vTokenBalance: BigNumber;
        borrowBalance: BigNumber;
        exchangeRate: BigNumber;
      }
    >;

    getCash(overrides?: CallOverrides): Promise<BigNumber>;

    healBorrow(
      payer: string,
      borrower: string,
      repayAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    initialize(
      underlying_: string,
      comptroller_: string,
      interestRateModel_: string,
      initialExchangeRateMantissa_: BigNumberish,
      name_: string,
      symbol_: string,
      decimals_: BigNumberish,
      admin_: string,
      accessControlManager_: string,
      riskManagement: VTokenInterface.RiskManagementInitStruct,
      reserveFactorMantissa_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    interestRateModel(overrides?: CallOverrides): Promise<string>;

    isVToken(overrides?: CallOverrides): Promise<boolean>;

    liquidateBorrow(
      borrower: string,
      repayAmount: BigNumberish,
      vTokenCollateral: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    mint(mintAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    mintBehalf(
      minter: string,
      mintAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    protocolSeizeShareMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    protocolShareReserve(overrides?: CallOverrides): Promise<string>;

    redeem(redeemTokens: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    redeemUnderlying(redeemAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    reduceReserves(reduceAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    repayBorrow(repayAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    repayBorrowBehalf(
      borrower: string,
      repayAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    reserveFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    seize(
      liquidator: string,
      borrower: string,
      seizeTokens: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setAccessControlManager(
      accessControlManager_: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setInterestRateModel(newInterestRateModel: string, overrides?: CallOverrides): Promise<void>;

    setProtocolSeizeShare(
      newProtocolSeizeShareMantissa_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setProtocolShareReserve(
      protocolShareReserve_: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setReserveFactor(
      newReserveFactorMantissa: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setShortfallContract(shortfall_: string, overrides?: CallOverrides): Promise<void>;

    shortfall(overrides?: CallOverrides): Promise<string>;

    supplyRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    sweepToken(token: string, overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalBorrows(overrides?: CallOverrides): Promise<BigNumber>;

    totalBorrowsCurrent(overrides?: CallOverrides): Promise<BigNumber>;

    totalReserves(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(dst: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    transferFrom(
      src: string,
      dst: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    underlying(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'AccrueInterest(uint256,uint256,uint256,uint256)'(
      cashPrior?: null,
      interestAccumulated?: null,
      borrowIndex?: null,
      totalBorrows?: null,
    ): AccrueInterestEventFilter;
    AccrueInterest(
      cashPrior?: null,
      interestAccumulated?: null,
      borrowIndex?: null,
      totalBorrows?: null,
    ): AccrueInterestEventFilter;

    'Approval(address,address,uint256)'(
      owner?: string | null,
      spender?: string | null,
      amount?: null,
    ): ApprovalEventFilter;
    Approval(owner?: string | null, spender?: string | null, amount?: null): ApprovalEventFilter;

    'BadDebtIncreased(address,uint256,uint256,uint256)'(
      borrower?: string | null,
      badDebtDelta?: null,
      badDebtOld?: null,
      badDebtNew?: null,
    ): BadDebtIncreasedEventFilter;
    BadDebtIncreased(
      borrower?: string | null,
      badDebtDelta?: null,
      badDebtOld?: null,
      badDebtNew?: null,
    ): BadDebtIncreasedEventFilter;

    'BadDebtRecovered(uint256,uint256)'(
      badDebtOld?: null,
      badDebtNew?: null,
    ): BadDebtRecoveredEventFilter;
    BadDebtRecovered(badDebtOld?: null, badDebtNew?: null): BadDebtRecoveredEventFilter;

    'Borrow(address,uint256,uint256,uint256)'(
      borrower?: string | null,
      borrowAmount?: null,
      accountBorrows?: null,
      totalBorrows?: null,
    ): BorrowEventFilter;
    Borrow(
      borrower?: string | null,
      borrowAmount?: null,
      accountBorrows?: null,
      totalBorrows?: null,
    ): BorrowEventFilter;

    'HealBorrow(address,address,uint256)'(
      payer?: string | null,
      borrower?: string | null,
      repayAmount?: null,
    ): HealBorrowEventFilter;
    HealBorrow(
      payer?: string | null,
      borrower?: string | null,
      repayAmount?: null,
    ): HealBorrowEventFilter;

    'Initialized(uint8)'(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    'LiquidateBorrow(address,address,uint256,address,uint256)'(
      liquidator?: string | null,
      borrower?: string | null,
      repayAmount?: null,
      vTokenCollateral?: string | null,
      seizeTokens?: null,
    ): LiquidateBorrowEventFilter;
    LiquidateBorrow(
      liquidator?: string | null,
      borrower?: string | null,
      repayAmount?: null,
      vTokenCollateral?: string | null,
      seizeTokens?: null,
    ): LiquidateBorrowEventFilter;

    'Mint(address,uint256,uint256,uint256)'(
      minter?: string | null,
      mintAmount?: null,
      mintTokens?: null,
      accountBalance?: null,
    ): MintEventFilter;
    Mint(
      minter?: string | null,
      mintAmount?: null,
      mintTokens?: null,
      accountBalance?: null,
    ): MintEventFilter;

    'NewAccessControlManager(address,address)'(
      oldAccessControlManager?: null,
      newAccessControlManager?: null,
    ): NewAccessControlManagerEventFilter;
    NewAccessControlManager(
      oldAccessControlManager?: null,
      newAccessControlManager?: null,
    ): NewAccessControlManagerEventFilter;

    'NewComptroller(address,address)'(
      oldComptroller?: string | null,
      newComptroller?: string | null,
    ): NewComptrollerEventFilter;
    NewComptroller(
      oldComptroller?: string | null,
      newComptroller?: string | null,
    ): NewComptrollerEventFilter;

    'NewMarketInterestRateModel(address,address)'(
      oldInterestRateModel?: string | null,
      newInterestRateModel?: string | null,
    ): NewMarketInterestRateModelEventFilter;
    NewMarketInterestRateModel(
      oldInterestRateModel?: string | null,
      newInterestRateModel?: string | null,
    ): NewMarketInterestRateModelEventFilter;

    'NewProtocolSeizeShare(uint256,uint256)'(
      oldProtocolSeizeShareMantissa?: null,
      newProtocolSeizeShareMantissa?: null,
    ): NewProtocolSeizeShareEventFilter;
    NewProtocolSeizeShare(
      oldProtocolSeizeShareMantissa?: null,
      newProtocolSeizeShareMantissa?: null,
    ): NewProtocolSeizeShareEventFilter;

    'NewProtocolShareReserve(address,address)'(
      oldProtocolShareReserve?: string | null,
      newProtocolShareReserve?: string | null,
    ): NewProtocolShareReserveEventFilter;
    NewProtocolShareReserve(
      oldProtocolShareReserve?: string | null,
      newProtocolShareReserve?: string | null,
    ): NewProtocolShareReserveEventFilter;

    'NewReserveFactor(uint256,uint256)'(
      oldReserveFactorMantissa?: null,
      newReserveFactorMantissa?: null,
    ): NewReserveFactorEventFilter;
    NewReserveFactor(
      oldReserveFactorMantissa?: null,
      newReserveFactorMantissa?: null,
    ): NewReserveFactorEventFilter;

    'NewShortfallContract(address,address)'(
      oldShortfall?: string | null,
      newShortfall?: string | null,
    ): NewShortfallContractEventFilter;
    NewShortfallContract(
      oldShortfall?: string | null,
      newShortfall?: string | null,
    ): NewShortfallContractEventFilter;

    'OwnershipTransferStarted(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferStartedEventFilter;
    OwnershipTransferStarted(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferStartedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;

    'Redeem(address,uint256,uint256,uint256)'(
      redeemer?: string | null,
      redeemAmount?: null,
      redeemTokens?: null,
      accountBalance?: null,
    ): RedeemEventFilter;
    Redeem(
      redeemer?: string | null,
      redeemAmount?: null,
      redeemTokens?: null,
      accountBalance?: null,
    ): RedeemEventFilter;

    'RepayBorrow(address,address,uint256,uint256,uint256)'(
      payer?: string | null,
      borrower?: string | null,
      repayAmount?: null,
      accountBorrows?: null,
      totalBorrows?: null,
    ): RepayBorrowEventFilter;
    RepayBorrow(
      payer?: string | null,
      borrower?: string | null,
      repayAmount?: null,
      accountBorrows?: null,
      totalBorrows?: null,
    ): RepayBorrowEventFilter;

    'ReservesAdded(address,uint256,uint256)'(
      benefactor?: string | null,
      addAmount?: null,
      newTotalReserves?: null,
    ): ReservesAddedEventFilter;
    ReservesAdded(
      benefactor?: string | null,
      addAmount?: null,
      newTotalReserves?: null,
    ): ReservesAddedEventFilter;

    'ReservesReduced(address,uint256,uint256)'(
      admin?: string | null,
      reduceAmount?: null,
      newTotalReserves?: null,
    ): ReservesReducedEventFilter;
    ReservesReduced(
      admin?: string | null,
      reduceAmount?: null,
      newTotalReserves?: null,
    ): ReservesReducedEventFilter;

    'SweepToken(address)'(token?: string | null): SweepTokenEventFilter;
    SweepToken(token?: string | null): SweepTokenEventFilter;

    'Transfer(address,address,uint256)'(
      from?: string | null,
      to?: string | null,
      amount?: null,
    ): TransferEventFilter;
    Transfer(from?: string | null, to?: string | null, amount?: null): TransferEventFilter;
  };

  estimateGas: {
    NO_ERROR(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    accessControlManager(overrides?: CallOverrides): Promise<BigNumber>;

    accrualBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    accrueInterest(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    addReserves(
      addAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    badDebt(overrides?: CallOverrides): Promise<BigNumber>;

    badDebtRecovered(
      recoveredAmount_: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfUnderlying(
      owner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    borrow(
      borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    borrowBalanceCurrent(
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    borrowBalanceStored(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrowIndex(overrides?: CallOverrides): Promise<BigNumber>;

    borrowRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    comptroller(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    exchangeRateCurrent(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    exchangeRateStored(overrides?: CallOverrides): Promise<BigNumber>;

    forceLiquidateBorrow(
      liquidator: string,
      borrower: string,
      repayAmount: BigNumberish,
      vTokenCollateral: string,
      skipLiquidityCheck: boolean,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    getAccountSnapshot(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getCash(overrides?: CallOverrides): Promise<BigNumber>;

    healBorrow(
      payer: string,
      borrower: string,
      repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    initialize(
      underlying_: string,
      comptroller_: string,
      interestRateModel_: string,
      initialExchangeRateMantissa_: BigNumberish,
      name_: string,
      symbol_: string,
      decimals_: BigNumberish,
      admin_: string,
      accessControlManager_: string,
      riskManagement: VTokenInterface.RiskManagementInitStruct,
      reserveFactorMantissa_: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    interestRateModel(overrides?: CallOverrides): Promise<BigNumber>;

    isVToken(overrides?: CallOverrides): Promise<BigNumber>;

    liquidateBorrow(
      borrower: string,
      repayAmount: BigNumberish,
      vTokenCollateral: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    mint(mintAmount: BigNumberish, overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    mintBehalf(
      minter: string,
      mintAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    protocolSeizeShareMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    protocolShareReserve(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      redeemTokens: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    redeemUnderlying(
      redeemAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    reduceReserves(
      reduceAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    repayBorrow(
      repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    repayBorrowBehalf(
      borrower: string,
      repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    reserveFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    seize(
      liquidator: string,
      borrower: string,
      seizeTokens: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setAccessControlManager(
      accessControlManager_: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setInterestRateModel(
      newInterestRateModel: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setProtocolSeizeShare(
      newProtocolSeizeShareMantissa_: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setProtocolShareReserve(
      protocolShareReserve_: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setReserveFactor(
      newReserveFactorMantissa: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setShortfallContract(
      shortfall_: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    shortfall(overrides?: CallOverrides): Promise<BigNumber>;

    supplyRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    sweepToken(token: string, overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalBorrows(overrides?: CallOverrides): Promise<BigNumber>;

    totalBorrowsCurrent(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    totalReserves(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      dst: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    transferFrom(
      src: string,
      dst: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    NO_ERROR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptOwnership(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    accessControlManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accrualBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accrueInterest(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    addReserves(
      addAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    badDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    badDebtRecovered(
      recoveredAmount_: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOfUnderlying(
      owner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    borrow(
      borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    borrowBalanceCurrent(
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    borrowBalanceStored(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowRatePerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    comptroller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    exchangeRateCurrent(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    exchangeRateStored(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forceLiquidateBorrow(
      liquidator: string,
      borrower: string,
      repayAmount: BigNumberish,
      vTokenCollateral: string,
      skipLiquidityCheck: boolean,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    getAccountSnapshot(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    healBorrow(
      payer: string,
      borrower: string,
      repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    initialize(
      underlying_: string,
      comptroller_: string,
      interestRateModel_: string,
      initialExchangeRateMantissa_: BigNumberish,
      name_: string,
      symbol_: string,
      decimals_: BigNumberish,
      admin_: string,
      accessControlManager_: string,
      riskManagement: VTokenInterface.RiskManagementInitStruct,
      reserveFactorMantissa_: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    interestRateModel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isVToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidateBorrow(
      borrower: string,
      repayAmount: BigNumberish,
      vTokenCollateral: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    mint(
      mintAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    mintBehalf(
      minter: string,
      mintAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolSeizeShareMantissa(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolShareReserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      redeemTokens: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    redeemUnderlying(
      redeemAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    reduceReserves(
      reduceAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    repayBorrow(
      repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    repayBorrowBehalf(
      borrower: string,
      repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    reserveFactorMantissa(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seize(
      liquidator: string,
      borrower: string,
      seizeTokens: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setAccessControlManager(
      accessControlManager_: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setInterestRateModel(
      newInterestRateModel: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setProtocolSeizeShare(
      newProtocolSeizeShareMantissa_: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setProtocolShareReserve(
      protocolShareReserve_: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setReserveFactor(
      newReserveFactorMantissa: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setShortfallContract(
      shortfall_: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    shortfall(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supplyRatePerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sweepToken(
      token: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBorrows(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBorrowsCurrent(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    totalReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      dst: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      src: string,
      dst: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
