/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { EventFragment, FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type { OnEvent, TypedEvent, TypedEventFilter, TypedListener } from './common';

export declare namespace PoolRegistryInterface {
  export type VenusPoolMetaDataStruct = {
    category: string;
    logoURL: string;
    description: string;
  };

  export type VenusPoolMetaDataStructOutput = [string, string, string] & {
    category: string;
    logoURL: string;
    description: string;
  };

  export type VenusPoolStruct = {
    name: string;
    creator: string;
    comptroller: string;
    blockPosted: BigNumberish;
    timestampPosted: BigNumberish;
  };

  export type VenusPoolStructOutput = [string, string, string, BigNumber, BigNumber] & {
    name: string;
    creator: string;
    comptroller: string;
    blockPosted: BigNumber;
    timestampPosted: BigNumber;
  };
}

export declare namespace PoolRegistry {
  export type AddMarketInputStruct = {
    vToken: string;
    collateralFactor: BigNumberish;
    liquidationThreshold: BigNumberish;
    initialSupply: BigNumberish;
    vTokenReceiver: string;
    supplyCap: BigNumberish;
    borrowCap: BigNumberish;
  };

  export type AddMarketInputStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
  ] & {
    vToken: string;
    collateralFactor: BigNumber;
    liquidationThreshold: BigNumber;
    initialSupply: BigNumber;
    vTokenReceiver: string;
    supplyCap: BigNumber;
    borrowCap: BigNumber;
  };
}

export interface PoolRegistryInterface extends utils.Interface {
  functions: {
    'acceptOwnership()': FunctionFragment;
    'accessControlManager()': FunctionFragment;
    'addMarket((address,uint256,uint256,uint256,address,uint256,uint256))': FunctionFragment;
    'addPool(string,address,uint256,uint256,uint256)': FunctionFragment;
    'getAllPools()': FunctionFragment;
    'getPoolByComptroller(address)': FunctionFragment;
    'getPoolsSupportedByAsset(address)': FunctionFragment;
    'getVTokenForAsset(address,address)': FunctionFragment;
    'getVenusPoolMetadata(address)': FunctionFragment;
    'initialize(address)': FunctionFragment;
    'metadata(address)': FunctionFragment;
    'owner()': FunctionFragment;
    'pendingOwner()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setAccessControlManager(address)': FunctionFragment;
    'setPoolName(address,string)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'updatePoolMetadata(address,(string,string,string))': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'acceptOwnership'
      | 'accessControlManager'
      | 'addMarket'
      | 'addPool'
      | 'getAllPools'
      | 'getPoolByComptroller'
      | 'getPoolsSupportedByAsset'
      | 'getVTokenForAsset'
      | 'getVenusPoolMetadata'
      | 'initialize'
      | 'metadata'
      | 'owner'
      | 'pendingOwner'
      | 'renounceOwnership'
      | 'setAccessControlManager'
      | 'setPoolName'
      | 'transferOwnership'
      | 'updatePoolMetadata',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'acceptOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'accessControlManager', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'addMarket',
    values: [PoolRegistry.AddMarketInputStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'addPool',
    values: [string, string, BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'getAllPools', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getPoolByComptroller', values: [string]): string;
  encodeFunctionData(functionFragment: 'getPoolsSupportedByAsset', values: [string]): string;
  encodeFunctionData(functionFragment: 'getVTokenForAsset', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'getVenusPoolMetadata', values: [string]): string;
  encodeFunctionData(functionFragment: 'initialize', values: [string]): string;
  encodeFunctionData(functionFragment: 'metadata', values: [string]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingOwner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setAccessControlManager', values: [string]): string;
  encodeFunctionData(functionFragment: 'setPoolName', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'updatePoolMetadata',
    values: [string, PoolRegistryInterface.VenusPoolMetaDataStruct],
  ): string;

  decodeFunctionResult(functionFragment: 'acceptOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accessControlManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addMarket', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAllPools', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPoolByComptroller', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPoolsSupportedByAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVTokenForAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVenusPoolMetadata', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'metadata', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAccessControlManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPoolName', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updatePoolMetadata', data: BytesLike): Result;

  events: {
    'Initialized(uint8)': EventFragment;
    'MarketAdded(address,address)': EventFragment;
    'NewAccessControlManager(address,address)': EventFragment;
    'OwnershipTransferStarted(address,address)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'PoolMetadataUpdated(address,(string,string,string),(string,string,string))': EventFragment;
    'PoolNameSet(address,string,string)': EventFragment;
    'PoolRegistered(address,(string,address,address,uint256,uint256))': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MarketAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewAccessControlManager'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferStarted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolMetadataUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolNameSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolRegistered'): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MarketAddedEventObject {
  comptroller: string;
  vTokenAddress: string;
}
export type MarketAddedEvent = TypedEvent<[string, string], MarketAddedEventObject>;

export type MarketAddedEventFilter = TypedEventFilter<MarketAddedEvent>;

export interface NewAccessControlManagerEventObject {
  oldAccessControlManager: string;
  newAccessControlManager: string;
}
export type NewAccessControlManagerEvent = TypedEvent<
  [string, string],
  NewAccessControlManagerEventObject
>;

export type NewAccessControlManagerEventFilter = TypedEventFilter<NewAccessControlManagerEvent>;

export interface OwnershipTransferStartedEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferStartedEvent = TypedEvent<
  [string, string],
  OwnershipTransferStartedEventObject
>;

export type OwnershipTransferStartedEventFilter = TypedEventFilter<OwnershipTransferStartedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PoolMetadataUpdatedEventObject {
  comptroller: string;
  oldMetadata: PoolRegistryInterface.VenusPoolMetaDataStructOutput;
  newMetadata: PoolRegistryInterface.VenusPoolMetaDataStructOutput;
}
export type PoolMetadataUpdatedEvent = TypedEvent<
  [
    string,
    PoolRegistryInterface.VenusPoolMetaDataStructOutput,
    PoolRegistryInterface.VenusPoolMetaDataStructOutput,
  ],
  PoolMetadataUpdatedEventObject
>;

export type PoolMetadataUpdatedEventFilter = TypedEventFilter<PoolMetadataUpdatedEvent>;

export interface PoolNameSetEventObject {
  comptroller: string;
  oldName: string;
  newName: string;
}
export type PoolNameSetEvent = TypedEvent<[string, string, string], PoolNameSetEventObject>;

export type PoolNameSetEventFilter = TypedEventFilter<PoolNameSetEvent>;

export interface PoolRegisteredEventObject {
  comptroller: string;
  pool: PoolRegistryInterface.VenusPoolStructOutput;
}
export type PoolRegisteredEvent = TypedEvent<
  [string, PoolRegistryInterface.VenusPoolStructOutput],
  PoolRegisteredEventObject
>;

export type PoolRegisteredEventFilter = TypedEventFilter<PoolRegisteredEvent>;

export interface PoolRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoolRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOwnership(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    accessControlManager(overrides?: CallOverrides): Promise<[string]>;

    addMarket(
      input: PoolRegistry.AddMarketInputStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    addPool(
      name: string,
      comptroller: string,
      closeFactor: BigNumberish,
      liquidationIncentive: BigNumberish,
      minLiquidatableCollateral: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    getAllPools(
      overrides?: CallOverrides,
    ): Promise<[PoolRegistryInterface.VenusPoolStructOutput[]]>;

    getPoolByComptroller(
      comptroller: string,
      overrides?: CallOverrides,
    ): Promise<[PoolRegistryInterface.VenusPoolStructOutput]>;

    getPoolsSupportedByAsset(asset: string, overrides?: CallOverrides): Promise<[string[]]>;

    getVTokenForAsset(
      comptroller: string,
      asset: string,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    getVenusPoolMetadata(
      comptroller: string,
      overrides?: CallOverrides,
    ): Promise<[PoolRegistryInterface.VenusPoolMetaDataStructOutput]>;

    initialize(
      accessControlManager_: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    metadata(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, string] & {
        category: string;
        logoURL: string;
        description: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    setAccessControlManager(
      accessControlManager_: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setPoolName(
      comptroller: string,
      name: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    updatePoolMetadata(
      comptroller: string,
      metadata_: PoolRegistryInterface.VenusPoolMetaDataStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;
  };

  acceptOwnership(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  accessControlManager(overrides?: CallOverrides): Promise<string>;

  addMarket(
    input: PoolRegistry.AddMarketInputStruct,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  addPool(
    name: string,
    comptroller: string,
    closeFactor: BigNumberish,
    liquidationIncentive: BigNumberish,
    minLiquidatableCollateral: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  getAllPools(overrides?: CallOverrides): Promise<PoolRegistryInterface.VenusPoolStructOutput[]>;

  getPoolByComptroller(
    comptroller: string,
    overrides?: CallOverrides,
  ): Promise<PoolRegistryInterface.VenusPoolStructOutput>;

  getPoolsSupportedByAsset(asset: string, overrides?: CallOverrides): Promise<string[]>;

  getVTokenForAsset(comptroller: string, asset: string, overrides?: CallOverrides): Promise<string>;

  getVenusPoolMetadata(
    comptroller: string,
    overrides?: CallOverrides,
  ): Promise<PoolRegistryInterface.VenusPoolMetaDataStructOutput>;

  initialize(
    accessControlManager_: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  metadata(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<
    [string, string, string] & {
      category: string;
      logoURL: string;
      description: string;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  setAccessControlManager(
    accessControlManager_: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setPoolName(
    comptroller: string,
    name: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  updatePoolMetadata(
    comptroller: string,
    metadata_: PoolRegistryInterface.VenusPoolMetaDataStruct,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    accessControlManager(overrides?: CallOverrides): Promise<string>;

    addMarket(input: PoolRegistry.AddMarketInputStruct, overrides?: CallOverrides): Promise<void>;

    addPool(
      name: string,
      comptroller: string,
      closeFactor: BigNumberish,
      liquidationIncentive: BigNumberish,
      minLiquidatableCollateral: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getAllPools(overrides?: CallOverrides): Promise<PoolRegistryInterface.VenusPoolStructOutput[]>;

    getPoolByComptroller(
      comptroller: string,
      overrides?: CallOverrides,
    ): Promise<PoolRegistryInterface.VenusPoolStructOutput>;

    getPoolsSupportedByAsset(asset: string, overrides?: CallOverrides): Promise<string[]>;

    getVTokenForAsset(
      comptroller: string,
      asset: string,
      overrides?: CallOverrides,
    ): Promise<string>;

    getVenusPoolMetadata(
      comptroller: string,
      overrides?: CallOverrides,
    ): Promise<PoolRegistryInterface.VenusPoolMetaDataStructOutput>;

    initialize(accessControlManager_: string, overrides?: CallOverrides): Promise<void>;

    metadata(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, string] & {
        category: string;
        logoURL: string;
        description: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAccessControlManager(
      accessControlManager_: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setPoolName(comptroller: string, name: string, overrides?: CallOverrides): Promise<void>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    updatePoolMetadata(
      comptroller: string,
      metadata_: PoolRegistryInterface.VenusPoolMetaDataStruct,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'Initialized(uint8)'(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    'MarketAdded(address,address)'(
      comptroller?: string | null,
      vTokenAddress?: string | null,
    ): MarketAddedEventFilter;
    MarketAdded(comptroller?: string | null, vTokenAddress?: string | null): MarketAddedEventFilter;

    'NewAccessControlManager(address,address)'(
      oldAccessControlManager?: null,
      newAccessControlManager?: null,
    ): NewAccessControlManagerEventFilter;
    NewAccessControlManager(
      oldAccessControlManager?: null,
      newAccessControlManager?: null,
    ): NewAccessControlManagerEventFilter;

    'OwnershipTransferStarted(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferStartedEventFilter;
    OwnershipTransferStarted(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferStartedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;

    'PoolMetadataUpdated(address,(string,string,string),(string,string,string))'(
      comptroller?: string | null,
      oldMetadata?: null,
      newMetadata?: null,
    ): PoolMetadataUpdatedEventFilter;
    PoolMetadataUpdated(
      comptroller?: string | null,
      oldMetadata?: null,
      newMetadata?: null,
    ): PoolMetadataUpdatedEventFilter;

    'PoolNameSet(address,string,string)'(
      comptroller?: string | null,
      oldName?: null,
      newName?: null,
    ): PoolNameSetEventFilter;
    PoolNameSet(
      comptroller?: string | null,
      oldName?: null,
      newName?: null,
    ): PoolNameSetEventFilter;

    'PoolRegistered(address,(string,address,address,uint256,uint256))'(
      comptroller?: string | null,
      pool?: null,
    ): PoolRegisteredEventFilter;
    PoolRegistered(comptroller?: string | null, pool?: null): PoolRegisteredEventFilter;
  };

  estimateGas: {
    acceptOwnership(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    accessControlManager(overrides?: CallOverrides): Promise<BigNumber>;

    addMarket(
      input: PoolRegistry.AddMarketInputStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    addPool(
      name: string,
      comptroller: string,
      closeFactor: BigNumberish,
      liquidationIncentive: BigNumberish,
      minLiquidatableCollateral: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    getAllPools(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolByComptroller(comptroller: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPoolsSupportedByAsset(asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    getVTokenForAsset(
      comptroller: string,
      asset: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getVenusPoolMetadata(comptroller: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      accessControlManager_: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    metadata(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    setAccessControlManager(
      accessControlManager_: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setPoolName(
      comptroller: string,
      name: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    updatePoolMetadata(
      comptroller: string,
      metadata_: PoolRegistryInterface.VenusPoolMetaDataStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    accessControlManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addMarket(
      input: PoolRegistry.AddMarketInputStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    addPool(
      name: string,
      comptroller: string,
      closeFactor: BigNumberish,
      liquidationIncentive: BigNumberish,
      minLiquidatableCollateral: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    getAllPools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolByComptroller(
      comptroller: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getPoolsSupportedByAsset(
      asset: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getVTokenForAsset(
      comptroller: string,
      asset: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getVenusPoolMetadata(
      comptroller: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    initialize(
      accessControlManager_: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    metadata(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    setAccessControlManager(
      accessControlManager_: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setPoolName(
      comptroller: string,
      name: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    updatePoolMetadata(
      comptroller: string,
      metadata_: PoolRegistryInterface.VenusPoolMetaDataStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;
  };
}
