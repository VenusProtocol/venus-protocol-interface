/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type { OnEvent, TypedEvent, TypedEventFilter, TypedListener } from './common';

export declare namespace VenusLens {
  export type AccountLimitsStruct = {
    markets: string[];
    liquidity: BigNumberish;
    shortfall: BigNumberish;
  };

  export type AccountLimitsStructOutput = [string[], BigNumber, BigNumber] & {
    markets: string[];
    liquidity: BigNumber;
    shortfall: BigNumber;
  };

  export type GovProposalStruct = {
    proposalId: BigNumberish;
    proposer: string;
    eta: BigNumberish;
    targets: string[];
    values: BigNumberish[];
    signatures: string[];
    calldatas: BytesLike[];
    startBlock: BigNumberish;
    endBlock: BigNumberish;
    forVotes: BigNumberish;
    againstVotes: BigNumberish;
    canceled: boolean;
    executed: boolean;
  };

  export type GovProposalStructOutput = [
    BigNumber,
    string,
    BigNumber,
    string[],
    BigNumber[],
    string[],
    string[],
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    boolean,
  ] & {
    proposalId: BigNumber;
    proposer: string;
    eta: BigNumber;
    targets: string[];
    values: BigNumber[];
    signatures: string[];
    calldatas: string[];
    startBlock: BigNumber;
    endBlock: BigNumber;
    forVotes: BigNumber;
    againstVotes: BigNumber;
    canceled: boolean;
    executed: boolean;
  };

  export type GovReceiptStruct = {
    proposalId: BigNumberish;
    hasVoted: boolean;
    support: boolean;
    votes: BigNumberish;
  };

  export type GovReceiptStructOutput = [BigNumber, boolean, boolean, BigNumber] & {
    proposalId: BigNumber;
    hasVoted: boolean;
    support: boolean;
    votes: BigNumber;
  };

  export type VenusVotesStruct = {
    blockNumber: BigNumberish;
    votes: BigNumberish;
  };

  export type VenusVotesStructOutput = [BigNumber, BigNumber] & {
    blockNumber: BigNumber;
    votes: BigNumber;
  };

  export type XVSBalanceMetadataStruct = {
    balance: BigNumberish;
    votes: BigNumberish;
    delegate: string;
  };

  export type XVSBalanceMetadataStructOutput = [BigNumber, BigNumber, string] & {
    balance: BigNumber;
    votes: BigNumber;
    delegate: string;
  };

  export type XVSBalanceMetadataExtStruct = {
    balance: BigNumberish;
    votes: BigNumberish;
    delegate: string;
    allocated: BigNumberish;
  };

  export type XVSBalanceMetadataExtStructOutput = [BigNumber, BigNumber, string, BigNumber] & {
    balance: BigNumber;
    votes: BigNumber;
    delegate: string;
    allocated: BigNumber;
  };

  export type PendingRewardStruct = {
    vTokenAddress: string;
    amount: BigNumberish;
  };

  export type PendingRewardStructOutput = [string, BigNumber] & {
    vTokenAddress: string;
    amount: BigNumber;
  };

  export type RewardSummaryStruct = {
    distributorAddress: string;
    rewardTokenAddress: string;
    totalRewards: BigNumberish;
    pendingRewards: VenusLens.PendingRewardStruct[];
  };

  export type RewardSummaryStructOutput = [
    string,
    string,
    BigNumber,
    VenusLens.PendingRewardStructOutput[],
  ] & {
    distributorAddress: string;
    rewardTokenAddress: string;
    totalRewards: BigNumber;
    pendingRewards: VenusLens.PendingRewardStructOutput[];
  };

  export type VTokenBalancesStruct = {
    vToken: string;
    balanceOf: BigNumberish;
    borrowBalanceCurrent: BigNumberish;
    balanceOfUnderlying: BigNumberish;
    tokenBalance: BigNumberish;
    tokenAllowance: BigNumberish;
  };

  export type VTokenBalancesStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
  ] & {
    vToken: string;
    balanceOf: BigNumber;
    borrowBalanceCurrent: BigNumber;
    balanceOfUnderlying: BigNumber;
    tokenBalance: BigNumber;
    tokenAllowance: BigNumber;
  };

  export type VTokenMetadataStruct = {
    vToken: string;
    exchangeRateCurrent: BigNumberish;
    supplyRatePerBlock: BigNumberish;
    borrowRatePerBlock: BigNumberish;
    reserveFactorMantissa: BigNumberish;
    totalBorrows: BigNumberish;
    totalReserves: BigNumberish;
    totalSupply: BigNumberish;
    totalCash: BigNumberish;
    isListed: boolean;
    collateralFactorMantissa: BigNumberish;
    underlyingAssetAddress: string;
    vTokenDecimals: BigNumberish;
    underlyingDecimals: BigNumberish;
    venusSupplySpeed: BigNumberish;
    venusBorrowSpeed: BigNumberish;
    dailySupplyXvs: BigNumberish;
    dailyBorrowXvs: BigNumberish;
  };

  export type VTokenMetadataStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
  ] & {
    vToken: string;
    exchangeRateCurrent: BigNumber;
    supplyRatePerBlock: BigNumber;
    borrowRatePerBlock: BigNumber;
    reserveFactorMantissa: BigNumber;
    totalBorrows: BigNumber;
    totalReserves: BigNumber;
    totalSupply: BigNumber;
    totalCash: BigNumber;
    isListed: boolean;
    collateralFactorMantissa: BigNumber;
    underlyingAssetAddress: string;
    vTokenDecimals: BigNumber;
    underlyingDecimals: BigNumber;
    venusSupplySpeed: BigNumber;
    venusBorrowSpeed: BigNumber;
    dailySupplyXvs: BigNumber;
    dailyBorrowXvs: BigNumber;
  };

  export type VTokenUnderlyingPriceStruct = {
    vToken: string;
    underlyingPrice: BigNumberish;
  };

  export type VTokenUnderlyingPriceStructOutput = [string, BigNumber] & {
    vToken: string;
    underlyingPrice: BigNumber;
  };
}

export interface VenusLensInterface extends utils.Interface {
  functions: {
    'BLOCKS_PER_DAY()': FunctionFragment;
    'getAccountLimits(address,address)': FunctionFragment;
    'getDailyXVS(address,address)': FunctionFragment;
    'getGovProposals(address,uint256[])': FunctionFragment;
    'getGovReceipts(address,address,uint256[])': FunctionFragment;
    'getVenusVotes(address,address,uint32[])': FunctionFragment;
    'getXVSBalanceMetadata(address,address)': FunctionFragment;
    'getXVSBalanceMetadataExt(address,address,address)': FunctionFragment;
    'pendingRewards(address,address)': FunctionFragment;
    'vTokenBalances(address,address)': FunctionFragment;
    'vTokenBalancesAll(address[],address)': FunctionFragment;
    'vTokenMetadata(address)': FunctionFragment;
    'vTokenMetadataAll(address[])': FunctionFragment;
    'vTokenUnderlyingPrice(address)': FunctionFragment;
    'vTokenUnderlyingPriceAll(address[])': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'BLOCKS_PER_DAY'
      | 'getAccountLimits'
      | 'getDailyXVS'
      | 'getGovProposals'
      | 'getGovReceipts'
      | 'getVenusVotes'
      | 'getXVSBalanceMetadata'
      | 'getXVSBalanceMetadataExt'
      | 'pendingRewards'
      | 'vTokenBalances'
      | 'vTokenBalancesAll'
      | 'vTokenMetadata'
      | 'vTokenMetadataAll'
      | 'vTokenUnderlyingPrice'
      | 'vTokenUnderlyingPriceAll',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'BLOCKS_PER_DAY', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getAccountLimits', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'getDailyXVS', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'getGovProposals', values: [string, BigNumberish[]]): string;
  encodeFunctionData(
    functionFragment: 'getGovReceipts',
    values: [string, string, BigNumberish[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'getVenusVotes',
    values: [string, string, BigNumberish[]],
  ): string;
  encodeFunctionData(functionFragment: 'getXVSBalanceMetadata', values: [string, string]): string;
  encodeFunctionData(
    functionFragment: 'getXVSBalanceMetadataExt',
    values: [string, string, string],
  ): string;
  encodeFunctionData(functionFragment: 'pendingRewards', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'vTokenBalances', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'vTokenBalancesAll', values: [string[], string]): string;
  encodeFunctionData(functionFragment: 'vTokenMetadata', values: [string]): string;
  encodeFunctionData(functionFragment: 'vTokenMetadataAll', values: [string[]]): string;
  encodeFunctionData(functionFragment: 'vTokenUnderlyingPrice', values: [string]): string;
  encodeFunctionData(functionFragment: 'vTokenUnderlyingPriceAll', values: [string[]]): string;

  decodeFunctionResult(functionFragment: 'BLOCKS_PER_DAY', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAccountLimits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getDailyXVS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getGovProposals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getGovReceipts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVenusVotes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getXVSBalanceMetadata', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getXVSBalanceMetadataExt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vTokenBalances', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vTokenBalancesAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vTokenMetadata', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vTokenMetadataAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vTokenUnderlyingPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vTokenUnderlyingPriceAll', data: BytesLike): Result;

  events: {};
}

export interface VenusLens extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VenusLensInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BLOCKS_PER_DAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAccountLimits(
      comptroller: string,
      account: string,
      overrides?: CallOverrides,
    ): Promise<[VenusLens.AccountLimitsStructOutput]>;

    getDailyXVS(
      account: string,
      comptrollerAddress: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    getGovProposals(
      governor: string,
      proposalIds: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<[VenusLens.GovProposalStructOutput[]]>;

    getGovReceipts(
      governor: string,
      voter: string,
      proposalIds: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<[VenusLens.GovReceiptStructOutput[]]>;

    getVenusVotes(
      xvs: string,
      account: string,
      blockNumbers: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<[VenusLens.VenusVotesStructOutput[]]>;

    getXVSBalanceMetadata(
      xvs: string,
      account: string,
      overrides?: CallOverrides,
    ): Promise<[VenusLens.XVSBalanceMetadataStructOutput]>;

    getXVSBalanceMetadataExt(
      xvs: string,
      comptroller: string,
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    pendingRewards(
      holder: string,
      comptroller: string,
      overrides?: CallOverrides,
    ): Promise<[VenusLens.RewardSummaryStructOutput]>;

    vTokenBalances(
      vToken: string,
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    vTokenBalancesAll(
      vTokens: string[],
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    vTokenMetadata(
      vToken: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    vTokenMetadataAll(
      vTokens: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    vTokenUnderlyingPrice(
      vToken: string,
      overrides?: CallOverrides,
    ): Promise<[VenusLens.VTokenUnderlyingPriceStructOutput]>;

    vTokenUnderlyingPriceAll(
      vTokens: string[],
      overrides?: CallOverrides,
    ): Promise<[VenusLens.VTokenUnderlyingPriceStructOutput[]]>;
  };

  BLOCKS_PER_DAY(overrides?: CallOverrides): Promise<BigNumber>;

  getAccountLimits(
    comptroller: string,
    account: string,
    overrides?: CallOverrides,
  ): Promise<VenusLens.AccountLimitsStructOutput>;

  getDailyXVS(
    account: string,
    comptrollerAddress: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  getGovProposals(
    governor: string,
    proposalIds: BigNumberish[],
    overrides?: CallOverrides,
  ): Promise<VenusLens.GovProposalStructOutput[]>;

  getGovReceipts(
    governor: string,
    voter: string,
    proposalIds: BigNumberish[],
    overrides?: CallOverrides,
  ): Promise<VenusLens.GovReceiptStructOutput[]>;

  getVenusVotes(
    xvs: string,
    account: string,
    blockNumbers: BigNumberish[],
    overrides?: CallOverrides,
  ): Promise<VenusLens.VenusVotesStructOutput[]>;

  getXVSBalanceMetadata(
    xvs: string,
    account: string,
    overrides?: CallOverrides,
  ): Promise<VenusLens.XVSBalanceMetadataStructOutput>;

  getXVSBalanceMetadataExt(
    xvs: string,
    comptroller: string,
    account: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  pendingRewards(
    holder: string,
    comptroller: string,
    overrides?: CallOverrides,
  ): Promise<VenusLens.RewardSummaryStructOutput>;

  vTokenBalances(
    vToken: string,
    account: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  vTokenBalancesAll(
    vTokens: string[],
    account: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  vTokenMetadata(
    vToken: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  vTokenMetadataAll(
    vTokens: string[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  vTokenUnderlyingPrice(
    vToken: string,
    overrides?: CallOverrides,
  ): Promise<VenusLens.VTokenUnderlyingPriceStructOutput>;

  vTokenUnderlyingPriceAll(
    vTokens: string[],
    overrides?: CallOverrides,
  ): Promise<VenusLens.VTokenUnderlyingPriceStructOutput[]>;

  callStatic: {
    BLOCKS_PER_DAY(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountLimits(
      comptroller: string,
      account: string,
      overrides?: CallOverrides,
    ): Promise<VenusLens.AccountLimitsStructOutput>;

    getDailyXVS(
      account: string,
      comptrollerAddress: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getGovProposals(
      governor: string,
      proposalIds: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<VenusLens.GovProposalStructOutput[]>;

    getGovReceipts(
      governor: string,
      voter: string,
      proposalIds: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<VenusLens.GovReceiptStructOutput[]>;

    getVenusVotes(
      xvs: string,
      account: string,
      blockNumbers: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<VenusLens.VenusVotesStructOutput[]>;

    getXVSBalanceMetadata(
      xvs: string,
      account: string,
      overrides?: CallOverrides,
    ): Promise<VenusLens.XVSBalanceMetadataStructOutput>;

    getXVSBalanceMetadataExt(
      xvs: string,
      comptroller: string,
      account: string,
      overrides?: CallOverrides,
    ): Promise<VenusLens.XVSBalanceMetadataExtStructOutput>;

    pendingRewards(
      holder: string,
      comptroller: string,
      overrides?: CallOverrides,
    ): Promise<VenusLens.RewardSummaryStructOutput>;

    vTokenBalances(
      vToken: string,
      account: string,
      overrides?: CallOverrides,
    ): Promise<VenusLens.VTokenBalancesStructOutput>;

    vTokenBalancesAll(
      vTokens: string[],
      account: string,
      overrides?: CallOverrides,
    ): Promise<VenusLens.VTokenBalancesStructOutput[]>;

    vTokenMetadata(
      vToken: string,
      overrides?: CallOverrides,
    ): Promise<VenusLens.VTokenMetadataStructOutput>;

    vTokenMetadataAll(
      vTokens: string[],
      overrides?: CallOverrides,
    ): Promise<VenusLens.VTokenMetadataStructOutput[]>;

    vTokenUnderlyingPrice(
      vToken: string,
      overrides?: CallOverrides,
    ): Promise<VenusLens.VTokenUnderlyingPriceStructOutput>;

    vTokenUnderlyingPriceAll(
      vTokens: string[],
      overrides?: CallOverrides,
    ): Promise<VenusLens.VTokenUnderlyingPriceStructOutput[]>;
  };

  filters: {};

  estimateGas: {
    BLOCKS_PER_DAY(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountLimits(
      comptroller: string,
      account: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getDailyXVS(
      account: string,
      comptrollerAddress: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    getGovProposals(
      governor: string,
      proposalIds: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getGovReceipts(
      governor: string,
      voter: string,
      proposalIds: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getVenusVotes(
      xvs: string,
      account: string,
      blockNumbers: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getXVSBalanceMetadata(
      xvs: string,
      account: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getXVSBalanceMetadataExt(
      xvs: string,
      comptroller: string,
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    pendingRewards(
      holder: string,
      comptroller: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    vTokenBalances(
      vToken: string,
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    vTokenBalancesAll(
      vTokens: string[],
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    vTokenMetadata(vToken: string, overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    vTokenMetadataAll(
      vTokens: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    vTokenUnderlyingPrice(vToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    vTokenUnderlyingPriceAll(vTokens: string[], overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BLOCKS_PER_DAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccountLimits(
      comptroller: string,
      account: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getDailyXVS(
      account: string,
      comptrollerAddress: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    getGovProposals(
      governor: string,
      proposalIds: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getGovReceipts(
      governor: string,
      voter: string,
      proposalIds: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getVenusVotes(
      xvs: string,
      account: string,
      blockNumbers: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getXVSBalanceMetadata(
      xvs: string,
      account: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getXVSBalanceMetadataExt(
      xvs: string,
      comptroller: string,
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    pendingRewards(
      holder: string,
      comptroller: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    vTokenBalances(
      vToken: string,
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    vTokenBalancesAll(
      vTokens: string[],
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    vTokenMetadata(
      vToken: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    vTokenMetadataAll(
      vTokens: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    vTokenUnderlyingPrice(vToken: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vTokenUnderlyingPriceAll(
      vTokens: string[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
