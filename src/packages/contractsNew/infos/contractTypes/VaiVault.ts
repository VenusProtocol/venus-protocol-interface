/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { EventFragment, FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type { OnEvent, TypedEvent, TypedEventFilter, TypedListener } from './common';

export interface VaiVaultInterface extends utils.Interface {
  functions: {
    '_become(address)': FunctionFragment;
    'accXVSPerShare()': FunctionFragment;
    'accessControlManager()': FunctionFragment;
    'admin()': FunctionFragment;
    'claim(address)': FunctionFragment;
    'claim()': FunctionFragment;
    'deposit(uint256)': FunctionFragment;
    'pause()': FunctionFragment;
    'pendingAdmin()': FunctionFragment;
    'pendingRewards()': FunctionFragment;
    'pendingVAIVaultImplementation()': FunctionFragment;
    'pendingXVS(address)': FunctionFragment;
    'resume()': FunctionFragment;
    'setAccessControl(address)': FunctionFragment;
    'setVenusInfo(address,address)': FunctionFragment;
    'updatePendingRewards()': FunctionFragment;
    'userInfo(address)': FunctionFragment;
    'vai()': FunctionFragment;
    'vaiVaultImplementation()': FunctionFragment;
    'vaultPaused()': FunctionFragment;
    'withdraw(uint256)': FunctionFragment;
    'xvs()': FunctionFragment;
    'xvsBalance()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | '_become'
      | 'accXVSPerShare'
      | 'accessControlManager'
      | 'admin'
      | 'claim(address)'
      | 'claim()'
      | 'deposit'
      | 'pause'
      | 'pendingAdmin'
      | 'pendingRewards'
      | 'pendingVAIVaultImplementation'
      | 'pendingXVS'
      | 'resume'
      | 'setAccessControl'
      | 'setVenusInfo'
      | 'updatePendingRewards'
      | 'userInfo'
      | 'vai'
      | 'vaiVaultImplementation'
      | 'vaultPaused'
      | 'withdraw'
      | 'xvs'
      | 'xvsBalance',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: '_become', values: [string]): string;
  encodeFunctionData(functionFragment: 'accXVSPerShare', values?: undefined): string;
  encodeFunctionData(functionFragment: 'accessControlManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'admin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'claim(address)', values: [string]): string;
  encodeFunctionData(functionFragment: 'claim()', values?: undefined): string;
  encodeFunctionData(functionFragment: 'deposit', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingAdmin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingRewards', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingVAIVaultImplementation', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingXVS', values: [string]): string;
  encodeFunctionData(functionFragment: 'resume', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setAccessControl', values: [string]): string;
  encodeFunctionData(functionFragment: 'setVenusInfo', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'updatePendingRewards', values?: undefined): string;
  encodeFunctionData(functionFragment: 'userInfo', values: [string]): string;
  encodeFunctionData(functionFragment: 'vai', values?: undefined): string;
  encodeFunctionData(functionFragment: 'vaiVaultImplementation', values?: undefined): string;
  encodeFunctionData(functionFragment: 'vaultPaused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'xvs', values?: undefined): string;
  encodeFunctionData(functionFragment: 'xvsBalance', values?: undefined): string;

  decodeFunctionResult(functionFragment: '_become', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accXVSPerShare', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accessControlManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'admin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claim(address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claim()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingVAIVaultImplementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingXVS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'resume', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAccessControl', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setVenusInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updatePendingRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vai', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vaiVaultImplementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vaultPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'xvs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'xvsBalance', data: BytesLike): Result;

  events: {
    'Deposit(address,uint256)': EventFragment;
    'NewAccessControlManager(address,address)': EventFragment;
    'VaultPaused(address)': EventFragment;
    'VaultResumed(address)': EventFragment;
    'Withdraw(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewAccessControlManager'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VaultPaused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VaultResumed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export interface DepositEventObject {
  user: string;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface NewAccessControlManagerEventObject {
  oldAccessControlManager: string;
  newAccessControlManager: string;
}
export type NewAccessControlManagerEvent = TypedEvent<
  [string, string],
  NewAccessControlManagerEventObject
>;

export type NewAccessControlManagerEventFilter = TypedEventFilter<NewAccessControlManagerEvent>;

export interface VaultPausedEventObject {
  admin: string;
}
export type VaultPausedEvent = TypedEvent<[string], VaultPausedEventObject>;

export type VaultPausedEventFilter = TypedEventFilter<VaultPausedEvent>;

export interface VaultResumedEventObject {
  admin: string;
}
export type VaultResumedEvent = TypedEvent<[string], VaultResumedEventObject>;

export type VaultResumedEventFilter = TypedEventFilter<VaultResumedEvent>;

export interface WithdrawEventObject {
  user: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface VaiVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VaiVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _become(
      vaiVaultProxy: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    accXVSPerShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    accessControlManager(overrides?: CallOverrides): Promise<[string]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    'claim(address)'(
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'claim()'(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    pause(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    pendingAdmin(overrides?: CallOverrides): Promise<[string]>;

    pendingRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    pendingVAIVaultImplementation(overrides?: CallOverrides): Promise<[string]>;

    pendingXVS(_user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    resume(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    setAccessControl(
      newAccessControlAddress: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setVenusInfo(
      _xvs: string,
      _vai: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    updatePendingRewards(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }>;

    vai(overrides?: CallOverrides): Promise<[string]>;

    vaiVaultImplementation(overrides?: CallOverrides): Promise<[string]>;

    vaultPaused(overrides?: CallOverrides): Promise<[boolean]>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    xvs(overrides?: CallOverrides): Promise<[string]>;

    xvsBalance(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  _become(
    vaiVaultProxy: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  accXVSPerShare(overrides?: CallOverrides): Promise<BigNumber>;

  accessControlManager(overrides?: CallOverrides): Promise<string>;

  admin(overrides?: CallOverrides): Promise<string>;

  'claim(address)'(
    account: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'claim()'(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  deposit(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  pause(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  pendingAdmin(overrides?: CallOverrides): Promise<string>;

  pendingRewards(overrides?: CallOverrides): Promise<BigNumber>;

  pendingVAIVaultImplementation(overrides?: CallOverrides): Promise<string>;

  pendingXVS(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  resume(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  setAccessControl(
    newAccessControlAddress: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setVenusInfo(
    _xvs: string,
    _vai: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  updatePendingRewards(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  userInfo(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }>;

  vai(overrides?: CallOverrides): Promise<string>;

  vaiVaultImplementation(overrides?: CallOverrides): Promise<string>;

  vaultPaused(overrides?: CallOverrides): Promise<boolean>;

  withdraw(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  xvs(overrides?: CallOverrides): Promise<string>;

  xvsBalance(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    _become(vaiVaultProxy: string, overrides?: CallOverrides): Promise<void>;

    accXVSPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    accessControlManager(overrides?: CallOverrides): Promise<string>;

    admin(overrides?: CallOverrides): Promise<string>;

    'claim(address)'(account: string, overrides?: CallOverrides): Promise<void>;

    'claim()'(overrides?: CallOverrides): Promise<void>;

    deposit(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    pendingAdmin(overrides?: CallOverrides): Promise<string>;

    pendingRewards(overrides?: CallOverrides): Promise<BigNumber>;

    pendingVAIVaultImplementation(overrides?: CallOverrides): Promise<string>;

    pendingXVS(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    resume(overrides?: CallOverrides): Promise<void>;

    setAccessControl(newAccessControlAddress: string, overrides?: CallOverrides): Promise<void>;

    setVenusInfo(_xvs: string, _vai: string, overrides?: CallOverrides): Promise<void>;

    updatePendingRewards(overrides?: CallOverrides): Promise<void>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }>;

    vai(overrides?: CallOverrides): Promise<string>;

    vaiVaultImplementation(overrides?: CallOverrides): Promise<string>;

    vaultPaused(overrides?: CallOverrides): Promise<boolean>;

    withdraw(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    xvs(overrides?: CallOverrides): Promise<string>;

    xvsBalance(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    'Deposit(address,uint256)'(user?: string | null, amount?: null): DepositEventFilter;
    Deposit(user?: string | null, amount?: null): DepositEventFilter;

    'NewAccessControlManager(address,address)'(
      oldAccessControlManager?: null,
      newAccessControlManager?: null,
    ): NewAccessControlManagerEventFilter;
    NewAccessControlManager(
      oldAccessControlManager?: null,
      newAccessControlManager?: null,
    ): NewAccessControlManagerEventFilter;

    'VaultPaused(address)'(admin?: string | null): VaultPausedEventFilter;
    VaultPaused(admin?: string | null): VaultPausedEventFilter;

    'VaultResumed(address)'(admin?: string | null): VaultResumedEventFilter;
    VaultResumed(admin?: string | null): VaultResumedEventFilter;

    'Withdraw(address,uint256)'(user?: string | null, amount?: null): WithdrawEventFilter;
    Withdraw(user?: string | null, amount?: null): WithdrawEventFilter;
  };

  estimateGas: {
    _become(vaiVaultProxy: string, overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    accXVSPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    accessControlManager(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    'claim(address)'(
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'claim()'(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    deposit(_amount: BigNumberish, overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    pendingAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    pendingRewards(overrides?: CallOverrides): Promise<BigNumber>;

    pendingVAIVaultImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    pendingXVS(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    resume(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    setAccessControl(
      newAccessControlAddress: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setVenusInfo(
      _xvs: string,
      _vai: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    updatePendingRewards(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    userInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    vai(overrides?: CallOverrides): Promise<BigNumber>;

    vaiVaultImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    vaultPaused(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(_amount: BigNumberish, overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    xvs(overrides?: CallOverrides): Promise<BigNumber>;

    xvsBalance(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _become(
      vaiVaultProxy: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    accXVSPerShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accessControlManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'claim(address)'(
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'claim()'(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    pendingAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingVAIVaultImplementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingXVS(_user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    resume(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    setAccessControl(
      newAccessControlAddress: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setVenusInfo(
      _xvs: string,
      _vai: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    updatePendingRewards(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    userInfo(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vai(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaiVaultImplementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    xvs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    xvsBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
