/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type { OnEvent, TypedEvent, TypedEventFilter, TypedListener } from './common';

export declare namespace PoolLens {
  export type VTokenMetadataStruct = {
    vToken: string;
    exchangeRateCurrent: BigNumberish;
    supplyRatePerBlock: BigNumberish;
    borrowRatePerBlock: BigNumberish;
    reserveFactorMantissa: BigNumberish;
    supplyCaps: BigNumberish;
    borrowCaps: BigNumberish;
    totalBorrows: BigNumberish;
    totalReserves: BigNumberish;
    totalSupply: BigNumberish;
    totalCash: BigNumberish;
    isListed: boolean;
    collateralFactorMantissa: BigNumberish;
    underlyingAssetAddress: string;
    vTokenDecimals: BigNumberish;
    underlyingDecimals: BigNumberish;
  };

  export type VTokenMetadataStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
  ] & {
    vToken: string;
    exchangeRateCurrent: BigNumber;
    supplyRatePerBlock: BigNumber;
    borrowRatePerBlock: BigNumber;
    reserveFactorMantissa: BigNumber;
    supplyCaps: BigNumber;
    borrowCaps: BigNumber;
    totalBorrows: BigNumber;
    totalReserves: BigNumber;
    totalSupply: BigNumber;
    totalCash: BigNumber;
    isListed: boolean;
    collateralFactorMantissa: BigNumber;
    underlyingAssetAddress: string;
    vTokenDecimals: BigNumber;
    underlyingDecimals: BigNumber;
  };

  export type PoolDataStruct = {
    name: string;
    creator: string;
    comptroller: string;
    blockPosted: BigNumberish;
    timestampPosted: BigNumberish;
    category: string;
    logoURL: string;
    description: string;
    priceOracle: string;
    closeFactor: BigNumberish;
    liquidationIncentive: BigNumberish;
    minLiquidatableCollateral: BigNumberish;
    vTokens: PoolLens.VTokenMetadataStruct[];
  };

  export type PoolDataStructOutput = [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    PoolLens.VTokenMetadataStructOutput[],
  ] & {
    name: string;
    creator: string;
    comptroller: string;
    blockPosted: BigNumber;
    timestampPosted: BigNumber;
    category: string;
    logoURL: string;
    description: string;
    priceOracle: string;
    closeFactor: BigNumber;
    liquidationIncentive: BigNumber;
    minLiquidatableCollateral: BigNumber;
    vTokens: PoolLens.VTokenMetadataStructOutput[];
  };

  export type PendingRewardStruct = {
    vTokenAddress: string;
    amount: BigNumberish;
  };

  export type PendingRewardStructOutput = [string, BigNumber] & {
    vTokenAddress: string;
    amount: BigNumber;
  };

  export type RewardSummaryStruct = {
    distributorAddress: string;
    rewardTokenAddress: string;
    totalRewards: BigNumberish;
    pendingRewards: PoolLens.PendingRewardStruct[];
  };

  export type RewardSummaryStructOutput = [
    string,
    string,
    BigNumber,
    PoolLens.PendingRewardStructOutput[],
  ] & {
    distributorAddress: string;
    rewardTokenAddress: string;
    totalRewards: BigNumber;
    pendingRewards: PoolLens.PendingRewardStructOutput[];
  };

  export type BadDebtStruct = {
    vTokenAddress: string;
    badDebtUsd: BigNumberish;
  };

  export type BadDebtStructOutput = [string, BigNumber] & {
    vTokenAddress: string;
    badDebtUsd: BigNumber;
  };

  export type BadDebtSummaryStruct = {
    comptroller: string;
    totalBadDebtUsd: BigNumberish;
    badDebts: PoolLens.BadDebtStruct[];
  };

  export type BadDebtSummaryStructOutput = [string, BigNumber, PoolLens.BadDebtStructOutput[]] & {
    comptroller: string;
    totalBadDebtUsd: BigNumber;
    badDebts: PoolLens.BadDebtStructOutput[];
  };

  export type VTokenBalancesStruct = {
    vToken: string;
    balanceOf: BigNumberish;
    borrowBalanceCurrent: BigNumberish;
    balanceOfUnderlying: BigNumberish;
    tokenBalance: BigNumberish;
    tokenAllowance: BigNumberish;
  };

  export type VTokenBalancesStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
  ] & {
    vToken: string;
    balanceOf: BigNumber;
    borrowBalanceCurrent: BigNumber;
    balanceOfUnderlying: BigNumber;
    tokenBalance: BigNumber;
    tokenAllowance: BigNumber;
  };

  export type VTokenUnderlyingPriceStruct = {
    vToken: string;
    underlyingPrice: BigNumberish;
  };

  export type VTokenUnderlyingPriceStructOutput = [string, BigNumber] & {
    vToken: string;
    underlyingPrice: BigNumber;
  };
}

export declare namespace PoolRegistryInterface {
  export type VenusPoolStruct = {
    name: string;
    creator: string;
    comptroller: string;
    blockPosted: BigNumberish;
    timestampPosted: BigNumberish;
  };

  export type VenusPoolStructOutput = [string, string, string, BigNumber, BigNumber] & {
    name: string;
    creator: string;
    comptroller: string;
    blockPosted: BigNumber;
    timestampPosted: BigNumber;
  };
}

export interface PoolLensInterface extends utils.Interface {
  functions: {
    'getAllPools(address)': FunctionFragment;
    'getPendingRewards(address,address)': FunctionFragment;
    'getPoolBadDebt(address)': FunctionFragment;
    'getPoolByComptroller(address,address)': FunctionFragment;
    'getPoolDataFromVenusPool(address,(string,address,address,uint256,uint256))': FunctionFragment;
    'getPoolsSupportedByAsset(address,address)': FunctionFragment;
    'getVTokenForAsset(address,address,address)': FunctionFragment;
    'vTokenBalances(address,address)': FunctionFragment;
    'vTokenBalancesAll(address[],address)': FunctionFragment;
    'vTokenMetadata(address)': FunctionFragment;
    'vTokenMetadataAll(address[])': FunctionFragment;
    'vTokenUnderlyingPrice(address)': FunctionFragment;
    'vTokenUnderlyingPriceAll(address[])': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'getAllPools'
      | 'getPendingRewards'
      | 'getPoolBadDebt'
      | 'getPoolByComptroller'
      | 'getPoolDataFromVenusPool'
      | 'getPoolsSupportedByAsset'
      | 'getVTokenForAsset'
      | 'vTokenBalances'
      | 'vTokenBalancesAll'
      | 'vTokenMetadata'
      | 'vTokenMetadataAll'
      | 'vTokenUnderlyingPrice'
      | 'vTokenUnderlyingPriceAll',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'getAllPools', values: [string]): string;
  encodeFunctionData(functionFragment: 'getPendingRewards', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'getPoolBadDebt', values: [string]): string;
  encodeFunctionData(functionFragment: 'getPoolByComptroller', values: [string, string]): string;
  encodeFunctionData(
    functionFragment: 'getPoolDataFromVenusPool',
    values: [string, PoolRegistryInterface.VenusPoolStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'getPoolsSupportedByAsset',
    values: [string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getVTokenForAsset',
    values: [string, string, string],
  ): string;
  encodeFunctionData(functionFragment: 'vTokenBalances', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'vTokenBalancesAll', values: [string[], string]): string;
  encodeFunctionData(functionFragment: 'vTokenMetadata', values: [string]): string;
  encodeFunctionData(functionFragment: 'vTokenMetadataAll', values: [string[]]): string;
  encodeFunctionData(functionFragment: 'vTokenUnderlyingPrice', values: [string]): string;
  encodeFunctionData(functionFragment: 'vTokenUnderlyingPriceAll', values: [string[]]): string;

  decodeFunctionResult(functionFragment: 'getAllPools', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPendingRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPoolBadDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPoolByComptroller', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPoolDataFromVenusPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPoolsSupportedByAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVTokenForAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vTokenBalances', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vTokenBalancesAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vTokenMetadata', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vTokenMetadataAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vTokenUnderlyingPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vTokenUnderlyingPriceAll', data: BytesLike): Result;

  events: {};
}

export interface PoolLens extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoolLensInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAllPools(
      poolRegistryAddress: string,
      overrides?: CallOverrides,
    ): Promise<[PoolLens.PoolDataStructOutput[]]>;

    getPendingRewards(
      account: string,
      comptrollerAddress: string,
      overrides?: CallOverrides,
    ): Promise<[PoolLens.RewardSummaryStructOutput[]]>;

    getPoolBadDebt(
      comptrollerAddress: string,
      overrides?: CallOverrides,
    ): Promise<[PoolLens.BadDebtSummaryStructOutput]>;

    getPoolByComptroller(
      poolRegistryAddress: string,
      comptroller: string,
      overrides?: CallOverrides,
    ): Promise<[PoolLens.PoolDataStructOutput]>;

    getPoolDataFromVenusPool(
      poolRegistryAddress: string,
      venusPool: PoolRegistryInterface.VenusPoolStruct,
      overrides?: CallOverrides,
    ): Promise<[PoolLens.PoolDataStructOutput]>;

    getPoolsSupportedByAsset(
      poolRegistryAddress: string,
      asset: string,
      overrides?: CallOverrides,
    ): Promise<[string[]]>;

    getVTokenForAsset(
      poolRegistryAddress: string,
      comptroller: string,
      asset: string,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    vTokenBalances(
      vToken: string,
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    vTokenBalancesAll(
      vTokens: string[],
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    vTokenMetadata(
      vToken: string,
      overrides?: CallOverrides,
    ): Promise<[PoolLens.VTokenMetadataStructOutput]>;

    vTokenMetadataAll(
      vTokens: string[],
      overrides?: CallOverrides,
    ): Promise<[PoolLens.VTokenMetadataStructOutput[]]>;

    vTokenUnderlyingPrice(
      vToken: string,
      overrides?: CallOverrides,
    ): Promise<[PoolLens.VTokenUnderlyingPriceStructOutput]>;

    vTokenUnderlyingPriceAll(
      vTokens: string[],
      overrides?: CallOverrides,
    ): Promise<[PoolLens.VTokenUnderlyingPriceStructOutput[]]>;
  };

  getAllPools(
    poolRegistryAddress: string,
    overrides?: CallOverrides,
  ): Promise<PoolLens.PoolDataStructOutput[]>;

  getPendingRewards(
    account: string,
    comptrollerAddress: string,
    overrides?: CallOverrides,
  ): Promise<PoolLens.RewardSummaryStructOutput[]>;

  getPoolBadDebt(
    comptrollerAddress: string,
    overrides?: CallOverrides,
  ): Promise<PoolLens.BadDebtSummaryStructOutput>;

  getPoolByComptroller(
    poolRegistryAddress: string,
    comptroller: string,
    overrides?: CallOverrides,
  ): Promise<PoolLens.PoolDataStructOutput>;

  getPoolDataFromVenusPool(
    poolRegistryAddress: string,
    venusPool: PoolRegistryInterface.VenusPoolStruct,
    overrides?: CallOverrides,
  ): Promise<PoolLens.PoolDataStructOutput>;

  getPoolsSupportedByAsset(
    poolRegistryAddress: string,
    asset: string,
    overrides?: CallOverrides,
  ): Promise<string[]>;

  getVTokenForAsset(
    poolRegistryAddress: string,
    comptroller: string,
    asset: string,
    overrides?: CallOverrides,
  ): Promise<string>;

  vTokenBalances(
    vToken: string,
    account: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  vTokenBalancesAll(
    vTokens: string[],
    account: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  vTokenMetadata(
    vToken: string,
    overrides?: CallOverrides,
  ): Promise<PoolLens.VTokenMetadataStructOutput>;

  vTokenMetadataAll(
    vTokens: string[],
    overrides?: CallOverrides,
  ): Promise<PoolLens.VTokenMetadataStructOutput[]>;

  vTokenUnderlyingPrice(
    vToken: string,
    overrides?: CallOverrides,
  ): Promise<PoolLens.VTokenUnderlyingPriceStructOutput>;

  vTokenUnderlyingPriceAll(
    vTokens: string[],
    overrides?: CallOverrides,
  ): Promise<PoolLens.VTokenUnderlyingPriceStructOutput[]>;

  callStatic: {
    getAllPools(
      poolRegistryAddress: string,
      overrides?: CallOverrides,
    ): Promise<PoolLens.PoolDataStructOutput[]>;

    getPendingRewards(
      account: string,
      comptrollerAddress: string,
      overrides?: CallOverrides,
    ): Promise<PoolLens.RewardSummaryStructOutput[]>;

    getPoolBadDebt(
      comptrollerAddress: string,
      overrides?: CallOverrides,
    ): Promise<PoolLens.BadDebtSummaryStructOutput>;

    getPoolByComptroller(
      poolRegistryAddress: string,
      comptroller: string,
      overrides?: CallOverrides,
    ): Promise<PoolLens.PoolDataStructOutput>;

    getPoolDataFromVenusPool(
      poolRegistryAddress: string,
      venusPool: PoolRegistryInterface.VenusPoolStruct,
      overrides?: CallOverrides,
    ): Promise<PoolLens.PoolDataStructOutput>;

    getPoolsSupportedByAsset(
      poolRegistryAddress: string,
      asset: string,
      overrides?: CallOverrides,
    ): Promise<string[]>;

    getVTokenForAsset(
      poolRegistryAddress: string,
      comptroller: string,
      asset: string,
      overrides?: CallOverrides,
    ): Promise<string>;

    vTokenBalances(
      vToken: string,
      account: string,
      overrides?: CallOverrides,
    ): Promise<PoolLens.VTokenBalancesStructOutput>;

    vTokenBalancesAll(
      vTokens: string[],
      account: string,
      overrides?: CallOverrides,
    ): Promise<PoolLens.VTokenBalancesStructOutput[]>;

    vTokenMetadata(
      vToken: string,
      overrides?: CallOverrides,
    ): Promise<PoolLens.VTokenMetadataStructOutput>;

    vTokenMetadataAll(
      vTokens: string[],
      overrides?: CallOverrides,
    ): Promise<PoolLens.VTokenMetadataStructOutput[]>;

    vTokenUnderlyingPrice(
      vToken: string,
      overrides?: CallOverrides,
    ): Promise<PoolLens.VTokenUnderlyingPriceStructOutput>;

    vTokenUnderlyingPriceAll(
      vTokens: string[],
      overrides?: CallOverrides,
    ): Promise<PoolLens.VTokenUnderlyingPriceStructOutput[]>;
  };

  filters: {};

  estimateGas: {
    getAllPools(poolRegistryAddress: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPendingRewards(
      account: string,
      comptrollerAddress: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPoolBadDebt(comptrollerAddress: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPoolByComptroller(
      poolRegistryAddress: string,
      comptroller: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPoolDataFromVenusPool(
      poolRegistryAddress: string,
      venusPool: PoolRegistryInterface.VenusPoolStruct,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPoolsSupportedByAsset(
      poolRegistryAddress: string,
      asset: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getVTokenForAsset(
      poolRegistryAddress: string,
      comptroller: string,
      asset: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    vTokenBalances(
      vToken: string,
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    vTokenBalancesAll(
      vTokens: string[],
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    vTokenMetadata(vToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    vTokenMetadataAll(vTokens: string[], overrides?: CallOverrides): Promise<BigNumber>;

    vTokenUnderlyingPrice(vToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    vTokenUnderlyingPriceAll(vTokens: string[], overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getAllPools(
      poolRegistryAddress: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getPendingRewards(
      account: string,
      comptrollerAddress: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getPoolBadDebt(
      comptrollerAddress: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getPoolByComptroller(
      poolRegistryAddress: string,
      comptroller: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getPoolDataFromVenusPool(
      poolRegistryAddress: string,
      venusPool: PoolRegistryInterface.VenusPoolStruct,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getPoolsSupportedByAsset(
      poolRegistryAddress: string,
      asset: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getVTokenForAsset(
      poolRegistryAddress: string,
      comptroller: string,
      asset: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    vTokenBalances(
      vToken: string,
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    vTokenBalancesAll(
      vTokens: string[],
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    vTokenMetadata(vToken: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vTokenMetadataAll(vTokens: string[], overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vTokenUnderlyingPrice(vToken: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vTokenUnderlyingPriceAll(
      vTokens: string[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
