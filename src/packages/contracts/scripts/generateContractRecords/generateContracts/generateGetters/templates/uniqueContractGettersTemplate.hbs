import type { Provider } from '@ethersproject/abstract-provider';
import { Contract, Signer } from 'ethers';
import { useMemo } from 'react';

import abi from 'packages/contracts/generated/infos/abis/{{contractName}}.json';
import { {{contractName}} } from 'packages/contracts/generated/infos/contractTypes';
import { getUniqueContractAddress } from 'packages/contracts/utilities/getUniqueContractAddress';
import { useChainId, useProvider, useSigner } from 'packages/wallet';
import { ChainId } from 'types';

interface Get{{contractName}}ContractAddressInput {
  chainId: ChainId;
}

export const get{{contractName}}ContractAddress = ({
  chainId,
}: Get{{contractName}}ContractAddressInput) =>
  getUniqueContractAddress({ name: '{{contractName}}', chainId });

export const useGet{{contractName}}ContractAddress = () => {
  const { chainId } = useChainId();

  return useMemo(
    () =>
      get{{contractName}}ContractAddress({
        chainId,
      }),
    [chainId],
  );
};

interface Get{{contractName}}ContractInput {
  chainId: ChainId;
  signerOrProvider: Signer | Provider;
}

export const get{{contractName}}Contract = ({
  chainId,
  signerOrProvider,
}: Get{{contractName}}ContractInput) => {
  const address = get{{contractName}}ContractAddress({ chainId });
  return address ? (new Contract(address, abi, signerOrProvider) as {{contractName}}) : undefined;
};

interface UseGet{{contractName}}ContractInput {
  passSigner?: boolean;
  chainId?: ChainId;
}

export const useGet{{contractName}}Contract = (input?: UseGet{{contractName}}ContractInput) => {
  const { chainId: currentChainId } = useChainId();
  const chainId = input?.chainId || currentChainId;

  const { provider } = useProvider({ chainId });
  const { signer } = useSigner({ chainId });
  const signerOrProvider = input?.passSigner ? signer : provider;

  return useMemo(
    () =>
      signerOrProvider
        ? get{{contractName}}Contract({
            chainId,
            signerOrProvider,
          })
        : undefined,
    [signerOrProvider, chainId],
  );
};
