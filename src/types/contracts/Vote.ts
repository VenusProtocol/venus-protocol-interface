/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type ProposalCanceled = ContractEventLog<{
  id: string;
  0: string;
}>;
export type ProposalCreated = ContractEventLog<{
  id: string;
  proposer: string;
  targets: string[];
  values: string[];
  signatures: string[];
  calldatas: string[];
  startBlock: string;
  endBlock: string;
  description: string;
  0: string;
  1: string;
  2: string[];
  3: string[];
  4: string[];
  5: string[];
  6: string;
  7: string;
  8: string;
}>;
export type ProposalExecuted = ContractEventLog<{
  id: string;
  0: string;
}>;
export type ProposalQueued = ContractEventLog<{
  id: string;
  eta: string;
  0: string;
  1: string;
}>;
export type VoteCast = ContractEventLog<{
  voter: string;
  proposalId: string;
  support: boolean;
  votes: string;
  0: string;
  1: string;
  2: boolean;
  3: string;
}>;

export interface Vote extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Vote;
  clone(): Vote;
  methods: {
    BALLOT_TYPEHASH(): NonPayableTransactionObject<string>;

    DOMAIN_TYPEHASH(): NonPayableTransactionObject<string>;

    __abdicate(): NonPayableTransactionObject<void>;

    __acceptAdmin(): NonPayableTransactionObject<void>;

    __executeSetTimelockPendingAdmin(
      newPendingAdmin: string,
      eta: number | string | BN
    ): NonPayableTransactionObject<void>;

    __queueSetTimelockPendingAdmin(
      newPendingAdmin: string,
      eta: number | string | BN
    ): NonPayableTransactionObject<void>;

    cancel(proposalId: number | string | BN): NonPayableTransactionObject<void>;

    castVote(
      proposalId: number | string | BN,
      support: boolean
    ): NonPayableTransactionObject<void>;

    castVoteBySig(
      proposalId: number | string | BN,
      support: boolean,
      v: number | string | BN,
      r: string | number[],
      s: string | number[]
    ): NonPayableTransactionObject<void>;

    execute(proposalId: number | string | BN): PayableTransactionObject<void>;

    getActions(proposalId: number | string | BN): NonPayableTransactionObject<{
      targets: string[];
      values: string[];
      signatures: string[];
      calldatas: string[];
      0: string[];
      1: string[];
      2: string[];
      3: string[];
    }>;

    getReceipt(
      proposalId: number | string | BN,
      voter: string
    ): NonPayableTransactionObject<[boolean, boolean, string]>;

    guardian(): NonPayableTransactionObject<string>;

    latestProposalIds(arg0: string): NonPayableTransactionObject<string>;

    name(): NonPayableTransactionObject<string>;

    proposalCount(): NonPayableTransactionObject<string>;

    proposalMaxOperations(): NonPayableTransactionObject<string>;

    proposalThreshold(): NonPayableTransactionObject<string>;

    proposals(arg0: number | string | BN): NonPayableTransactionObject<{
      id: string;
      proposer: string;
      eta: string;
      startBlock: string;
      endBlock: string;
      forVotes: string;
      againstVotes: string;
      canceled: boolean;
      executed: boolean;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
      7: boolean;
      8: boolean;
    }>;

    propose(
      targets: string[],
      values: (number | string | BN)[],
      signatures: string[],
      calldatas: (string | number[])[],
      description: string
    ): NonPayableTransactionObject<string>;

    queue(proposalId: number | string | BN): NonPayableTransactionObject<void>;

    quorumVotes(): NonPayableTransactionObject<string>;

    state(
      proposalId: number | string | BN
    ): NonPayableTransactionObject<string>;

    timelock(): NonPayableTransactionObject<string>;

    votingDelay(): NonPayableTransactionObject<string>;

    votingPeriod(): NonPayableTransactionObject<string>;

    xvs(): NonPayableTransactionObject<string>;
  };
  events: {
    ProposalCanceled(cb?: Callback<ProposalCanceled>): EventEmitter;
    ProposalCanceled(
      options?: EventOptions,
      cb?: Callback<ProposalCanceled>
    ): EventEmitter;

    ProposalCreated(cb?: Callback<ProposalCreated>): EventEmitter;
    ProposalCreated(
      options?: EventOptions,
      cb?: Callback<ProposalCreated>
    ): EventEmitter;

    ProposalExecuted(cb?: Callback<ProposalExecuted>): EventEmitter;
    ProposalExecuted(
      options?: EventOptions,
      cb?: Callback<ProposalExecuted>
    ): EventEmitter;

    ProposalQueued(cb?: Callback<ProposalQueued>): EventEmitter;
    ProposalQueued(
      options?: EventOptions,
      cb?: Callback<ProposalQueued>
    ): EventEmitter;

    VoteCast(cb?: Callback<VoteCast>): EventEmitter;
    VoteCast(options?: EventOptions, cb?: Callback<VoteCast>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "ProposalCanceled", cb: Callback<ProposalCanceled>): void;
  once(
    event: "ProposalCanceled",
    options: EventOptions,
    cb: Callback<ProposalCanceled>
  ): void;

  once(event: "ProposalCreated", cb: Callback<ProposalCreated>): void;
  once(
    event: "ProposalCreated",
    options: EventOptions,
    cb: Callback<ProposalCreated>
  ): void;

  once(event: "ProposalExecuted", cb: Callback<ProposalExecuted>): void;
  once(
    event: "ProposalExecuted",
    options: EventOptions,
    cb: Callback<ProposalExecuted>
  ): void;

  once(event: "ProposalQueued", cb: Callback<ProposalQueued>): void;
  once(
    event: "ProposalQueued",
    options: EventOptions,
    cb: Callback<ProposalQueued>
  ): void;

  once(event: "VoteCast", cb: Callback<VoteCast>): void;
  once(event: "VoteCast", options: EventOptions, cb: Callback<VoteCast>): void;
}
