/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type ActionPaused_string_bool = ContractEventLog<{
  action: string;
  pauseState: boolean;
  0: string;
  1: boolean;
}>;
export type ActionPaused_address_string_bool = ContractEventLog<{
  vToken: string;
  action: string;
  pauseState: boolean;
  0: string;
  1: string;
  2: boolean;
}>;
export type ActionProtocolPaused = ContractEventLog<{
  state: boolean;
  0: boolean;
}>;
export type DistributedBorrowerVenus = ContractEventLog<{
  vToken: string;
  borrower: string;
  venusDelta: string;
  venusBorrowIndex: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type DistributedSupplierVenus = ContractEventLog<{
  vToken: string;
  supplier: string;
  venusDelta: string;
  venusSupplyIndex: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type DistributedVAIMinterVenus = ContractEventLog<{
  vaiMinter: string;
  venusDelta: string;
  venusVAIMintIndex: string;
  0: string;
  1: string;
  2: string;
}>;
export type DistributedVAIVaultVenus = ContractEventLog<{
  amount: string;
  0: string;
}>;
export type Failure = ContractEventLog<{
  error: string;
  info: string;
  detail: string;
  0: string;
  1: string;
  2: string;
}>;
export type MarketEntered = ContractEventLog<{
  vToken: string;
  account: string;
  0: string;
  1: string;
}>;
export type MarketExited = ContractEventLog<{
  vToken: string;
  account: string;
  0: string;
  1: string;
}>;
export type MarketListed = ContractEventLog<{
  vToken: string;
  0: string;
}>;
export type NewBorrowCap = ContractEventLog<{
  vToken: string;
  newBorrowCap: string;
  0: string;
  1: string;
}>;
export type NewBorrowCapGuardian = ContractEventLog<{
  oldBorrowCapGuardian: string;
  newBorrowCapGuardian: string;
  0: string;
  1: string;
}>;
export type NewCloseFactor = ContractEventLog<{
  oldCloseFactorMantissa: string;
  newCloseFactorMantissa: string;
  0: string;
  1: string;
}>;
export type NewCollateralFactor = ContractEventLog<{
  vToken: string;
  oldCollateralFactorMantissa: string;
  newCollateralFactorMantissa: string;
  0: string;
  1: string;
  2: string;
}>;
export type NewLiquidationIncentive = ContractEventLog<{
  oldLiquidationIncentiveMantissa: string;
  newLiquidationIncentiveMantissa: string;
  0: string;
  1: string;
}>;
export type NewPauseGuardian = ContractEventLog<{
  oldPauseGuardian: string;
  newPauseGuardian: string;
  0: string;
  1: string;
}>;
export type NewPriceOracle = ContractEventLog<{
  oldPriceOracle: string;
  newPriceOracle: string;
  0: string;
  1: string;
}>;
export type NewTreasuryAddress = ContractEventLog<{
  oldTreasuryAddress: string;
  newTreasuryAddress: string;
  0: string;
  1: string;
}>;
export type NewTreasuryGuardian = ContractEventLog<{
  oldTreasuryGuardian: string;
  newTreasuryGuardian: string;
  0: string;
  1: string;
}>;
export type NewTreasuryPercent = ContractEventLog<{
  oldTreasuryPercent: string;
  newTreasuryPercent: string;
  0: string;
  1: string;
}>;
export type NewVAIController = ContractEventLog<{
  oldVAIController: string;
  newVAIController: string;
  0: string;
  1: string;
}>;
export type NewVAIMintRate = ContractEventLog<{
  oldVAIMintRate: string;
  newVAIMintRate: string;
  0: string;
  1: string;
}>;
export type NewVAIVaultInfo = ContractEventLog<{
  vault_: string;
  releaseStartBlock_: string;
  releaseInterval_: string;
  0: string;
  1: string;
  2: string;
}>;
export type NewVenusVAIRate = ContractEventLog<{
  oldVenusVAIRate: string;
  newVenusVAIRate: string;
  0: string;
  1: string;
}>;
export type NewVenusVAIVaultRate = ContractEventLog<{
  oldVenusVAIVaultRate: string;
  newVenusVAIVaultRate: string;
  0: string;
  1: string;
}>;
export type VenusSpeedUpdated = ContractEventLog<{
  vToken: string;
  newSpeed: string;
  0: string;
  1: string;
}>;

export interface Comptroller extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Comptroller;
  clone(): Comptroller;
  methods: {
    _become(unitroller: string): NonPayableTransactionObject<void>;

    _borrowGuardianPaused(): NonPayableTransactionObject<boolean>;

    _mintGuardianPaused(): NonPayableTransactionObject<boolean>;

    _setBorrowCapGuardian(
      newBorrowCapGuardian: string
    ): NonPayableTransactionObject<void>;

    _setCloseFactor(
      newCloseFactorMantissa: number | string | BN
    ): NonPayableTransactionObject<string>;

    _setCollateralFactor(
      vToken: string,
      newCollateralFactorMantissa: number | string | BN
    ): NonPayableTransactionObject<string>;

    _setLiquidationIncentive(
      newLiquidationIncentiveMantissa: number | string | BN
    ): NonPayableTransactionObject<string>;

    _setMarketBorrowCaps(
      vTokens: string[],
      newBorrowCaps: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    _setPriceOracle(newOracle: string): NonPayableTransactionObject<string>;

    _setProtocolPaused(state: boolean): NonPayableTransactionObject<boolean>;

    _setTreasuryData(
      newTreasuryGuardian: string,
      newTreasuryAddress: string,
      newTreasuryPercent: number | string | BN
    ): NonPayableTransactionObject<string>;

    _setVAIController(
      vaiController_: string
    ): NonPayableTransactionObject<string>;

    _setVAIMintRate(
      newVAIMintRate: number | string | BN
    ): NonPayableTransactionObject<string>;

    _setVAIVaultInfo(
      vault_: string,
      releaseStartBlock_: number | string | BN,
      minReleaseAmount_: number | string | BN
    ): NonPayableTransactionObject<void>;

    _setVenusSpeed(
      vToken: string,
      venusSpeed: number | string | BN
    ): NonPayableTransactionObject<void>;

    _setVenusVAIRate(
      venusVAIRate_: number | string | BN
    ): NonPayableTransactionObject<void>;

    _setVenusVAIVaultRate(
      venusVAIVaultRate_: number | string | BN
    ): NonPayableTransactionObject<void>;

    _supportMarket(vToken: string): NonPayableTransactionObject<string>;

    accountAssets(
      arg0: string,
      arg1: number | string | BN
    ): NonPayableTransactionObject<string>;

    admin(): NonPayableTransactionObject<string>;

    allMarkets(arg0: number | string | BN): NonPayableTransactionObject<string>;

    borrowAllowed(
      vToken: string,
      borrower: string,
      borrowAmount: number | string | BN
    ): NonPayableTransactionObject<string>;

    borrowCapGuardian(): NonPayableTransactionObject<string>;

    borrowCaps(arg0: string): NonPayableTransactionObject<string>;

    borrowGuardianPaused(arg0: string): NonPayableTransactionObject<boolean>;

    borrowVerify(
      vToken: string,
      borrower: string,
      borrowAmount: number | string | BN
    ): NonPayableTransactionObject<void>;

    checkMembership(
      account: string,
      vToken: string
    ): NonPayableTransactionObject<boolean>;

    "claimVenus(address,address[])"(
      holder: string,
      vTokens: string[]
    ): NonPayableTransactionObject<void>;

    "claimVenus(address)"(holder: string): NonPayableTransactionObject<void>;

    "claimVenus(address[],address[],bool,bool)"(
      holders: string[],
      vTokens: string[],
      borrowers: boolean,
      suppliers: boolean
    ): NonPayableTransactionObject<void>;

    closeFactorMantissa(): NonPayableTransactionObject<string>;

    comptrollerImplementation(): NonPayableTransactionObject<string>;

    distributeVAIMinterVenus(
      vaiMinter: string
    ): NonPayableTransactionObject<void>;

    enterMarkets(vTokens: string[]): NonPayableTransactionObject<string[]>;

    exitMarket(vTokenAddress: string): NonPayableTransactionObject<string>;

    getAccountLiquidity(account: string): NonPayableTransactionObject<{
      0: string;
      1: string;
      2: string;
    }>;

    getAllMarkets(): NonPayableTransactionObject<string[]>;

    getAssetsIn(account: string): NonPayableTransactionObject<string[]>;

    getBlockNumber(): NonPayableTransactionObject<string>;

    getHypotheticalAccountLiquidity(
      account: string,
      vTokenModify: string,
      redeemTokens: number | string | BN,
      borrowAmount: number | string | BN
    ): NonPayableTransactionObject<{
      0: string;
      1: string;
      2: string;
    }>;

    getXVSAddress(): NonPayableTransactionObject<string>;

    isComptroller(): NonPayableTransactionObject<boolean>;

    liquidateBorrowAllowed(
      vTokenBorrowed: string,
      vTokenCollateral: string,
      liquidator: string,
      borrower: string,
      repayAmount: number | string | BN
    ): NonPayableTransactionObject<string>;

    liquidateBorrowVerify(
      vTokenBorrowed: string,
      vTokenCollateral: string,
      liquidator: string,
      borrower: string,
      actualRepayAmount: number | string | BN,
      seizeTokens: number | string | BN
    ): NonPayableTransactionObject<void>;

    liquidateCalculateSeizeTokens(
      vTokenBorrowed: string,
      vTokenCollateral: string,
      actualRepayAmount: number | string | BN
    ): NonPayableTransactionObject<{
      0: string;
      1: string;
    }>;

    liquidateVAICalculateSeizeTokens(
      vTokenCollateral: string,
      actualRepayAmount: number | string | BN
    ): NonPayableTransactionObject<{
      0: string;
      1: string;
    }>;

    liquidationIncentiveMantissa(): NonPayableTransactionObject<string>;

    markets(arg0: string): NonPayableTransactionObject<{
      isListed: boolean;
      collateralFactorMantissa: string;
      isVenus: boolean;
      0: boolean;
      1: string;
      2: boolean;
    }>;

    maxAssets(): NonPayableTransactionObject<string>;

    minReleaseAmount(): NonPayableTransactionObject<string>;

    mintAllowed(
      vToken: string,
      minter: string,
      mintAmount: number | string | BN
    ): NonPayableTransactionObject<string>;

    mintGuardianPaused(arg0: string): NonPayableTransactionObject<boolean>;

    mintVAIGuardianPaused(): NonPayableTransactionObject<boolean>;

    mintVerify(
      vToken: string,
      minter: string,
      actualMintAmount: number | string | BN,
      mintTokens: number | string | BN
    ): NonPayableTransactionObject<void>;

    mintedVAIs(arg0: string): NonPayableTransactionObject<string>;

    oracle(): NonPayableTransactionObject<string>;

    pauseGuardian(): NonPayableTransactionObject<string>;

    pendingAdmin(): NonPayableTransactionObject<string>;

    pendingComptrollerImplementation(): NonPayableTransactionObject<string>;

    protocolPaused(): NonPayableTransactionObject<boolean>;

    redeemAllowed(
      vToken: string,
      redeemer: string,
      redeemTokens: number | string | BN
    ): NonPayableTransactionObject<string>;

    redeemVerify(
      vToken: string,
      redeemer: string,
      redeemAmount: number | string | BN,
      redeemTokens: number | string | BN
    ): NonPayableTransactionObject<void>;

    releaseStartBlock(): NonPayableTransactionObject<string>;

    releaseToVault(): NonPayableTransactionObject<void>;

    repayBorrowAllowed(
      vToken: string,
      payer: string,
      borrower: string,
      repayAmount: number | string | BN
    ): NonPayableTransactionObject<string>;

    repayBorrowVerify(
      vToken: string,
      payer: string,
      borrower: string,
      actualRepayAmount: number | string | BN,
      borrowerIndex: number | string | BN
    ): NonPayableTransactionObject<void>;

    repayVAIGuardianPaused(): NonPayableTransactionObject<boolean>;

    seizeAllowed(
      vTokenCollateral: string,
      vTokenBorrowed: string,
      liquidator: string,
      borrower: string,
      seizeTokens: number | string | BN
    ): NonPayableTransactionObject<string>;

    seizeGuardianPaused(): NonPayableTransactionObject<boolean>;

    seizeVerify(
      vTokenCollateral: string,
      vTokenBorrowed: string,
      liquidator: string,
      borrower: string,
      seizeTokens: number | string | BN
    ): NonPayableTransactionObject<void>;

    setMintedVAIOf(
      owner: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<string>;

    transferAllowed(
      vToken: string,
      src: string,
      dst: string,
      transferTokens: number | string | BN
    ): NonPayableTransactionObject<string>;

    transferGuardianPaused(): NonPayableTransactionObject<boolean>;

    transferVerify(
      vToken: string,
      src: string,
      dst: string,
      transferTokens: number | string | BN
    ): NonPayableTransactionObject<void>;

    treasuryAddress(): NonPayableTransactionObject<string>;

    treasuryGuardian(): NonPayableTransactionObject<string>;

    treasuryPercent(): NonPayableTransactionObject<string>;

    vaiController(): NonPayableTransactionObject<string>;

    vaiMintRate(): NonPayableTransactionObject<string>;

    vaiVaultAddress(): NonPayableTransactionObject<string>;

    venusAccrued(arg0: string): NonPayableTransactionObject<string>;

    venusBorrowState(arg0: string): NonPayableTransactionObject<{
      index: string;
      block: string;
      0: string;
      1: string;
    }>;

    venusBorrowerIndex(
      arg0: string,
      arg1: string
    ): NonPayableTransactionObject<string>;

    venusInitialIndex(): NonPayableTransactionObject<string>;

    venusRate(): NonPayableTransactionObject<string>;

    venusSpeeds(arg0: string): NonPayableTransactionObject<string>;

    venusSupplierIndex(
      arg0: string,
      arg1: string
    ): NonPayableTransactionObject<string>;

    venusSupplyState(arg0: string): NonPayableTransactionObject<{
      index: string;
      block: string;
      0: string;
      1: string;
    }>;

    venusVAIRate(): NonPayableTransactionObject<string>;

    venusVAIVaultRate(): NonPayableTransactionObject<string>;
  };
  events: {
    "ActionPaused(string,bool)"(
      cb?: Callback<ActionPaused_string_bool>
    ): EventEmitter;
    "ActionPaused(string,bool)"(
      options?: EventOptions,
      cb?: Callback<ActionPaused_string_bool>
    ): EventEmitter;

    "ActionPaused(address,string,bool)"(
      cb?: Callback<ActionPaused_address_string_bool>
    ): EventEmitter;
    "ActionPaused(address,string,bool)"(
      options?: EventOptions,
      cb?: Callback<ActionPaused_address_string_bool>
    ): EventEmitter;

    ActionProtocolPaused(cb?: Callback<ActionProtocolPaused>): EventEmitter;
    ActionProtocolPaused(
      options?: EventOptions,
      cb?: Callback<ActionProtocolPaused>
    ): EventEmitter;

    DistributedBorrowerVenus(
      cb?: Callback<DistributedBorrowerVenus>
    ): EventEmitter;
    DistributedBorrowerVenus(
      options?: EventOptions,
      cb?: Callback<DistributedBorrowerVenus>
    ): EventEmitter;

    DistributedSupplierVenus(
      cb?: Callback<DistributedSupplierVenus>
    ): EventEmitter;
    DistributedSupplierVenus(
      options?: EventOptions,
      cb?: Callback<DistributedSupplierVenus>
    ): EventEmitter;

    DistributedVAIMinterVenus(
      cb?: Callback<DistributedVAIMinterVenus>
    ): EventEmitter;
    DistributedVAIMinterVenus(
      options?: EventOptions,
      cb?: Callback<DistributedVAIMinterVenus>
    ): EventEmitter;

    DistributedVAIVaultVenus(
      cb?: Callback<DistributedVAIVaultVenus>
    ): EventEmitter;
    DistributedVAIVaultVenus(
      options?: EventOptions,
      cb?: Callback<DistributedVAIVaultVenus>
    ): EventEmitter;

    Failure(cb?: Callback<Failure>): EventEmitter;
    Failure(options?: EventOptions, cb?: Callback<Failure>): EventEmitter;

    MarketEntered(cb?: Callback<MarketEntered>): EventEmitter;
    MarketEntered(
      options?: EventOptions,
      cb?: Callback<MarketEntered>
    ): EventEmitter;

    MarketExited(cb?: Callback<MarketExited>): EventEmitter;
    MarketExited(
      options?: EventOptions,
      cb?: Callback<MarketExited>
    ): EventEmitter;

    MarketListed(cb?: Callback<MarketListed>): EventEmitter;
    MarketListed(
      options?: EventOptions,
      cb?: Callback<MarketListed>
    ): EventEmitter;

    NewBorrowCap(cb?: Callback<NewBorrowCap>): EventEmitter;
    NewBorrowCap(
      options?: EventOptions,
      cb?: Callback<NewBorrowCap>
    ): EventEmitter;

    NewBorrowCapGuardian(cb?: Callback<NewBorrowCapGuardian>): EventEmitter;
    NewBorrowCapGuardian(
      options?: EventOptions,
      cb?: Callback<NewBorrowCapGuardian>
    ): EventEmitter;

    NewCloseFactor(cb?: Callback<NewCloseFactor>): EventEmitter;
    NewCloseFactor(
      options?: EventOptions,
      cb?: Callback<NewCloseFactor>
    ): EventEmitter;

    NewCollateralFactor(cb?: Callback<NewCollateralFactor>): EventEmitter;
    NewCollateralFactor(
      options?: EventOptions,
      cb?: Callback<NewCollateralFactor>
    ): EventEmitter;

    NewLiquidationIncentive(
      cb?: Callback<NewLiquidationIncentive>
    ): EventEmitter;
    NewLiquidationIncentive(
      options?: EventOptions,
      cb?: Callback<NewLiquidationIncentive>
    ): EventEmitter;

    NewPauseGuardian(cb?: Callback<NewPauseGuardian>): EventEmitter;
    NewPauseGuardian(
      options?: EventOptions,
      cb?: Callback<NewPauseGuardian>
    ): EventEmitter;

    NewPriceOracle(cb?: Callback<NewPriceOracle>): EventEmitter;
    NewPriceOracle(
      options?: EventOptions,
      cb?: Callback<NewPriceOracle>
    ): EventEmitter;

    NewTreasuryAddress(cb?: Callback<NewTreasuryAddress>): EventEmitter;
    NewTreasuryAddress(
      options?: EventOptions,
      cb?: Callback<NewTreasuryAddress>
    ): EventEmitter;

    NewTreasuryGuardian(cb?: Callback<NewTreasuryGuardian>): EventEmitter;
    NewTreasuryGuardian(
      options?: EventOptions,
      cb?: Callback<NewTreasuryGuardian>
    ): EventEmitter;

    NewTreasuryPercent(cb?: Callback<NewTreasuryPercent>): EventEmitter;
    NewTreasuryPercent(
      options?: EventOptions,
      cb?: Callback<NewTreasuryPercent>
    ): EventEmitter;

    NewVAIController(cb?: Callback<NewVAIController>): EventEmitter;
    NewVAIController(
      options?: EventOptions,
      cb?: Callback<NewVAIController>
    ): EventEmitter;

    NewVAIMintRate(cb?: Callback<NewVAIMintRate>): EventEmitter;
    NewVAIMintRate(
      options?: EventOptions,
      cb?: Callback<NewVAIMintRate>
    ): EventEmitter;

    NewVAIVaultInfo(cb?: Callback<NewVAIVaultInfo>): EventEmitter;
    NewVAIVaultInfo(
      options?: EventOptions,
      cb?: Callback<NewVAIVaultInfo>
    ): EventEmitter;

    NewVenusVAIRate(cb?: Callback<NewVenusVAIRate>): EventEmitter;
    NewVenusVAIRate(
      options?: EventOptions,
      cb?: Callback<NewVenusVAIRate>
    ): EventEmitter;

    NewVenusVAIVaultRate(cb?: Callback<NewVenusVAIVaultRate>): EventEmitter;
    NewVenusVAIVaultRate(
      options?: EventOptions,
      cb?: Callback<NewVenusVAIVaultRate>
    ): EventEmitter;

    VenusSpeedUpdated(cb?: Callback<VenusSpeedUpdated>): EventEmitter;
    VenusSpeedUpdated(
      options?: EventOptions,
      cb?: Callback<VenusSpeedUpdated>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "ActionProtocolPaused", cb: Callback<ActionProtocolPaused>): void;
  once(
    event: "ActionProtocolPaused",
    options: EventOptions,
    cb: Callback<ActionProtocolPaused>
  ): void;

  once(
    event: "DistributedBorrowerVenus",
    cb: Callback<DistributedBorrowerVenus>
  ): void;
  once(
    event: "DistributedBorrowerVenus",
    options: EventOptions,
    cb: Callback<DistributedBorrowerVenus>
  ): void;

  once(
    event: "DistributedSupplierVenus",
    cb: Callback<DistributedSupplierVenus>
  ): void;
  once(
    event: "DistributedSupplierVenus",
    options: EventOptions,
    cb: Callback<DistributedSupplierVenus>
  ): void;

  once(
    event: "DistributedVAIMinterVenus",
    cb: Callback<DistributedVAIMinterVenus>
  ): void;
  once(
    event: "DistributedVAIMinterVenus",
    options: EventOptions,
    cb: Callback<DistributedVAIMinterVenus>
  ): void;

  once(
    event: "DistributedVAIVaultVenus",
    cb: Callback<DistributedVAIVaultVenus>
  ): void;
  once(
    event: "DistributedVAIVaultVenus",
    options: EventOptions,
    cb: Callback<DistributedVAIVaultVenus>
  ): void;

  once(event: "Failure", cb: Callback<Failure>): void;
  once(event: "Failure", options: EventOptions, cb: Callback<Failure>): void;

  once(event: "MarketEntered", cb: Callback<MarketEntered>): void;
  once(
    event: "MarketEntered",
    options: EventOptions,
    cb: Callback<MarketEntered>
  ): void;

  once(event: "MarketExited", cb: Callback<MarketExited>): void;
  once(
    event: "MarketExited",
    options: EventOptions,
    cb: Callback<MarketExited>
  ): void;

  once(event: "MarketListed", cb: Callback<MarketListed>): void;
  once(
    event: "MarketListed",
    options: EventOptions,
    cb: Callback<MarketListed>
  ): void;

  once(event: "NewBorrowCap", cb: Callback<NewBorrowCap>): void;
  once(
    event: "NewBorrowCap",
    options: EventOptions,
    cb: Callback<NewBorrowCap>
  ): void;

  once(event: "NewBorrowCapGuardian", cb: Callback<NewBorrowCapGuardian>): void;
  once(
    event: "NewBorrowCapGuardian",
    options: EventOptions,
    cb: Callback<NewBorrowCapGuardian>
  ): void;

  once(event: "NewCloseFactor", cb: Callback<NewCloseFactor>): void;
  once(
    event: "NewCloseFactor",
    options: EventOptions,
    cb: Callback<NewCloseFactor>
  ): void;

  once(event: "NewCollateralFactor", cb: Callback<NewCollateralFactor>): void;
  once(
    event: "NewCollateralFactor",
    options: EventOptions,
    cb: Callback<NewCollateralFactor>
  ): void;

  once(
    event: "NewLiquidationIncentive",
    cb: Callback<NewLiquidationIncentive>
  ): void;
  once(
    event: "NewLiquidationIncentive",
    options: EventOptions,
    cb: Callback<NewLiquidationIncentive>
  ): void;

  once(event: "NewPauseGuardian", cb: Callback<NewPauseGuardian>): void;
  once(
    event: "NewPauseGuardian",
    options: EventOptions,
    cb: Callback<NewPauseGuardian>
  ): void;

  once(event: "NewPriceOracle", cb: Callback<NewPriceOracle>): void;
  once(
    event: "NewPriceOracle",
    options: EventOptions,
    cb: Callback<NewPriceOracle>
  ): void;

  once(event: "NewTreasuryAddress", cb: Callback<NewTreasuryAddress>): void;
  once(
    event: "NewTreasuryAddress",
    options: EventOptions,
    cb: Callback<NewTreasuryAddress>
  ): void;

  once(event: "NewTreasuryGuardian", cb: Callback<NewTreasuryGuardian>): void;
  once(
    event: "NewTreasuryGuardian",
    options: EventOptions,
    cb: Callback<NewTreasuryGuardian>
  ): void;

  once(event: "NewTreasuryPercent", cb: Callback<NewTreasuryPercent>): void;
  once(
    event: "NewTreasuryPercent",
    options: EventOptions,
    cb: Callback<NewTreasuryPercent>
  ): void;

  once(event: "NewVAIController", cb: Callback<NewVAIController>): void;
  once(
    event: "NewVAIController",
    options: EventOptions,
    cb: Callback<NewVAIController>
  ): void;

  once(event: "NewVAIMintRate", cb: Callback<NewVAIMintRate>): void;
  once(
    event: "NewVAIMintRate",
    options: EventOptions,
    cb: Callback<NewVAIMintRate>
  ): void;

  once(event: "NewVAIVaultInfo", cb: Callback<NewVAIVaultInfo>): void;
  once(
    event: "NewVAIVaultInfo",
    options: EventOptions,
    cb: Callback<NewVAIVaultInfo>
  ): void;

  once(event: "NewVenusVAIRate", cb: Callback<NewVenusVAIRate>): void;
  once(
    event: "NewVenusVAIRate",
    options: EventOptions,
    cb: Callback<NewVenusVAIRate>
  ): void;

  once(event: "NewVenusVAIVaultRate", cb: Callback<NewVenusVAIVaultRate>): void;
  once(
    event: "NewVenusVAIVaultRate",
    options: EventOptions,
    cb: Callback<NewVenusVAIVaultRate>
  ): void;

  once(event: "VenusSpeedUpdated", cb: Callback<VenusSpeedUpdated>): void;
  once(
    event: "VenusSpeedUpdated",
    options: EventOptions,
    cb: Callback<VenusSpeedUpdated>
  ): void;
}
