// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`borrow > borrow and unwrap flow > returns contract transaction when request succeeds 1`] = `
{
  "args": [
    "10000000000000000",
  ],
  "contract": {
    "functions": {
      "borrowAndUnwrap": [MockFunction spy],
    },
    "signer": {
      "_checkProvider": [MockFunction spy],
      "_isSigner": true,
      "call": [MockFunction spy],
      "checkTransaction": [MockFunction spy],
      "connect": [MockFunction spy],
      "estimateGas": [MockFunction spy],
      "getAddress": [MockFunction spy],
      "getBalance": [MockFunction spy],
      "getChainId": [MockFunction spy],
      "getFeeData": [MockFunction spy],
      "getGasPrice": [MockFunction spy],
      "getTransactionCount": [MockFunction spy],
      "populateTransaction": [MockFunction spy],
      "resolveName": [MockFunction spy],
      "sendTransaction": [MockFunction spy],
      "signMessage": [MockFunction spy],
      "signTransaction": [MockFunction spy],
    },
  },
  "methodName": "borrowAndUnwrap",
}
`;

exports[`borrow > borrow flow > includes accessList when underlying token is native 1`] = `
{
  "args": [
    "10000000000000000",
  ],
  "contract": {
    "functions": {
      "borrow": [MockFunction spy],
    },
    "signer": {
      "_checkProvider": [MockFunction spy],
      "_isSigner": true,
      "call": [MockFunction spy],
      "checkTransaction": [MockFunction spy],
      "connect": [MockFunction spy],
      "estimateGas": [MockFunction spy],
      "getAddress": [MockFunction spy] {
        "calls": [
          [],
        ],
        "results": [
          {
            "type": "return",
            "value": Promise {},
          },
        ],
      },
      "getBalance": [MockFunction spy],
      "getChainId": [MockFunction spy],
      "getFeeData": [MockFunction spy],
      "getGasPrice": [MockFunction spy],
      "getTransactionCount": [MockFunction spy],
      "populateTransaction": [MockFunction spy],
      "resolveName": [MockFunction spy],
      "sendTransaction": [MockFunction spy],
      "signMessage": [MockFunction spy],
      "signTransaction": [MockFunction spy],
    },
  },
  "methodName": "borrow",
  "overrides": {
    "accessList": [
      {
        "address": "0xfakeAddress",
        "storageKeys": [
          "0xfakeStorageKey",
        ],
      },
    ],
  },
}
`;

exports[`borrow > borrow flow > returns contract transaction when request succeeds 1`] = `
{
  "args": [
    "10000000000000000",
  ],
  "contract": {
    "functions": {
      "borrow": [MockFunction spy],
    },
    "signer": {
      "_checkProvider": [MockFunction spy],
      "_isSigner": true,
      "call": [MockFunction spy],
      "checkTransaction": [MockFunction spy],
      "connect": [MockFunction spy],
      "estimateGas": [MockFunction spy],
      "getAddress": [MockFunction spy],
      "getBalance": [MockFunction spy],
      "getChainId": [MockFunction spy],
      "getFeeData": [MockFunction spy],
      "getGasPrice": [MockFunction spy],
      "getTransactionCount": [MockFunction spy],
      "populateTransaction": [MockFunction spy],
      "resolveName": [MockFunction spy],
      "sendTransaction": [MockFunction spy],
      "signMessage": [MockFunction spy],
      "signTransaction": [MockFunction spy],
    },
  },
  "methodName": "borrow",
  "overrides": undefined,
}
`;
