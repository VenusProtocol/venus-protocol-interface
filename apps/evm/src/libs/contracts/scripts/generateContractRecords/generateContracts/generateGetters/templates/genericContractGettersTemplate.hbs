import type { Provider } from '@ethersproject/abstract-provider';
import { Contract, Signer } from 'ethers';
import { useMemo } from 'react';

import abi from 'libs/contracts/generated/infos/abis/{{contractName}}.json';
import { {{contractName}} } from 'libs/contracts/generated/infos/contractTypes';
import { useProvider, useSigner } from 'libs/wallet';
import { ChainId } from 'types';

interface Get{{contractName}}ContractInput {
  address: string;
  signerOrProvider: Signer | Provider;
}

export const get{{contractName}}Contract = ({ signerOrProvider, address }: Get{{contractName}}ContractInput) =>
  new Contract(address, abi, signerOrProvider) as {{contractName}};

interface UseGet{{contractName}}ContractInput {
  passSigner: boolean;
  address: string;
  chainId?: ChainId;
}

export const useGet{{contractName}}Contract = ({
  passSigner = false,
  address,
  chainId,
}: UseGet{{contractName}}ContractInput) => {
  const { provider } = useProvider({ chainId });
  const { signer } = useSigner({ chainId });
  const signerOrProvider = passSigner ? signer : provider;

  return useMemo(
    () =>
      signerOrProvider
        ? get{{contractName}}Contract({
            address,
            signerOrProvider,
          })
        : undefined,
    [signerOrProvider, address],
  );
};
